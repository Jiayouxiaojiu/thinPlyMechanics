#!/usr/bin/env Python
# -*- coding: utf-8 -*-

'''
=====================================================================================

Copyright (c) 2016 Université de Lorraine & Luleå tekniska universitet
Author: Luca Di Stasio <luca.distasio@gmail.com>
                       <luca.distasio@ingpec.eu>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=====================================================================================

DESCRIPTION

Automatic initialization of Working Directory.

Tested with Python 2.7 Anaconda 2.4.1 (64-bit) distribution
       Matlab R2007b, R2012a
       Windows 7 Integral Edition, Windows 10.

'''

from os.path import isfile, join, exists
from os import listdir, stat, makedirs
from datetime import datetime
from time import strftime
from platform import platform
import json
import subprocess

def writeTikzModel1():
    list = []
    list.append('\\newcommand{\\RefSystem}[1]{\n')
    list.append('    \n')
    list.append('    \\def\\domlim{1.28*#1}\n')
    list.append('\n')
    list.append('    \\tikzstyle{axes}=[]\n')
    list.append('\n')
    list.append('    \\begin{scope}[style=axes]\n')
    list.append('        \\draw[->] (-\\domlim,0) -- (\\domlim,0) node[right] {$\\underline{i}, x$};\n')
    list.append('        \\draw[->] (0,-\\domlim) -- (0,\\domlim) node[above] {$\\underline{k}, z$};\n')
    list.append('    \\end{scope}\n')
    list.append('    \\draw (-0.05,0) node[black,left,below] {$O$};\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\drawFiber}[4]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> theta\n')
    list.append('    %#3 -> deltatheta\n')
    list.append('\n')
    list.append('    \\def\\R{#1}\n')
    list.append('    \\def\\thetavalue{#2}\n')
    list.append('    \\def\\dtheta{#3}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetaup{cos(\\thetavalue+\\dtheta)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetaup{sin(\\thetavalue+\\dtheta)}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetabot{cos(\\thetavalue-\\dtheta)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetabot{sin(\\thetavalue-\\dtheta)}\n')
    list.append('    \n')
    list.append('    \\def\\thetaround{360+\\thetavalue-\\dtheta}\n')
    list.append('    \n')
    list.append('    %draw fiber surface\n')
    list.append('    \\draw[draw=#4] (\\costhetaup,\\sinthetaup)arc (\\thetavalue+\\dtheta:\\thetaround:\\R);\n')
    list.append('    %draw radius\n')
    list.append('    \\draw[dashed](0,0)--(-\\costhetabot,\\sinthetabot);\n')
    list.append('    %draw labels\n')
    list.append('    \\draw (-0.5*\\R,-0.5*\\R) node[black,above] {$\\Omega_{f}$};\n')
    list.append('    \\draw (-0.5*\\R*\\costhetabot,0.5*\\R*\\sinthetabot) node[black,above] {$R_{f}$};\n')
    list.append('    \\draw (-\\costhetaup*0.9*\\R,-\\sinthetaup*0.9*\\R) node[black,below] {$\\Gamma_{1}$};\n')
    list.append('    \\draw (0,\\R) node[black,above] {$\\left(0,R_{f}\\right)$};\n')
    list.append('    \\draw (-\\R,0) node[black,above] {$\\left(-R_{f},0\\right)$};\n')
    list.append('    \\draw (0,-\\R) node[black,below] {$\\left(0,-R_{f}\\right)$};\n')
    list.append('    \\draw (\\R,0) node[black,right] {$\\left(R_{f},0\\right)$};\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\drawMatrix}[4]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> l\n')
    list.append('    %#3 -> theta\n')
    list.append('    %#4 -> deltatheta\n')
    list.append('    \n')
    list.append('    \\def\\R{#1}\n')
    list.append('    \\def\cornerlabel{1.077*#2}\n')
    list.append('    \n')
    list.append('    \\def\\thetavalue{#3}\n')
    list.append('    \\def\\dtheta{#4}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetaup{cos(\\thetavalue+\\dtheta)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetaup{sin(\\thetavalue+\\dtheta)}\n')
    list.append('\n')
    list.append('    %draw matrix boundaries\n')
    list.append('    \\draw (#2,#2) -- (-#2,#2) -- (-#2,-#2) -- (#2,-#2) -- (#2,#2);\n')
    list.append('\n')
    list.append('    %draw labels\n')
    list.append('    \\draw (\\R,-\\R) node[black,above] {$\\Omega_{m}$};\n')
    list.append('    \\draw (#2,\cornerlabel) node[black,right] {$C\equiv\\left(+l,+l\\right)$};\n')
    list.append('    \\draw (-#2,\cornerlabel) node[black,left] {$D\equiv\\left(-l,+l\\right)$};\n')
    list.append('    \\draw (#2,-\cornerlabel) node[black,right] {$B\equiv\\left(+l,-l\\right)$};\n')
    list.append('    \\draw (-#2,-\cornerlabel) node[black,left] {$A\equiv\\left(-l,-l\\right)$};\n')
    list.append('    \\draw (-#2,0.5*#2) node[black,right] {$l$};\n')
    list.append('    \\draw (-#2,-0.5*#2) node[black,right] {$l$};\n')
    list.append('    \\draw (0.5*#2,#2) node[black,below] {$l$};\n')
    list.append('    \\draw (-0.5*#2,#2) node[black,below] {$l$};\n')
    list.append('    \\draw (-\\costhetaup*1.01*\\R,-\\sinthetaup*1.01*\\R) node[black,below] {$\\Gamma_{3}$};\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\drawDebond}[3]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> theta\n')
    list.append('    %#3 -> deltatheta\n')
    list.append('\n')
    list.append('    \\def\\R{#1}\n')
    list.append('    \\def\\thetavalue{#2}\n')
    list.append('    \\def\\dtheta{#3}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\costheta{cos(\\thetavalue)}\n')
    list.append('    \\pgfmathsetmacro\sintheta{sin(\\thetavalue)}\n')
    list.append('    \n')
    list.append('    \\def\\thetahalfbot{\\thetavalue-0.5*\\dtheta}\n')
    list.append('    \\def\\thetahalfup{\\thetavalue+0.5*\\dtheta}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetaup{cos(\\thetavalue+\\dtheta)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetaup{sin(\\thetavalue+\\dtheta)}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetabot{cos(\\thetavalue-\\dtheta)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetabot{sin(\\thetavalue-\\dtheta)}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetahalfbot{cos(\\thetahalfbot)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetahalfbot{sin(\\thetahalfbot)}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetahalfup{cos(\\thetahalfup)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetahalfup{sin(\\thetahalfup)}\n')
    list.append('\n')
    list.append('    \\filldraw[fill=green!20,draw=green!50!black] (0,0) -- (0.3*\\R,0) arc(0:\\thetavalue:0.3*\\R);\n')
    list.append('    \\draw (0.25*\\thetavalue:0.2*\\R) node[green!50!black] {$\\theta$};\n')
    list.append('\n')
    list.append('    \\filldraw[fill=blue!20,draw=blue!50!black](0.3*\\costhetabot*\\R,0.3*\\sinthetabot*\\R) -- (0.6*\\costhetabot*\\R,0.6*\\sinthetabot*\\R) arc(\\thetavalue-\\dtheta:\\thetavalue:0.6*\\R) --  (0.3*\\costheta*\\Rf,0.3*\\sintheta*\\R) arc(\\thetavalue:\\thetavalue-\\dtheta:0.3*\\R);\n')
    list.append('   \\draw (0.45*\\costhetahalfbot*\\R,0.45*\\sinthetahalfbot*\\R) node[blue!50!black] {$\\Delta\\theta$};\n')
    list.append('\n')
    list.append('   \\filldraw[fill=blue!20,draw=blue!50!black](0.3*\costheta*\\R,0.3*\sintheta*\\R) -- (0.6*\\costheta*\\R,0.6*\\sintheta*\\R) arc(\\thetavalue:\\thetavalue+\\dtheta:0.6*\\R) --  (0.3*\\costhetaup*\\R,0.3*\\sinthetaup*\\R) arc(\\thetavalue+\\dtheta:\\thetavalue:0.3*\\R);\n')
    list.append('   \\draw (0.45*\\costhetahalfup*\\Rf,0.45*\\sinthetahalfup*\\Rf) node[blue!50!black] {$\\Delta\\theta$};\n')
    list.append('\n')
    list.append('   \\draw[draw=red,line width=2pt](\\costhetaup,\\sinthetaup) arc(\\thetavalue+\\dtheta:\\thetavalue-\\dtheta:\\R);\n')
    list.append('\n')
    list.append('    \\draw(0,0)--(\\costheta,\\sintheta);\n')
    list.append('    \\draw(0,0)--(\\costhetabot,\\sinthetabot);\n')
    list.append('    \\draw(0,0)--(\\costhetaup,\\sinthetaup);\n')
    list.append('    \n')
    list.append('    %draw labels\n')
    list.append('    \\draw (\\costhetabot*\\R,\\sinthetabot*\\R) node[black,below] {$I$};\n')
    list.append('    \\draw (\\costhetaup*\\R,\\sinthetaup*\\R) node[black,above] {$L$};\n')
    list.append('    \\draw (\\costheta*\\R,\\sintheta*\\R) node[black,below] {$H$};\n')
    list.append('    \\draw (\\costheta*\\R,\\sintheta*\\R) node[red!50!black,above] {$a$};\n')
    list.append('    \\draw (\\costhetahalfup*\\R,\\sinthetahalfup*\\R) node[black,above] {$\\Gamma_{4}$};\n')
    list.append('    \\draw (0.95*\\costhetabot*\\R,1.1*\\sinthetabot*\\R) node[black,left] {$\\Gamma_{2}$};\n')
    list.append('\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\NB}[2]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> l\n')
    list.append('\n')
    list.append('    \\def\\loadlim{1.197*#2}\n')
    list.append('    \\def\\domlim{1.28*#2}\n')
    list.append('    \\def\\loadlabel{0.2*#1}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\yloadarrowone{#2+(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\\yloadarrowtwo{#2+2*(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\\yloadarrowthree{#2+3*(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\\yloadarrowfour{#2+4*(\\loadlim-#2)*0.2}\n')
    list.append('    \n')
    list.append('    \\draw[line width=2.5pt] (-#2,#2) -- (#2,#2) ;\n')
    list.append('    \n')
    list.append('    \\draw (-#2,2*\\l-\\loadlim) --  ( #2,\\loadlim) ;\n')
    list.append('        \n')
    list.append('    \\draw (#2,#2) -- ( #2,\\loadlim);\n')
    list.append('\n')
    list.append('    \\draw[->] (#2*0.2,\\yloadarrowone) -- (#2,\\yloadarrowone);\n')
    list.append('    \\draw[->] (-#2*0.2,2*#2-\\yloadarrowone) -- (-#2,2*#2-\\yloadarrowone);\n')
    list.append('    \\draw[->] (#2*0.4,\\yloadarrowtwo) -- (#2,\\yloadarrowtwo);\n')
    list.append('    \\draw[->] (-#2*0.4,2*#2-\\yloadarrowtwo) -- (-#2,2*#2-\\yloadarrowtwo);\n')
    list.append('    \\draw[->] (#2*0.6,\\yloadarrowthree) -- (#2,\\yloadarrowthree);\n')
    list.append('    \\draw[->] (-#2*0.6,2*#2-\\yloadarrowthree) -- (-#2,2*#2-\\yloadarrowthree);\n')
    list.append('    \\draw[->] (#2*0.8,\\yloadarrowfour) -- (#2,\\yloadarrowfour);\n')
    list.append('    \\draw[->] (-#2*0.8,2*#2-\\yloadarrowfour) -- (-#2,2*#2-\\yloadarrowfour);\n')
    list.append('\n')
    list.append('    \\draw (0.925*\\loadlabel,0.925*\\domlim) node[black,right] {$w\\left(x,l\\right)=w\\left(l,l\\right)$};\n')
    list.append('\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\SB}[2]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> l\n')
    list.append('\n')
    list.append('    \\def\\loadlim{1.197*#2}\n')
    list.append('    \\def\\domlim{1.28*#2}\n')
    list.append('    \\def\\loadlabel{0.2*#1}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\yloadarrowone{#2+(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\\yloadarrowtwo{#2+2*(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\\yloadarrowthree{#2+3*(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\\yloadarrowfour{#2+4*(\\loadlim-#2)*0.2}\n')
    list.append('    \n')
    list.append('    \\draw[line width=2.5pt] (-#2,-#2) -- (#2,-#2) ;\n')
    list.append('    \n')
    list.append('    \\draw (-#2,-2*\l+\\loadlim) --  ( #2,-\\loadlim) ;\n')
    list.append('        \n')
    list.append('    \\draw (#2,-#2) -- ( #2,-\\loadlim);\n')
    list.append('\n')
    list.append('    \\draw[->] (#2*0.2,-\\yloadarrowone) -- (#2,-\\yloadarrowone);\n')
    list.append('    \\draw[->] (-#2*0.2,-2*#2+\\yloadarrowone) -- (-#2,-2*#2+\\yloadarrowone);\n')
    list.append('    \\draw[->] (#2*0.4,-\\yloadarrowtwo) -- (#2,-\\yloadarrowtwo);\n')
    list.append('    \\draw[->] (-#2*0.4,-2*#2+\\yloadarrowtwo) -- (-#2,-2*#2+\\yloadarrowtwo);\n')
    list.append('    \\draw[->] (#2*0.6,-\\yloadarrowthree) -- (#2,-\\yloadarrowthree);\n')
    list.append('    \\draw[->] (-#2*0.6,-2*#2+\\yloadarrowthree) -- (-#2,-2*#2+\\yloadarrowthree);\n')
    list.append('    \\draw[->] (#2*0.8,-\\yloadarrowfour) -- (#2,-\\yloadarrowfour);\n')
    list.append('    \\draw[->] (-#2*0.8,-2*#2+\\yloadarrowfour) -- (-#2,-2*#2+\\yloadarrowfour);\n')
    list.append('\n')
    list.append('    \\draw (-\\loadlabel,-0.925*\\domlim) node[black,left] {$w\\left(x,-l\\right)=w\\left(l,-l\\right)$};\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\EB}[2]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> l\n')
    list.append('\n')
    list.append('    \\def\\loadlim{1.197*#2}\n')
    list.append('    \\def\\loadlabel{0.2*#1}\n')
    list.append('    \n')
    list.append('    \\foreach \y in {-1,-0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1,0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1}\n')
    list.append('        \\draw[->] (#2, \y*#2) -- (\\loadlim,\y*#2);\n')
    list.append('    \n')
    list.append('    \\draw[line width=0.05pt] (\\loadlim,-#2) -- (\\loadlim,#2);\n')
    list.append('\n')
    list.append('    \\draw (0.95*\\domlim,\\loadlabel) node[black,right] {$u\\left(l,z\\right)_{x}=\\bar{\\varepsilon}\\cdot l$};\n')
    list.append('\n')
    list.append('\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\WB}[2]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> l\n')
    list.append('\n')
    list.append('    \\def\\loadlim{1.197*#2}\n')
    list.append('    \\def\\loadlabel{0.2*#1}\n')
    list.append('    \n')
    list.append('    \\foreach \y in {-1,-0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1,0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1}\n')
    list.append('        \\draw[->] (-#2, \y*#2) -- (-\\loadlim,\y*#2);\n')
    list.append('\n')
    list.append('    \\draw[line width=0.05pt] (-\\loadlim,-#2) -- (-\\loadlim,#2);\n')
    list.append('    \n')
    list.append('    \\draw (-0.95*\\domlim,-\\loadlabel) node[black,left] {$u\\left(-l,z\\right)=-\\bar{\\varepsilon}_{x}\\cdot l$};\n')
    list.append('}\n')
    return list

def writeTikzModel2():
    list = []
    return list

def writeTikzModel3():
    list = []
    return list

def writeTikzModel4():
    list = []
    list.append('\\newcommand{\\RefSystem}[1]{\n')
    list.append('    \n')
    list.append('    \\def\\domlim{1.28*#1}\n')
    list.append('\n')
    list.append('    \\tikzstyle{axes}=[]\n')
    list.append('\n')
    list.append('    \\begin{scope}[style=axes]\n')
    list.append('        \\draw[->] (-\\domlim,0) -- (\\domlim,0) node[right] {$\\underline{i}, x$};\n')
    list.append('        \\draw[->] (0,-\\domlim) -- (0,\\domlim) node[above] {$\\underline{k}, z$};\n')
    list.append('    \\end{scope}\n')
    list.append('    \\draw (-0.05,0) node[black,left,below] {$O$};\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\drawFiber}[4]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> theta\n')
    list.append('    %#3 -> deltatheta\n')
    list.append('\n')
    list.append('    \\def\\R{#1}\n')
    list.append('    \\def\\thetavalue{#2}\n')
    list.append('    \\def\\dtheta{#3}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetaup{cos(\\thetavalue+\\dtheta)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetaup{sin(\\thetavalue+\\dtheta)}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetabot{cos(\\thetavalue-\\dtheta)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetabot{sin(\\thetavalue-\\dtheta)}\n')
    list.append('    \n')
    list.append('    \\def\\thetaround{360+\\thetavalue-\\dtheta}\n')
    list.append('    \n')
    list.append('    %draw fiber surface\n')
    list.append('    \\draw[draw=#4] (\\costhetaup,\\sinthetaup)arc (\\thetavalue+\\dtheta:\\thetaround:\\R);\n')
    list.append('    %draw radius\n')
    list.append('    \\draw[dashed](0,0)--(-\\costhetabot,\\sinthetabot);\n')
    list.append('    %draw labels\n')
    list.append('    \\draw (-0.5*\\R,-0.5*\\R) node[black,above] {$\\Omega_{f}$};\n')
    list.append('    \\draw (-0.5*\\R*\\costhetabot,0.5*\\R*\\sinthetabot) node[black,above] {$R_{f}$};\n')
    list.append('    \\draw (-\\costhetaup*0.9*\\R,-\\sinthetaup*0.9*\\R) node[black,below] {$\\Gamma_{1}$};\n')
    list.append('    \\draw (0,\\R) node[black,above] {$\\left(0,R_{f}\\right)$};\n')
    list.append('    \\draw (-\\R,0) node[black,above] {$\\left(-R_{f},0\\right)$};\n')
    list.append('    \\draw (0,-\\R) node[black,below] {$\\left(0,-R_{f}\\right)$};\n')
    list.append('    \\draw (\\R,0) node[black,right] {$\\left(R_{f},0\\right)$};\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\drawMatrix}[4]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> l\n')
    list.append('    %#3 -> theta\n')
    list.append('    %#4 -> deltatheta\n')
    list.append('    \n')
    list.append('    \\def\\R{#1}\n')
    list.append('    \\def\cornerlabel{1.077*#2}\n')
    list.append('    \n')
    list.append('    \\def\\thetavalue{#3}\n')
    list.append('    \\def\\dtheta{#4}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetaup{cos(\\thetavalue+\\dtheta)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetaup{sin(\\thetavalue+\\dtheta)}\n')
    list.append('\n')
    list.append('    %draw matrix boundaries\n')
    list.append('    \\draw (#2,#2) -- (-#2,#2) -- (-#2,-#2) -- (#2,-#2) -- (#2,#2);\n')
    list.append('\n')
    list.append('    %draw labels\n')
    list.append('    \\draw (\\R,-\\R) node[black,above] {$\\Omega_{m}$};\n')
    list.append('    \\draw (#2,\cornerlabel) node[black,right] {$C\equiv\\left(+l,+l\\right)$};\n')
    list.append('    \\draw (-#2,\cornerlabel) node[black,left] {$D\equiv\\left(-l,+l\\right)$};\n')
    list.append('    \\draw (#2,-\cornerlabel) node[black,right] {$B\equiv\\left(+l,-l\\right)$};\n')
    list.append('    \\draw (-#2,-\cornerlabel) node[black,left] {$A\equiv\\left(-l,-l\\right)$};\n')
    list.append('    \\draw (-#2,0.5*#2) node[black,right] {$l$};\n')
    list.append('    \\draw (-#2,-0.5*#2) node[black,right] {$l$};\n')
    list.append('    \\draw (0.5*#2,#2) node[black,below] {$l$};\n')
    list.append('    \\draw (-0.5*#2,#2) node[black,below] {$l$};\n')
    list.append('    \\draw (-\\costhetaup*1.01*\\R,-\\sinthetaup*1.01*\\R) node[black,below] {$\\Gamma_{3}$};\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\drawDebond}[3]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> theta\n')
    list.append('    %#3 -> deltatheta\n')
    list.append('\n')
    list.append('    \\def\\R{#1}\n')
    list.append('    \\def\\thetavalue{#2}\n')
    list.append('    \\def\\dtheta{#3}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costheta{cos(\\thetavalue)}\n')
    list.append('    \\pgfmathsetmacro\\sintheta{sin(\\thetavalue)}\n')
    list.append('    \n')
    list.append('    \\def\\thetahalfbot{\\thetavalue-0.5*\\dtheta}\n')
    list.append('    \\def\\thetahalfup{\\thetavalue+0.5*\\dtheta}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetaup{cos(\\thetavalue+\\dtheta)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetaup{sin(\\thetavalue+\\dtheta)}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetabot{cos(\\thetavalue-\\dtheta)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetabot{sin(\\thetavalue-\\dtheta)}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetahalfbot{cos(\\thetahalfbot)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetahalfbot{sin(\\thetahalfbot)}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\\costhetahalfup{cos(\\thetahalfup)}\n')
    list.append('    \\pgfmathsetmacro\\sinthetahalfup{sin(\\thetahalfup)}\n')
    list.append('\n')
    list.append('    \\filldraw[fill=green!20,draw=green!50!black] (0,0) -- (0.3*\\R,0) arc(0:\\thetavalue:0.3*\\R);\n')
    list.append('    \\draw (0.25*\\thetavalue:0.2*\\R) node[green!50!black] {$\\theta$};\n')
    list.append('\n')
    list.append('    \\filldraw[fill=blue!20,draw=blue!50!black](0.3*\\costhetabot*\\R,0.3*\\sinthetabot*\\R) -- (0.6*\\costhetabot*\\R,0.6*\\sinthetabot*\\R) arc(\\thetavalue-\\dtheta:\\thetavalue:0.6*\\R) --  (0.3*\\costheta*\\Rf,0.3*\\sintheta*\\R) arc(\\thetavalue:\\thetavalue-\\dtheta:0.3*\\R);\n')
    list.append('   \\draw (0.45*\\costhetahalfbot*\\R,0.45*\\sinthetahalfbot*\\R) node[blue!50!black] {$\\Delta\\theta$};\n')
    list.append('\n')
    list.append('   \\filldraw[fill=blue!20,draw=blue!50!black](0.3*\costheta*\\R,0.3*\sintheta*\\R) -- (0.6*\\costheta*\\R,0.6*\\sintheta*\\R) arc(\\thetavalue:\\thetavalue+\\dtheta:0.6*\\R) --  (0.3*\\costhetaup*\\R,0.3*\\sinthetaup*\\R) arc(\\thetavalue+\\dtheta:\\thetavalue:0.3*\\R);\n')
    list.append('   \\draw (0.45*\\costhetahalfup*\\Rf,0.45*\\sinthetahalfup*\\Rf) node[blue!50!black] {$\\Delta\\theta$};\n')
    list.append('\n')
    list.append('   \\draw[draw=red,line width=2pt](\\costhetaup,\\sinthetaup) arc(\\thetavalue+\\dtheta:\\thetavalue-\\dtheta:\\R);\n')
    list.append('\n')
    list.append('    \\draw(0,0)--(\costheta,\sintheta);\n')
    list.append('    \\draw(0,0)--(\\costhetabot,\\sinthetabot);\n')
    list.append('    \\draw(0,0)--(\\costhetaup,\\sinthetaup);\n')
    list.append('    \n')
    list.append('    %draw labels\n')
    list.append('    \\draw (\\costhetabot*\\R,\\sinthetabot*\\R) node[black,below] {$I$};\n')
    list.append('    \\draw (\\costhetaup*\\R,\\sinthetaup*\\R) node[black,above] {$L$};\n')
    list.append('    \\draw (\\costheta*\\R,\\sintheta*\\R) node[black,below] {$H$};\n')
    list.append('    \\draw (\\costheta*\\R,\\sintheta*\\R) node[red!50!black,above] {$a$};\n')
    list.append('    \\draw (\\costhetahalfup*\\R,\\sinthetahalfup*\\R) node[black,above] {$\\Gamma_{4}$};\n')
    list.append('    \\draw (0.95*\\costhetabot*\\R,1.1*\\sinthetabot*\\R) node[black,left] {$\\Gamma_{2}$};\n')
    list.append('\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\NB}[2]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> l\n')
    list.append('\n')
    list.append('    \\def\\loadlim{1.197*#2}\n')
    list.append('    \\def\\domlim{1.28*#2}\n')
    list.append('    \\def\\loadlabel{0.2*#1}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\yloadarrowone{#2+(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\yloadarrowtwo{#2+2*(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\yloadarrowthree{#2+3*(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\yloadarrowfour{#2+4*(\\loadlim-#2)*0.2}\n')
    list.append('    \n')
    list.append('    \\draw[line width=3pt] (-#2,#2) -- (#2,#2) ;\n')
    list.append('    \n')
    list.append('    \\draw (0.95*\\loadlabel,1.1*#2) node[black,right] {$w\\left(x,l\\right)=w\\left(l,l\\right)$};\n')
    list.append('\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\SB}[2]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> l\n')
    list.append('\n')
    list.append('    \\def\\loadlim{1.197*#2}\n')
    list.append('    \\def\\domlim{1.28*#2}\n')
    list.append('    \\def\\loadlabel{0.2*#1}\n')
    list.append('    \n')
    list.append('    \\pgfmathsetmacro\yloadarrowone{#2+(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\yloadarrowtwo{#2+2*(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\yloadarrowthree{#2+3*(\\loadlim-#2)*0.2}\n')
    list.append('    \\pgfmathsetmacro\yloadarrowfour{#2+4*(\\loadlim-#2)*0.2}\n')
    list.append('    \n')
    list.append('    \\draw[line width=3pt] (-#2,-#2) -- (#2,-#2) ;\n')
    list.append('    \n')
    list.append('    \\draw (-\\loadlabel,-1.1*#2) node[black,left] {$w\\left(x,-l\\right)=w\\left(l,-l\\right)$};\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\EB}[2]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> l\n')
    list.append('\n')
    list.append('    \\def\\loadlim{1.197*#2}\n')
    list.append('    \\def\\loadlabel{0.2*#1}\n')
    list.append('    \n')
    list.append('    \\foreach \\y in {-1,-0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1,0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1}\n')
    list.append('        \\draw[->] (#2, \y*#2) -- (\\loadlim,\y*#2);\n')
    list.append('    \n')
    list.append('    \\draw[line width=0.05pt] (\\loadlim,-#2) -- (\\loadlim,#2);\n')
    list.append('\n')
    list.append('    \\draw (0.95*\\domlim,\\loadlabel) node[black,right] {$u\\left(l,z\\right)_{x}=\\bar{\\varepsilon}\\cdot l$};\n')
    list.append('\n')
    list.append('\n')
    list.append('}\n')
    list.append('\n')
    list.append('\\newcommand{\\WB}[2]{\n')
    list.append('    %#1 -> Rf\n')
    list.append('    %#2 -> l\n')
    list.append('\n')
    list.append('    \\def\\loadlim{1.197*#2}\n')
    list.append('    \\def\\loadlabel{0.2*#1}\n')
    list.append('    \n')
    list.append('    \\foreach \\y in {-1,-0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1,0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1}\n')
    list.append('        \\draw[->] (-#2, \y*#2) -- (-\\loadlim,\y*#2);\n')
    list.append('\n')
    list.append('    \\draw[line width=0.05pt] (-\\loadlim,-#2) -- (-\\loadlim,#2);\n')
    list.append('    \n')
    list.append('    \\draw (-0.95*\\domlim,-\\loadlabel) node[black,left] {$u\\left(-l,z\\right)=-\\bar{\\varepsilon}_{x}\\cdot l$};\n')
    list.append('}\n')
    return list

statusfile = '2017-02-02_AbaqusParametricRun_2017-02-02_18-05-02'

wd = 'D:\\01_Luca\\07_Data\\03_FEM'

statusfile += '.sta'

lasttitle = '2D PLANE STRAIN MICROMECHANICAL PARAMETRIC SIMULATION OF REFERENCE VOLUME ELEMENTS'

scale = {'0.001':0.1}

print('===============================================================================================\n')
print('===============================================================================================\n')
print('\n')
print('                                           CREATING INPUT DATA SUMMARIES\n')
print('\n')
print('                                 Starting on ' + datetime.now().strftime('%Y-%m-%d') + ' at ' + datetime.now().strftime('%H:%M:%S') + '\n')
print('\n')
print('                                      Platform: ' + platform() + '\n')
print('\n')
print('===============================================================================================\n')
print('===============================================================================================\n')
print('\n')

print('\n')
print('Reading from status file: ' + statusfile + ' in folder ' + wd + '\n')
print('\n')
with open(join(wd,statusfile),'r') as sta:
    lines = sta.readlines()
print('\n')
print('Done.\n')
print('\n')
for i,line in enumerate(lines[1:]):
    words = line.split(',')
    project = words[0]
    if not len(project.replace(' ','').replace('\n',''))>0:
        break
    print('\n')
    print('===============================================================================================\n')
    print('\n')
    print('From status file:\n')
    print('                 ' + line + '\n')
    print('\n')
    inpfilefolder = join(wd,project.replace(' ',''),'abqinp')
    csvfolder = join(wd,project.replace(' ',''),'csv')
    latexfolder = join(wd,project.replace(' ',''),'latex')
    jsonfolder = join(wd,project.replace(' ',''),'json')
    with open(join(inpfilefolder,project+'.inp'),'r') as inp:
        lines = inp.readlines()
    for i,line in enumerate(lines):
        if lasttitle in line:
            start = i+1
        elif 'LICENSE' in line:
            stop = i
    summary = []
    for line in lines[start:stop]:
        newline = line.replace('**','').replace('--','').replace(':',',')
        if len(newline.replace(' ','').replace('\n',''))>0:
            summary.append(newline)
    if not project + '.csv' in listdir(csvfolder):
        with open(join(csvfolder,project+'.csv'),'w') as csv:
            for line in summary:
                csv.write(line)
    elif not int(stat(join(csvfolder,project+'.csv')).st_size)>0:
        with open(join(csvfolder,project+'.csv'),'a') as csv:
            for line in summary:
                csv.write(line)
    jsonSummary = {}
    for line in summary:
        words = line.strip().split(',')
        if len(words)>1:
            jsonSummary[words[0]] = words[1]
    with open(join(jsonfolder,project+'.json'),'w') as jsonfile:
        json.dump(jsonSummary,jsonfile)
    for line in summary:
        if 'RVE Type' in line:
            if 'Isolated RVE with homogeneous boundary conditions' in line:
                model = 1
            elif 'Bounded RVE' in line:
                model = 2
            elif 'Periodic RVE' in line:
                model = 3
            elif 'Isolated RVE with rigidity constraints' in line:
                model = 4
        elif 'Fiber radius' in line:
            Rf = float(line.split(',')[1])
        elif 'Fiber Volume Fraction' in line:
            Vff = float(line.split(',')[1])
        elif 'Plies Thickness Ratio' in line:
            if not 'Not Applicable' in line:
                tratio = float(line.split(',')[1])
            else:
                tratio = 0.
        elif 'Crack Angular Position' in line:
            theta =float(line.split(',')[1].replace('deg',''))
        elif 'Crack Angular Aperture' in line:
            deltatheta =float(line.split(',')[1].replace('deg',''))
        elif 'f1' in line:
            f1 =float(line.split(',')[1])
        elif 'f2' in line:
            f2 =float(line.split(',')[1])
        elif 'f3' in line:
            f3 =float(line.split(',')[1])
    latexsummary = []
    latexsummary.append('\\documentclass{article}\n')
    latexsummary.append('\n')
    latexsummary.append('%----------------------------------------------------------------------------------------------%\n')
    latexsummary.append('%                                 Packages and basic declarations\n')
    latexsummary.append('%----------------------------------------------------------------------------------------------%\n')
    latexsummary.append('\\usepackage{amsmath}\n')
    latexsummary.append('\\usepackage[english]{babel} \n')
    latexsummary.append('\\usepackage{booktabs}\n')
    latexsummary.append('\\usepackage{caption}\n')
    latexsummary.append('\\usepackage{colortbl}\n')
    latexsummary.append('\\usepackage{csquotes}\n')
    latexsummary.append('\\usepackage{enumerate}\n')
    latexsummary.append('\\usepackage{graphicx}\n')
    latexsummary.append('\\usepackage{float}\n')
    latexsummary.append('\\usepackage[scaled=.90]{helvet}\n')
    latexsummary.append('\\usepackage{longtable}\n')
    latexsummary.append('\\usepackage{mathrsfs}\n')
    latexsummary.append('\\usepackage{multirow}\n')
    latexsummary.append('\\usepackage{nameref}\n')
    latexsummary.append('\\usepackage{parskip}\n')
    latexsummary.append('\\usepackage{pgf}\n')
    latexsummary.append('\\usepackage{rotating}\n')
    latexsummary.append('\\usepackage{subcaption}\n')
    latexsummary.append('\\usepackage{tabularx}\n')
    latexsummary.append('\\usepackage{tikz}\n')
    latexsummary.append('\\usepackage{xcolor}\n')
    latexsummary.append('\\usepackage{verbatim}\n')
    latexsummary.append('\\usepackage{hyperref}\n')
    latexsummary.append('\n')
    latexsummary.append('\\usetikzlibrary{arrows}\n')
    latexsummary.append('\n')
    latexsummary.append('\n')
    latexsummary.append('%----------------------------------------------------------------------------------------------%\n')
    latexsummary.append('%                                                   CONSTANTS\n')
    latexsummary.append('%----------------------------------------------------------------------------------------------%\n')
    latexsummary.append('\n')
    latexsummary.append('\\def\\pivalue{3.141592653589793238462643383279502884197169399375105820974944592307816406286}\n')
    latexsummary.append('\n')
    latexsummary.append('%----------------------------------------------------------------------------------------------%\n')
    latexsummary.append('%                                          INPUT PARAMETERS\n')
    latexsummary.append('%----------------------------------------------------------------------------------------------%\n')
    latexsummary.append('\n')
    latexsummary.append('\\def\\Rf{' + str(Rf) + '}\n')
    latexsummary.append('\\def\\Vff{' + str(Vff) + '}\n')
    latexsummary.append('\\def\\tratio{' + str(tratio) + '}\n')
    latexsummary.append('\\def\\meshfacone{' + str(f1) + '}\n')
    latexsummary.append('\\def\\meshfactwo{' + str(f2) + '}\n')
    latexsummary.append('\\def\\meshfacthree{' + str(f3) + '}\n')
    latexsummary.append('\\def\\thetaval{' + str(theta) + '}\n')
    latexsummary.append('\\def\\deltatheta{' + str(deltatheta) + '}\n')
    latexsummary.append('\n')
    latexsummary.append('%----------------------------------------------------------------------------------------------%\n')
    latexsummary.append('%                               Definition of dependent parameters\n')
    latexsummary.append('%----------------------------------------------------------------------------------------------%\n')
    latexsummary.append('\n')
    latexsummary.append('\\pgfmathsetmacro\\l{0.5*\\Rf*sqrt(\\pivalue/\\Vff)}\n')
    latexsummary.append('\n')
    latexsummary.append('%----------------------------------------------------------------------------------------------%\n')
    latexsummary.append('%                                        COMMAND DEFINITION\n')
    latexsummary.append('%----------------------------------------------------------------------------------------------%\n')
    if model == 1:
        latexsummary += writeTikzModel1()
    elif  model == 2:
        latexsummary += writeTikzModel2()
    elif model == 3:
        latexsummary += writeTikzModel3()
    elif model == 4:
        latexsummary += writeTikzModel4()
    latexsummary.append('\n')
    latexsummary.append('\n')
    latexsummary.append('\n')
    latexsummary.append('\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('%                                    START OF THE DOCUMENT                          %\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('\n')
    latexsummary.append('\\begin{document}\n')
    latexsummary.append('\n')
    latexsummary.append('\\begin{table}[!ht]\n')
    latexsummary.append('    \\centering\n')
    latexsummary.append('    \\caption{Model summary.}\n')
    latexsummary.append('       \\label{tab:modelsummary}\n')
    #latexsummary.append('    \\footnotesize\n')
    latexsummary.append('    \\begin{tabularx}{\\textwidth}{XX}\n')
    latexsummary.append('    \\toprule\n')
    latexsummary.append('    \\midrule\n')
    for line in summary:
        if 'Model Code' in line:
            latexsummary.append('    ' + line.split(',')[0].strip() + '&{\\footnotesize ' + line.split(',')[1].strip() + '}\\\\\n')
        elif 'RVE Type' in line:
            latexsummary.append('    &\\\\\n')
            latexsummary.append('    ' + line.split(',')[0].strip() + '&' + line.split(',')[1].strip() + '\\\\\n')
        elif 'Space Dimension' in line:
            latexsummary.append('    &\\\\\n')
            latexsummary.append('    ' + line.split(',')[0].strip() + '&' + line.split(',')[1].strip() + '\\\\\n')
        elif 'Stacking Sequence' in line:
            latexsummary.append('    \\midrule\n')
            parts = line.split(',')
            seq = '$'
            for k,part in enumerate(parts[1:]):
                if k>0:
                    seq += ','
                seq += part.replace('\n','').strip().replace('phi','\\varphi')
            seq += '$'
            latexsummary.append('    ' + parts[0].strip() + '&' + seq + '\\\\\n')
        elif 'Fiber radius' in line:
            latexsummary.append('    \\midrule\n')
            latexsummary.append('    ' + line.split(',')[0].strip().replace('[10e-6 m]','$[\mu m]$') + '&' + line.split(',')[1].strip() + '\\\\\n')
        elif 'Applied Axial Strain' in line:
            latexsummary.append('    \\midrule\n')
            latexsummary.append('    ' + line.split(',')[0].strip() + '&' + line.split(',')[1].strip() + '\\\\\n')
        elif 'Applied Temperature Jump' in line:
            latexsummary.append('    \\midrule\n')
            latexsummary.append('    ' + line.split(',')[0].strip() + '&' + line.split(',')[1].strip() + '\\\\\n')
        elif 'Fiber' in line:
            latexsummary.append('    \\midrule\n')
            latexsummary.append('    ' + line.split(',')[0].strip() + '&' + line.split(',')[1].strip() + '\\\\\n')
        elif 'Solver' in line:
            latexsummary.append('   \\midrule\n')
            latexsummary.append('   \\bottomrule\n')
            latexsummary.append('    \\end{tabularx}\n')
            latexsummary.append('\n')
            latexsummary.append('\\end{table}\n')
            latexsummary.append('\n')
            latexsummary.append('\n')
            latexsummary.append('\\begin{table}[!ht]\n')
            latexsummary.append('    \\centering\n')
            latexsummary.append('    \\caption{Mesh summary.}\n')
            latexsummary.append('       \\label{tab:meshsummary}\n')
            #latexsummary.append('    \\footnotesize\n')
            latexsummary.append('    \\begin{tabularx}{\\textwidth}{XX}\n')
            latexsummary.append('    \\toprule\n')
            latexsummary.append('    \\midrule\n')
            latexsummary.append('    ' + line.split(',')[0].strip() + '&' + line.split(',')[1].strip() + '\\\\\n')
        elif 'Elements\' Type' in line:
            latexsummary.append('    \\midrule\n')
            latexsummary.append('    ' + line.split(',')[0].strip() + '&' + line.split(',')[1].strip() + '\\\\\n')
        elif 'Mesh optimization' in line:
            latexsummary.append('    \\midrule\n')
            latexsummary.append('    ' + line.split(',')[0].strip() + '&' + line.split(',')[1].strip() + '\\\\\n')
        elif 'Conversion factor of units of measurement with respect to SI' in line:
            latexsummary.append('   \\midrule\n')
            latexsummary.append('   \\bottomrule\n')
            latexsummary.append('    \\end{tabularx}\n')
            latexsummary.append('\n')
            latexsummary.append('\\end{table}\n')
            latexsummary.append('\n')
            latexsummary.append('\n')
            latexsummary.append('\\begin{table}[!ht]\n')
            latexsummary.append('    \\centering\n')
            latexsummary.append('    \\caption{Units of measurement summary.}\n')
            latexsummary.append('       \\label{tab:unitsummary}\n')
            #latexsummary.append('    \\footnotesize\n')
            latexsummary.append('    \\begin{tabularx}{\\textwidth}{XX}\n')
            latexsummary.append('    \\toprule\n')
            latexsummary.append('    \\midrule\n')
            latexsummary.append('    \multicolumn{2}{c}{' + line.strip() + '}\\\\\n')
        else:
            if len(line.replace('-','').replace('\n','').replace(' ',''))>0:
                if 'SI' in line.split(',')[1].strip():
                    second = line.split(',')[1].strip()
                    unit = second.split(' ')[1]
                    latexsummary.append('    ' + line.split(',')[0].strip() + '&SI $' + unit + '$\\\\\n')
                elif '[10e-6 m]' in line:
                    latexsummary.append('    ' + line.split(',')[0].strip().replace('[10e-6 m]','$[\mu m]$') + '&' + line.split(',')[1].strip() + '\\\\\n')
                elif '[deg]' in line or 'deg' in line:
                    latexsummary.append('    ' + line.split(',')[0].strip().replace('[deg]','') + '&$' + line.split(',')[1].strip().replace(' deg','^{\\circ}$') + '\\\\\n')
                else:
                    latexsummary.append('    ' + line.split(',')[0].strip() + '&' + line.split(',')[1].strip() + '\\\\\n')
    latexsummary.append('   \\midrule\n')
    latexsummary.append('   \\bottomrule\n')
    latexsummary.append('    \\end{tabularx}\n')
    latexsummary.append('\n')
    latexsummary.append('\\end{table}\n')
    latexsummary.append('\n')
    latexsummary.append('\n')
    latexsummary.append('\\begin{figure}[!h]\n')
    latexsummary.append('\\centering\n')
    latexsummary.append('\\begin{tikzpicture}[scale=' + str(scale[str(Vff)]) + ',cap=round,x=1.5cm,y=1.5cm]\n')
    if model==1 or model==4:
        latexsummary.append('\\RefSystem{\\l}\n')
        latexsummary.append('\n')
        latexsummary.append('\\drawFiber{\\Rf}{\\thetaval}{\\deltatheta}{black}\n')
        latexsummary.append('\n')
        latexsummary.append('\\drawMatrix{\\Rf}{\\l}{\\thetaval}{\\deltatheta}\n')
        latexsummary.append('\n')
        latexsummary.append('\\drawDebond{\\Rf}{\\thetaval}{\\deltatheta}\n')
        latexsummary.append('\n')
        latexsummary.append('\\NB{\\Rf}{\\l}\n')
        latexsummary.append('\n')
        latexsummary.append('\\SB{\\Rf}{\\l}\n')
        latexsummary.append('\n')
        latexsummary.append('\\EB{\\Rf}{\\l}\n')
        latexsummary.append('\n')
        latexsummary.append('\\WB{\\Rf}{\\l}\n')
    latexsummary.append('\\end{tikzpicture}\n')
    latexsummary.append('\\caption{Graphical representation of the model.}\n')
    latexsummary.append('  \\label{fig:modelgraph}\n')
    latexsummary.append('\\end{figure}\n')
    latexsummary.append('\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('%                                     END OF THE DOCUMENT                           %\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('%-----------------------------------------------------------------------------------%\n')
    latexsummary.append('\n')
    latexsummary.append('\\end{document}\n')
    latexsummary.append('\n')
    with open(join(latexfolder,project+'.tex'),'w') as tex:
        for line in latexsummary:
            tex.write(line)
    if not exists(join(wd,project,'pdf')):
        makedirs(join(wd,project,'pdf'))
    cmdfile = join(wd,project,'pdf','runlatex.cmd')
    with open(cmdfile,'w') as cmd:
        cmd.write('\n')
        cmd.write('CD ' + wd + '\\' + project + '\\pdf\n')
        cmd.write('\n')
        cmd.write('pdflatex ' + join(latexfolder,project+'.tex') + ' -job-name=' + project + '\n')
    try:
        subprocess.call('cmd.exe /C ' + cmdfile)
    except Exception:
        sys.exc_clear()
        
        
# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def rve_mesh_create_project(folder=None,matDBfolder=None,index=None,modType=None,fiberArrangement=None,isInner=None,isUpperBounded=None,isLowerBounded=None,isCohesive=None,crackType=None,element=None,order=None,optimize=None,layup=None,generalized=None,interfaceDef=None,strainType=None,phi=None,Rf=None,Vff=None,tratio=None,theta=None,deltatheta=None,dT=None,interfaceFriction=None,epsxx=None,fiberType=None,matrixType=None,matPropAlg=None,solverChoice=None,unitConvFactor=None,f1=None,f2=None,f3=None,deltaInp=None,AR2=None,AR3=None,AR4=None,AR5=None,N6=None,requestDAT=None,requestFIL=None,requestODB=None,nContInt=None,*args,**kwargs):
    varargin = rve_mesh_create_project.varargin
    nargin = rve_mesh_create_project.nargin

    ##
#==============================================================================
# Copyright (c) 2016-2017 Universit de Lorraine & Lule tekniska universitet
# Author: Luca Di Stasio <luca.distasio@gmail.com>
#                        <luca.distasio@ingpec.eu>
    
    # Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
    
    
    # Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in
# the documentation and/or other materials provided with the distribution
# Neither the name of the Universit de Lorraine or Lule tekniska universitet
# nor the names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
    
    # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#==============================================================================
    
    #  DESCRIPTION
    
    #  A script to generate the project files for RVE Finite Elements
#  Simulations:
    
    #   .json
#   .csv
#   .tex
#   .inp
    
    #  unitConvFactor(1)  => length
#  unitConvFactor(2)  => mass
#  unitConvFactor(3)  => time
#  unitConvFactor(4)  => electric current
#  unitConvFactor(5)  => thermodynamic temperature
#  unitConvFactor(6)  => amount of substance
#  unitConvFactor(7)  => luminous intensity
#  unitConvFactor(8)  => density
#  unitConvFactor(9)  => pressure/stress
#  unitConvFactor(10) => thermal expansion
#  unitConvFactor(11) => thermal conductivity
#  unitConvFactor(12) => specific heat capacity
#  unitConvFactor(13) => fracture toughness
#  unitConvFactor(14) => interface stiffness
#  unitConvFactor(15) => force
    
    ##
    
    #-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                     Preliminary Calculations                          -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
##
    N1=round(dot(0.25,360) / deltaInp)
    N2=ceil(dot(N1,(f2 / f1 - sqrt(2))) / AR2)
    N3=ceil((1 - f2) / (dot(dot(AR3,deltaInp),pi) / 180))
    N4=ceil((f3 - 1) / (dot(dot(AR4,deltaInp),pi) / 180))
    N5=ceil((dot(dot(0.5,sqrt(2)),sqrt(pi / Vff)) - f3) / (dot(AR5,deltaInp)))
    nodesTOT=0
    if modType == 2:
        nodesTOT=dot((N1 + 1),(N1 + 1)) + dot(dot(4,N1),(N2 + N3 + 1)) + dot(dot(4,N1),(N4 + N5)) + dot(dot(2,(N1 + 1)),(N6 + 1))
    else:
        nodesTOT=dot((N1 + 1),(N1 + 1)) + dot(dot(4,N1),(N2 + N3 + 1)) + dot(dot(4,N1),(N4 + N5))
    
    elTOT=0
    if modType == 2:
        elTOT=dot(N1,N1) + dot(dot(4,N1),(N2 + N3 + N4 + N5)) + dot(dot(2,N1),N6)
    else:
        elTOT=dot(N1,N1) + dot(dot(4,N1),(N2 + N3 + N4 + N5))
    
    model=strcat('VL4FC-2DmmTPL-IC-',num2str(modType),'-',num2str(fiberArrangement),'-',num2str(isInner),'-',num2str(isUpperBounded),'-',num2str(isLowerBounded),'-',num2str(isCohesive),'-',num2str(crackType),'-',num2str(element),'-',num2str(order),'-',num2str(optimize),'-',num2str(layup),'-',num2str(generalized),'-',num2str(interfaceDef),'-',num2str(strainType),'-',num2str(phi),'-',num2str(Rf),'-',num2str(Vff),'-',num2str(tratio),'-',num2str(theta),'-',num2str(deltatheta),'-',num2str(dT),'-',num2str(interfaceFriction),'-',num2str(epsxx),'-',num2str(fiberType),'-',num2str(matrixType),'-',num2str(matPropAlg),'-',num2str(solverChoice),'-',num2str(f1),'-',num2str(f2),'-',num2str(f3),'-',num2str(deltaInp),'-',num2str(AR2),'-',num2str(AR3),'-',num2str(AR4),'-',num2str(AR5),'-',num2str(N1),'-',num2str(N2),'-',num2str(N3),'-',num2str(N4),'-',num2str(N5),'-',num2str(N6),'-',num2str(nodesTOT),'-',num2str(elTOT))
    #-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                        Mesh Generation                                -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
##
    nodes,edges,elements,fiberN,matrixN,part6bot,part6up,fiberEl,matrixEl,cohesiveEl,boundedBot,boundedUp,gammaNo1,gammaNo2,gammaNo3,gammaNo4,gammaEl1,gammaEl2,gammaEl3,gammaEl4,NintUpNine,NintUpZero,NintBotNine,NintBotZero,NintUpNineCorners,NintUpZeroCorners,NintBotNineCorners,NintBotZeroCorners,NbotRight,NbotLeft,NupRight,NupLeft,EintUpNine,EintUpZero,EintBotNine,EintBotZero,EbotRight,EbotLeft,EupRight,EupLeft,Ncorners,Ndown,Nright,Nup,Nleft,Edown,Eright,Eup,Eleft=rve_mesh(fiberArrangement,isUpperBounded,isLowerBounded,isCohesive,crackType,element,order,optimize,Rf,Vff,tratio,theta,deltatheta,f1,f2,f3,N1,N2,N3,N4,N5,N6,nargout=49)
    #-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                      Mesh Quality Analysis                            -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
    
    #-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                          I/O settings                                 -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
##
    
    projectName=''
    if logical_not(checkIndex(folder,strcat(index,'.csv'),model)):
        projectName=incrementName(folder,strcat(index,'.csv'))
        createWD(folder,projectName,true,false,false,false)
        fileId=fopen(fullfile(folder,strcat(index,'.csv')),'a')
        fprintf(fileId,'%s',strcat(projectName,',',model))
        fprintf(fileId,'\\n')
        fclose(fileId)
    else:
        projectName=strcat('A model with this set of parameters already exists. See: ',getModelFolder(folder,strcat(index,'.csv'),model))
        return projectName
    
    ##
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                        Write .inp file                                -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
##
# create the filepath
    abqpath=fullfile(folder,projectName,'input',strcat(projectName,'.inp'))
    # create the file
    abqinpID=fopen(abqpath,'w')
    fclose(abqinpID)
    ## HEADER SECTION
    
    # write header
    isPeriodic=0
    isHomogeneousOnLower=0
    isHomogeneousOnUpper=0
    isSymmOnLower=0
    isSymmOnUpper=0
    isFreeOnLower=0
    isFreeOnUpper=0
    if strainType == 0:
        nlgeom=0
        if nContInt != - 1:
            analysisType='Small strain with contour integral evaluation'
        else:
            analysisType='Small strain'
    else:
        nlgeom=1
        if nContInt != - 1:
            analysisType='Finite strain with contour integral evaluation'
        else:
            analysisType='Finite strain'
    
    if 1 == modType:
        modeltype='Isolated RVE with homogeneous boundary conditions'
        plyThickness='Not Applicable'
    else:
        if 2 == modType:
            modeltype='Bounded RVE'
            plyThickness=num2str(tratio)
        else:
            if 3 == modType:
                modeltype='Periodic RVE'
                plyThickness='Not Applicable'
                isPeriodic=1
            else:
                if 4 == modType:
                    modeltype='Isolated RVE with rigid vertical displacement of upper and lower sides'
                    plyThickness='Not Applicable'
                else:
                    if 5 == modType:
                        modeltype='Free isolated RVE'
                        plyThickness='Not Applicable'
                    else:
                        if 6 == modType:
                            modeltype='Isolated RVE with zero vertical displacement of upper and lower sides'
                            plyThickness='Not Applicable'
                        else:
                            modeltype='Isolated RVE'
                            plyThickness='Not Applicable'
    
    if isInner:
        if 1 == layup:
            stackingSequence='[[phi]_n,90,[phi]_n]'
            if logical_not(isPeriodic):
                if logical_not(isUpperBounded):
                    isHomogeneousOnUpper=1
                if logical_not(isLowerBounded):
                    isHomogeneousOnLower=1
        else:
            if 2 == layup:
                stackingSequence='[[phi]_n,90]_S'
                if logical_not(isPeriodic):
                    if isUpperBounded:
                        isSymmOnLower=1
                    if isLowerBounded:
                        isSymmOnUpper=1
            else:
                stackingSequence='[[phi]_n,90,[phi]_n]'
                if logical_not(isPeriodic):
                    if logical_not(isUpperBounded):
                        isHomogeneousOnUpper=1
                    if logical_not(isLowerBounded):
                        isHomogeneousOnLower=1
    else:
        if 1 == layup:
            stackingSequence='[90,[phi]_n]'
            if logical_not(isPeriodic):
                if isUpperBounded:
                    isFreeOnLower=1
                if isLowerBounded:
                    isFreeOnUpper=1
        else:
            if 2 == layup:
                stackingSequence='[90,[phi]_n]_S'
                if logical_not(isPeriodic):
                    if isUpperBounded:
                        isFreeOnLower=1
                        isSymmOnUpper=1
                    if isLowerBounded:
                        isFreeOnUpper=1
                        isSymmOnLower=1
            else:
                stackingSequence='[90,[phi]_n]'
                if logical_not(isPeriodic):
                    if isUpperBounded:
                        isFreeOnLower=1
                    if isLowerBounded:
                        isFreeOnUpper=1
    
    if 1 == fiberType:
        fiber='Carbon Fiber'
    else:
        if 2 == fiberType:
            fiber='Glass Fiber'
        else:
            fiber='Carbon Fiber'
    
    if 1 == matrixType:
        matrix='Epoxy'
    else:
        if 2 == matrixType:
            matrix='HDPE'
        else:
            matrix='Epoxy'
    
    if 1 == matPropAlg:
        lamPropAlg='Rule of Mixtures'
    else:
        if 2 == matPropAlg:
            lamPropAlg='Halpsin-Tsai Method'
        else:
            if 3 == matPropAlg:
                lamPropAlg='Hashin Method'
            else:
                lamPropAlg='Rule of Mixtures'
    
    if 1 == interfaceDef:
        interfaceFormulation='Contact with fracture interaction and debond growth'
    else:
        if 2 == interfaceDef:
            interfaceFormulation='Tied surfaces and Contact with debond fracture interaction at crack tips'
        else:
            if 3 == interfaceDef:
                interfaceFormulation='Equation-based continuity at surfaces and Contact with debond fracture interaction at crack tips'
            else:
                if 4 == interfaceDef:
                    interfaceFormulation='Tied surfaces'
                else:
                    if 5 == interfaceDef:
                        interfaceFormulation='Equation-based continuity at surfaces'
                    else:
                        if 6 == interfaceDef:
                            interfaceFormulation='Connector elements'
    
    if 1 == solverChoice:
        solvers='Virtual Crack Closure Method'
    else:
        if 2 == solverChoice:
            solvers='Cohesive Elements Method'
        else:
            if 3 == solverChoice:
                solvers='CZM & XFEM'
            else:
                if isCohesive:
                    solvers='Cohesive Elements Method'
                else:
                    solvers='Virtual Crack Closure Method'
    
    if element == 1:
        eltype='Quadrilateral'
    else:
        if element == 2:
            eltype='Triangular'
        else:
            eltype='NA'
    
    if order == 1:
        elorder='1st'
    else:
        if order == 2:
            elorder='2nd'
        else:
            elorder='NA'
    
    if dT != 0:
        if generalized:
            if isCohesive:
                if element == 1 and order == 1:
                    elId='CPEG4T & COH2D4'
                else:
                    if element == 1 and order == 2:
                        elId='CPEG8T & COH2D4'
                    else:
                        if element == 2 and order == 1:
                            elId='CPEG3T & COH2D4'
                        else:
                            if element == 1 and order == 1:
                                elId='CPEG6MT & COH2D4'
                            else:
                                elId='NA'
            else:
                if element == 1 and order == 1:
                    elId='CPEG4T'
                else:
                    if element == 1 and order == 2:
                        elId='CPEG8T'
                    else:
                        if element == 2 and order == 1:
                            elId='CPEG3T'
                        else:
                            if element == 1 and order == 1:
                                elId='CPEG6MT'
                            else:
                                elId='NA'
        else:
            if isCohesive:
                if element == 1 and order == 1:
                    elId='CPE4T & COH2D4'
                else:
                    if element == 1 and order == 2:
                        elId='CPE8T & COH2D4'
                    else:
                        if element == 2 and order == 1:
                            elId='CPE3T & COH2D4'
                        else:
                            if element == 1 and order == 1:
                                elId='CPE6MT & COH2D4'
                            else:
                                elId='NA'
            else:
                if element == 1 and order == 1:
                    elId='CPE4T'
                else:
                    if element == 1 and order == 2:
                        elId='CPE8T'
                    else:
                        if element == 2 and order == 1:
                            elId='CPE3T'
                        else:
                            if element == 1 and order == 1:
                                elId='CPE6MT'
                            else:
                                elId='NA'
    else:
        if generalized:
            if isCohesive:
                if element == 1 and order == 1:
                    elId='CPEG4 & COH2D4'
                else:
                    if element == 1 and order == 2:
                        elId='CPEG8 & COH2D4'
                    else:
                        if element == 2 and order == 1:
                            elId='CPEG3 & COH2D4'
                        else:
                            if element == 2 and order == 2:
                                elId='CPEG6 & COH2D4'
                            else:
                                elId='NA'
            else:
                if element == 1 and order == 1:
                    elId='CPEG4'
                else:
                    if element == 1 and order == 2:
                        elId='CPEG8'
                    else:
                        if element == 2 and order == 1:
                            elId='CPEG3'
                        else:
                            if element == 2 and order == 2:
                                elId='CPEG6'
                            else:
                                elId='NA'
        else:
            if isCohesive:
                if element == 1 and order == 1:
                    elId='CPE4 & COH2D4'
                else:
                    if element == 1 and order == 2:
                        elId='CPE8 & COH2D4'
                    else:
                        if element == 2 and order == 1:
                            elId='CPE3 & COH2D4'
                        else:
                            if element == 2 and order == 2:
                                elId='CPE6 & COH2D4'
                            else:
                                elId='NA'
            else:
                if element == 1 and order == 1:
                    elId='CPE4I'
                else:
                    if element == 1 and order == 2:
                        elId='CPE8'
                    else:
                        if element == 2 and order == 1:
                            elId='CPE3'
                        else:
                            if element == 2 and order == 2:
                                elId='CPE6'
                            else:
                                elId='NA'
    
    if optimize:
        meshOptimization='Optimized'
    else:
        meshOptimization='Basic'
    
    title='MECHANICS OF EXTREME THIN PLIES IN FIBER REINFORCED COMPOSITE LAMINATES'
    subtitle='2D PLANE STRAIN MICROMECHANICAL PARAMETRIC SIMULATION OF REFERENCE VOLUME ELEMENTS'
    headerDict=cellarray([[cellarray(['Model Code',model])],[cellarray(['RVE Type',modeltype])],[cellarray([' ',' '])],[cellarray(['Space Dimension','2D'])],[cellarray(['Stacking Sequence',stackingSequence])],[cellarray(['Modeled Ply Angle [deg]','90 deg'])],[cellarray(['Bounding Ply Angle [deg]',num2str(dot(phi,180) / pi)])],[cellarray([' ',' '])],[cellarray(['Fiber radius Rf[10e-6 m]',num2str(Rf)])],[cellarray(['Side helf length L [10e-6 m]',num2str(dot(dot(0.5,Rf),sqrt(pi / Vff)))])],[cellarray(['L/Rf [10e-6 m]',num2str(dot(0.5,sqrt(pi / Vff)))])],[cellarray(['Fiber radius [10e-6 m]',num2str(Rf)])],[cellarray(['Fiber Volume Fraction [-]',num2str(Vff)])],[cellarray(['Plies Thickness Ratio [-]',plyThickness])],[cellarray([' ',' '])],[cellarray(['Crack Angular Position [deg]',num2str(dot(theta,180) / pi)])],[cellarray(['Crack Angular Aperture [deg]',num2str(dot(deltatheta,180) / pi)])],[cellarray([' ',' '])],[cellarray(['Applied Axial Strain',num2str(epsxx)])],[cellarray([' ',' '])],[cellarray(['Applied Temperature Jump',num2str(dT)])],[cellarray([' ',' '])],[cellarray(['Fiber',fiber])],[cellarray(['Matrix',matrix])],[cellarray(['Lamina Properties Algorithm',lamPropAlg])],[cellarray([' ',' '])],[cellarray(['Analysis Type',analysisType])],[cellarray([' ',' '])],[cellarray(['Interface Formulation',interfaceFormulation])],[cellarray([' ',' '])],[cellarray(['Solver(s)',solvers])],[cellarray([' ',' '])],[cellarray(['Elements\' Type',eltype])],[cellarray(['Elements\' Order',elorder])],[cellarray(['Elements\' ID',elId])],[cellarray([' ',' '])],[cellarray(['Mesh optimization',meshOptimization])],[cellarray([' ',' '])],[cellarray(['f1',num2str(f1)])],[cellarray(['f2',num2str(f2)])],[cellarray(['f3',num2str(f3)])],[cellarray([' ',' '])],[cellarray(['Nalpha',num2str(N1)])],[cellarray(['Nbeta',num2str(N2)])],[cellarray(['Ngamma',num2str(N3)])],[cellarray(['Ndelta',num2str(N4)])],[cellarray(['Neps',num2str(N5)])],[cellarray(['Nzeta',num2str(N6)])],[cellarray([' ',' '])],[cellarray(['Total Number of Nodes',num2str(nodesTOT)])],[cellarray(['Total Number of Elements',num2str(elTOT)])],[cellarray([' ',' '])],[cellarray(['Angular discretization at interface',num2str(360 / (dot(4,N1)))])],[cellarray([' ',' '])],[cellarray([' ',' '])],[cellarray(['Conversion factor of units of measurement with respect to SI',' '])],[cellarray(['length, SI [m]',num2str(unitConvFactor[1],'%10.5e')])],[cellarray(['mass, SI [kg]',num2str(unitConvFactor[2],'%10.5e')])],[cellarray(['time, SI [s]',num2str(unitConvFactor[3],'%10.5e')])],[cellarray(['force, SI [N]',num2str(unitConvFactor[15],'%10.5e')])],[cellarray(['electric current, SI [A]',num2str(unitConvFactor[4],'%10.5e')])],[cellarray(['thermodynamic temperature, SI [K]',num2str(unitConvFactor[5],'%10.5e')])],[cellarray(['amount of substance, SI [mol]',num2str(unitConvFactor[6],'%10.5e')])],[cellarray(['luminous intensity, SI [cd]',num2str(unitConvFactor[7],'%10.5e')])],[cellarray(['density, SI [kg/m^3]',num2str(unitConvFactor[8],'%10.5e')])],[cellarray(['pressure/stress, SI [Pa]',num2str(unitConvFactor[9],'%10.5e')])],[cellarray(['thermal expansion, SI [m/(m*K)]',num2str(unitConvFactor[10],'%10.5e')])],[cellarray(['thermal conductivity, SI [W/(m*K)]',num2str(unitConvFactor[11],'%10.5e')])],[cellarray(['specific heat capacity, SI [J/(kg*K)]',num2str(unitConvFactor[12],'%10.5e')])],[cellarray(['energy release rate, SI [J/m^2]',num2str(unitConvFactor[13],'%10.5e')])],[cellarray(['interface stiffness, SI [N/m^3]',num2str(unitConvFactor[14],'%10.5e')])]])
    writeABQheader(abqpath,title,subtitle,headerDict)
    #write license
    holder='Universit de Lorraine or Lule tekniska universitet'
    author='Luca Di Stasio'
    writeABQlicense(abqpath,holder,author)
    #write heading
    
    writeABQheading(abqpath,cellarray([cat('2D Plane Strain Micromechanical Simulation of RVEs: fiber volume fraction ',num2str(Vff),', ',num2str(dot(deltatheta,180) / pi),' deg debond at ',num2str(dot(theta,180) / pi),' deg')]),'none')
    # write preprint
    contact='YES'
    echo='NO'
    history='YES'
    printModel='YES'
    parsubstitution='YES'
    parvalues='YES'
    massprop='NO'
    writeABQpreprint(abqpath,contact,echo,history,printModel,parsubstitution,parvalues,massprop,cellarray([]),'none')
    # start mesh section
    writeABQmeshsec(abqpath)
    ## NODES SECTION
    
    # start nodes section
    writeABQnodesec(abqpath)
    # generates all nodes
    writeABQnodegen(abqpath,1,1,nodes,'All-Nodes')
    # assign nodes to node sets
    writeABQnodeset(abqpath,1,(arange(1,length(matrixN))).T,'Matrix-Nodes')
    writeABQnodeset(abqpath,1,length(matrixN) + (arange(1,length(fiberN))).T,'Fiber-Nodes')
    if logical_not(isCohesive) and deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
        if theta >= 0 and theta < pi:
            refAngle=pi + theta
        else:
            refAngle=theta - pi
        cosRef=cos(refAngle)
        sinRef=sin(refAngle)
        indexMin=0
        angleMin=0
        indexMax=0
        angleMax=0
        for i in arange(1,length(gammaNo1)).reshape(-1):
            xRot=dot(cosRef,nodes[gammaNo1[i],1]) + dot(sinRef,nodes[gammaNo1[i],2])
            yRot=dot(- sinRef,nodes[gammaNo1[i],1]) + dot(cosRef,nodes[gammaNo1[i],2])
            if xRot >= 0 and yRot >= 0:
                if atand(yRot / xRot) < angleMin:
                    indexMin=copy(i)
                    angleMin=atand(yRot / xRot)
                else:
                    if atand(yRot / xRot) > angleMax:
                        indexMax=copy(i)
                        angleMax=atand(yRot / xRot)
            else:
                if xRot < 0 and yRot >= 0:
                    if 180 - abs(atand(yRot / xRot)) < angleMin:
                        indexMin=copy(i)
                        angleMin=180 - abs(atand(yRot / xRot))
                    else:
                        if 180 - abs(atand(yRot / xRot)) > angleMax:
                            indexMax=copy(i)
                            angleMax=180 - abs(atand(yRot / xRot))
                else:
                    if xRot < 0 and yRot < 0:
                        if - (180 - abs(atand(yRot / xRot))) < angleMin:
                            indexMin=copy(i)
                            angleMin=- (180 - abs(atand(yRot / xRot)))
                        else:
                            if - (180 - abs(atand(yRot / xRot))) > angleMax:
                                indexMax=copy(i)
                                angleMax=- (180 - abs(atand(yRot / xRot)))
                    else:
                        if atand(yRot / xRot) < angleMin:
                            indexMin=copy(i)
                            angleMin=atand(yRot / xRot)
                        else:
                            if atand(yRot / xRot) > angleMax:
                                indexMax=copy(i)
                                angleMax=atand(yRot / xRot)
        lowerFiberCrackTip=gammaNo1[indexMax]
        upperFiberCrackTip=gammaNo1[indexMin]
        gammaNo1noTips=copy(gammaNo1)
        gammaNo1noTips[cat([indexMax],[indexMin])]=[]
        indexMin=0
        angleMin=0
        indexMax=0
        angleMax=0
        for i in arange(1,length(gammaNo3)).reshape(-1):
            xRot=dot(cosRef,nodes[gammaNo3[i],1]) + dot(sinRef,nodes[gammaNo3[i],2])
            yRot=dot(- sinRef,nodes[gammaNo3[i],1]) + dot(cosRef,nodes[gammaNo3[i],2])
            if xRot >= 0 and yRot >= 0:
                if atand(yRot / xRot) < angleMin:
                    indexMin=copy(i)
                    angleMin=atand(yRot / xRot)
                else:
                    if atand(yRot / xRot) > angleMax:
                        indexMax=copy(i)
                        angleMax=atand(yRot / xRot)
            else:
                if xRot < 0 and yRot >= 0:
                    if 180 - abs(atand(yRot / xRot)) < angleMin:
                        indexMin=copy(i)
                        angleMin=180 - abs(atand(yRot / xRot))
                    else:
                        if 180 - abs(atand(yRot / xRot)) > angleMax:
                            indexMax=copy(i)
                            angleMax=180 - abs(atand(yRot / xRot))
                else:
                    if xRot < 0 and yRot < 0:
                        if - (180 - abs(atand(yRot / xRot))) < angleMin:
                            indexMin=copy(i)
                            angleMin=- (180 - abs(atand(yRot / xRot)))
                        else:
                            if - (180 - abs(atand(yRot / xRot))) > angleMax:
                                indexMax=copy(i)
                                angleMax=- (180 - abs(atand(yRot / xRot)))
                    else:
                        if atand(yRot / xRot) < angleMin:
                            indexMin=copy(i)
                            angleMin=atand(yRot / xRot)
                        else:
                            if atand(yRot / xRot) > angleMax:
                                indexMax=copy(i)
                                angleMax=atand(yRot / xRot)
        lowerMatrixCrackTip=gammaNo3[indexMax]
        upperMatrixCrackTip=gammaNo3[indexMin]
        gammaNo3noTips=copy(gammaNo3)
        gammaNo3noTips[cat([indexMax],[indexMin])]=[]
        writeABQnodeset(abqpath,1,gammaNo1,'Gamma1-Nodes')
        writeABQnodeset(abqpath,1,gammaNo2,'Gamma2-Nodes')
        writeABQnodeset(abqpath,1,gammaNo3,'Gamma3-Nodes')
        writeABQnodeset(abqpath,1,gammaNo4,'Gamma4-Nodes')
        writeABQnodeset(abqpath,1,gammaNo1noTips,'Gamma1-Nodes-without-Crack-Tips')
        writeABQnodeset(abqpath,1,gammaNo3noTips,'Gamma3-Nodes-without-Crack-Tips')
        writeABQnodeset(abqpath,1,lowerFiberCrackTip,'FiberCrackTip1-Node')
        writeABQnodeset(abqpath,1,upperFiberCrackTip,'FiberCrackTip2-Node')
        writeABQnodeset(abqpath,1,lowerMatrixCrackTip,'MatrixCrackTip1-Node')
        writeABQnodeset(abqpath,1,upperMatrixCrackTip,'MatrixCrackTip2-Node')
        writeABQnodeset(abqpath,2,cellarray(['FiberCrackTip1-Node','FiberCrackTip2-Node']),'FiberCrackTips-Nodes')
        writeABQnodeset(abqpath,2,cellarray(['MatrixCrackTip1-Node','MatrixCrackTip2-Node']),'MatrixCrackTips-Nodes')
        writeABQnodeset(abqpath,2,cellarray(['Gamma1-Nodes','Gamma2-Nodes']),'FiberSurface-Nodes')
        writeABQnodeset(abqpath,2,cellarray(['Gamma3-Nodes','Gamma4-Nodes']),'MatrixSurfaceAtFiberInterface-Nodes')
        if nContInt > - 1:
            writeABQnodeset(abqpath,2,cellarray(['FiberCrackTip1-Node','MatrixCrackTip1-Node']),'ContourIntegralCrackTip1-Nodes')
            writeABQnodeset(abqpath,2,cellarray(['FiberCrackTip2-Node','MatrixCrackTip2-Node']),'ContourIntegralCrackTip2-Nodes')
    else:
        writeABQnodeset(abqpath,1,cat([gammaNo1],[gammaNo2]),'FiberSurface-Nodes')
        writeABQnodeset(abqpath,1,cat([gammaNo3],[gammaNo4]),'MatrixSurfaceAtFiberInterface-Nodes')
    
    writeABQnodeset(abqpath,1,Ncorners[1],'SW-CornerNode')
    writeABQnodeset(abqpath,1,Ncorners[2],'SE-CornerNode')
    writeABQnodeset(abqpath,1,Ncorners[3],'NE-CornerNode')
    writeABQnodeset(abqpath,1,Ncorners[4],'NW-CornerNode')
    writeABQnodeset(abqpath,1,Ncorners,'CornerNodes')
    writeABQnodeset(abqpath,1,Ndown,'LowerSide-Nodes-without-Corners')
    writeABQnodeset(abqpath,1,Nright,'RightSide-Nodes-without-Corners')
    writeABQnodeset(abqpath,1,Nup,'UpperSide-Nodes-without-Corners')
    writeABQnodeset(abqpath,1,Nleft[end():- 1:1],'LeftSide-Nodes-without-Corners')
    writeABQnodeset(abqpath,2,cellarray([['LowerSide-Nodes-without-Corners'],['SW-CornerNode'],['SE-CornerNode']]),'LowerSide-Nodes-with-Corners')
    writeABQnodeset(abqpath,2,cellarray([['RightSide-Nodes-without-Corners'],['SE-CornerNode'],['NE-CornerNode']]),'RightSide-Nodes-with-Corners')
    writeABQnodeset(abqpath,2,cellarray([['UpperSide-Nodes-without-Corners'],['NW-CornerNode'],['NE-CornerNode']]),'UpperSide-Nodes-with-Corners')
    writeABQnodeset(abqpath,2,cellarray([['LeftSide-Nodes-without-Corners'],['SW-CornerNode'],['NW-CornerNode']]),'LeftSide-Nodes-with-Corners')
    if isUpperBounded:
        writeABQnodeset(abqpath,1,part6up,'UpperPly-Nodes')
        writeABQnodeset(abqpath,1,NintUpNineCorners[1],'SW-UpperPly-CornerNode')
        writeABQnodeset(abqpath,1,NintUpNineCorners[2],'SE-UpperPly-CornerNode')
        writeABQnodeset(abqpath,1,NintUpZeroCorners[1],'NW-Matrix-CornerNode')
        writeABQnodeset(abqpath,1,NintUpZeroCorners[2],'NE-Matrix-CornerNode')
        writeABQnodeset(abqpath,1,NintUpNine,'LowerSide-UpperPly-Nodes-without-Corners')
        writeABQnodeset(abqpath,1,NintUpZero,'UpperSide-Matrix-Nodes-without-Corners')
        writeABQnodeset(abqpath,1,NupRight,'RightSide-UpperPly-Nodes-without-Corners')
        writeABQnodeset(abqpath,1,NupLeft,'LeftSide-UpperPly-Nodes-without-Corners')
        writeABQnodeset(abqpath,2,cellarray([['LowerSide-UpperPly-Nodes-without-Corners'],['SW-UpperPly-CornerNode'],['SE-UpperPly-CornerNode']]),'LowerSide-UpperPly-Nodes-with-Corners')
        writeABQnodeset(abqpath,2,cellarray([['UpperSide-Matrix-Nodes-without-Corners'],['NW-Matrix-CornerNode'],['NE-Matrix-CornerNode']]),'UpperSide-Matrix-Nodes-with-Corners')
    
    if isLowerBounded:
        writeABQnodeset(abqpath,1,part6bot,'LowerPly-Nodes')
        writeABQnodeset(abqpath,1,NintBotNineCorners[1],'NW-LowerPly-CornerNode')
        writeABQnodeset(abqpath,1,NintBotNineCorners[2],'NE-LowerPly-CornerNode')
        writeABQnodeset(abqpath,1,NintBotZeroCorners[1],'SW-Matrix-CornerNode')
        writeABQnodeset(abqpath,1,NintBotZeroCorners[2],'SE-Matrix-CornerNode')
        writeABQnodeset(abqpath,1,NintBotNine,'UpperSide-LowerPly-Nodes-without-Corners')
        writeABQnodeset(abqpath,1,NintBotZero,'LowerSide-Matrix-Nodes-without-Corners')
        writeABQnodeset(abqpath,1,NbotRight,'RightSide-LowerPly-Nodes-without-Corners')
        writeABQnodeset(abqpath,1,NbotLeft,'LeftSide-LowerPly-Nodes-without-Corners')
        writeABQnodeset(abqpath,2,cellarray([['UpperSide-LowerPly-Nodes-without-Corners'],['NW-LowerPly-CornerNode'],['NE-LowerPly-CornerNode']]),'UpperSide-LowerPly-Nodes-with-Corners')
        writeABQnodeset(abqpath,2,cellarray([['LowerSide-Matrix-Nodes-without-Corners'],['SW-Matrix-CornerNode'],['SE-Matrix-CornerNode']]),'LowerSide-Matrix-Nodes-with-Corners')
    
    if isUpperBounded and isLowerBounded:
        writeABQnodeset(abqpath,2,cellarray([['UpperPly-Nodes'],['LowerPly-Nodes']]),'BoundingPlies-Nodes')
    
    if interfaceDef == 5:
        writeABQnodegen(abqpath,dot(2,length(nodes)) + 1,1,cat([0,dot(dot(dot(- 2,0.5),Rf),sqrt(pi / Vff))],[0,dot(dot(dot(2,0.5),Rf),sqrt(pi / Vff))]),'Dummy-Nodes')
        writeABQnodeset(abqpath,1,cat(dot(2,length(nodes)) + 1),'Dummy1-Node')
        writeABQnodeset(abqpath,1,cat(dot(2,length(nodes)) + 2),'Dummy2-Node')
    
    ## ELEMENTS SECTION
    
    # start elements part
    writeABQelsec(abqpath)
    if dT != 0:
        if generalized:
            if element == 1 and order == 1:
                elTypeId='CPEG4T'
            else:
                if element == 1 and order == 2:
                    elTypeId='CPEG8T'
                else:
                    if element == 2 and order == 1:
                        elTypeId='CPEG3T'
                    else:
                        if element == 2 and order == 2:
                            elTypeId='CPEG6MT'
                        else:
                            elTypeId='CPEG4T'
        else:
            if element == 1 and order == 1:
                elTypeId='CPE4T'
            else:
                if element == 1 and order == 2:
                    elTypeId='CPE8T'
                else:
                    if element == 2 and order == 1:
                        elTypeId='CPE3T'
                    else:
                        if element == 2 and order == 2:
                            elTypeId='CPE6MT'
                        else:
                            elTypeId='CPE4T'
    else:
        if generalized:
            if element == 1 and order == 1:
                elTypeId='CPEG4'
            else:
                if element == 1 and order == 2:
                    elTypeId='CPEG8'
                else:
                    if element == 2 and order == 1:
                        elTypeId='CPEG3'
                    else:
                        if element == 2 and order == 2:
                            elTypeId='CPEG6'
                        else:
                            elTypeId='CPEG4'
        else:
            if element == 1 and order == 1:
                elTypeId='CPE4I'
            else:
                if element == 1 and order == 2:
                    elTypeId='CPE8'
                else:
                    if element == 2 and order == 1:
                        elTypeId='CPE3'
                    else:
                        if element == 2 and order == 2:
                            elTypeId='CPE6'
                        else:
                            elTypeId='CPE4I'
    
    writeABQelgen(abqpath,1,1,matrixEl,elTypeId,'Matrix-Elements')
    if isCohesive:
        writeABQelgen(abqpath,length(matrixEl) + 1,1,cohesiveEl,'COH2D4','Cohesive-Elements')
        writeABQelgen(abqpath,length(matrixEl) + length(cohesiveEl) + 1,1,fiberEl,elTypeId,'Fiber-Elements')
        if isUpperBounded and isLowerBounded:
            writeABQelgen(abqpath,length(matrixEl) + length(cohesiveEl) + length(fiberEl) + 1,1,boundedUp,elTypeId,'UpperPly-Elements')
            writeABQelgen(abqpath,length(matrixEl) + length(cohesiveEl) + length(fiberEl) + length(boundedUp) + 1,1,boundedBot,elTypeId,'LowerPly-Elements')
            writeABQelementset(abqpath,2,cellarray([['UpperPly-Elements'],['LowerPly-Elements']]),'BoundingPlies-Elements')
            writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Cohesive-Elements'],['Fiber-Elements'],['UpperPly-Elements'],['LowerPly-Elements']]),'All-Elements')
            writeABQelementset(abqpath,1,EintUpNine,'UpperPlyLowerSurface-Elements')
            writeABQelementset(abqpath,1,EintUpZero,'MatrixSurfaceAtUpperPlyInterface-Elements')
            writeABQelementset(abqpath,1,EintBotNine,'LowerPlyUpperSurface-Elements')
            writeABQelementset(abqpath,1,EintBotZero,'MatrixSurfaceAtLowerPlyInterface-Elements')
        else:
            if isUpperBounded:
                writeABQelgen(abqpath,length(matrixEl) + length(cohesiveEl) + length(fiberEl) + 1,1,boundedUp,elTypeId,'UpperPly-Elements')
                writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Cohesive-Elements'],['Fiber-Elements'],['UpperPly-Elements']]),'All-Elements')
                writeABQelementset(abqpath,1,EintUpNine,'UpperPlyLowerSurface-Elements')
                writeABQelementset(abqpath,1,EintUpZero,'MatrixSurfaceAtUpperPlyInterface-Elements')
            else:
                if isLowerBounded:
                    writeABQelgen(abqpath,length(matrixEl) + length(cohesiveEl) + length(fiberEl) + 1,1,boundedBot,elTypeId,'LowerPly-Elements')
                    writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Cohesive-Elements'],['Fiber-Elements'],['LowerPly-Elements']]),'All-Elements')
                    writeABQelementset(abqpath,1,EintBotNine,'LowerPlyUpperSurface-Elements')
                    writeABQelementset(abqpath,1,EintBotZero,'MatrixSurfaceAtLowerPlyInterface-Elements')
                else:
                    writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Cohesive-Elements'],['Fiber-Elements']]),'All-Elements')
        writeABQelementset(abqpath,1,gammaEl1,'FiberSurface-Elements')
        writeABQelementset(abqpath,1,gammaEl3,'MatrixSurfaceAtFiberInterface-Elements')
    else:
        writeABQelgen(abqpath,length(matrixEl) + 1,1,fiberEl,elTypeId,'Fiber-Elements')
        if isUpperBounded and isLowerBounded:
            writeABQelgen(abqpath,length(matrixEl) + length(fiberEl) + 1,1,boundedUp,elTypeId,'UpperPly-Elements')
            writeABQelgen(abqpath,length(matrixEl) + length(fiberEl) + length(boundedUp) + 1,1,boundedBot,elTypeId,'LowerPly-Elements')
            writeABQelementset(abqpath,2,cellarray([['UpperPly-Elements'],['LowerPly-Elements']]),'BoundingPlies-Elements')
            writeABQelementset(abqpath,1,EintUpNine,'UpperPlyLowerSurface-Elements')
            writeABQelementset(abqpath,1,EintUpZero,'MatrixSurfaceAtUpperPlyInterface-Elements')
            writeABQelementset(abqpath,1,EintBotNine,'LowerPlyUpperSurface-Elements')
            writeABQelementset(abqpath,1,EintBotZero,'MatrixSurfaceAtLowerPlyInterface-Elements')
            if interfaceDef == 6 and deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
                offset=length(matrixEl) + length(fiberEl) + length(boundedUp) + length(boundedBot)
                writeABQelgen(abqpath,offset + 1,1,cat(gammaNo3noTips + dot(4,N1),gammaNo3noTips),'CONN2D2','ConnectorNoTips-Elements')
                writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                offset=offset + length(gammaNo3noTips)
                writeABQelgen(abqpath,offset + 1,1,cat(lowerMatrixCrackTip + dot(4,N1),lowerMatrixCrackTip),'CONN2D2','ConnectorCrackTip1-Element')
                writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                offset=offset + 1
                writeABQelgen(abqpath,offset + 1,1,cat(upperMatrixCrackTip + dot(4,N1),upperMatrixCrackTip),'CONN2D2','ConnectorCrackTip2-Element')
                writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                writeABQelementset(abqpath,2,cellarray([['ConnectorNoTips-Elements'],['ConnectorCrackTip1-Element'],['ConnectorCrackTip2-Element']]),'Connector-Elements')
                writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['UpperPly-Elements'],['LowerPly-Elements'],['Connector-Elements']]),'All-Elements')
            else:
                if interfaceDef == 6 and deltatheta == 0:
                    offset=length(matrixEl) + length(fiberEl) + length(boundedUp) + length(boundedBot)
                    writeABQelgen(abqpath,offset + 1,1,cat(gammaNo3 + dot(4,N1),gammaNo3),'CONN2D2','Connector-Elements')
                    writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                    writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['UpperPly-Elements'],['LowerPly-Elements'],['Connector-Elements']]),'All-Elements')
                else:
                    writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['UpperPly-Elements'],['LowerPly-Elements']]),'All-Elements')
        else:
            if isUpperBounded:
                writeABQelgen(abqpath,length(matrixEl) + length(fiberEl) + 1,1,boundedUp,elTypeId,'UpperPly-Elements')
                writeABQelementset(abqpath,1,EintUpNine,'UpperPlyLowerSurface-Elements')
                writeABQelementset(abqpath,1,EintUpZero,'MatrixSurfaceAtUpperPlyInterface-Elements')
                if interfaceDef == 6 and deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
                    offset=length(matrixEl) + length(fiberEl) + length(boundedUp)
                    writeABQelgen(abqpath,offset + 1,1,cat(gammaNo3noTips + dot(4,N1),gammaNo3noTips),'CONN2D2','ConnectorNoTips-Elements')
                    writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                    offset=offset + length(gammaNo3noTips)
                    writeABQelgen(abqpath,offset + 1,1,cat(lowerMatrixCrackTip + dot(4,N1),lowerMatrixCrackTip),'CONN2D2','ConnectorCrackTip1-Element')
                    writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                    offset=offset + 1
                    writeABQelgen(abqpath,offset + 1,1,cat(upperMatrixCrackTip + dot(4,N1),upperMatrixCrackTip),'CONN2D2','ConnectorCrackTip2-Element')
                    writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                    writeABQelementset(abqpath,2,cellarray([['ConnectorNoTips-Elements'],['ConnectorCrackTip1-Element'],['ConnectorCrackTip2-Element']]),'Connector-Elements')
                    writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['UpperPly-Elements'],['Connector-Elements']]),'All-Elements')
                else:
                    if interfaceDef == 6 and deltatheta == 0:
                        offset=length(matrixEl) + length(fiberEl) + length(boundedUp) + length(boundedBot)
                        writeABQelgen(abqpath,offset + 1,1,cat(gammaNo3 + dot(4,N1),gammaNo3),'CONN2D2','Connector-Elements')
                        writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                        writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['UpperPly-Elements'],['LowerPly-Elements'],['Connector-Elements']]),'All-Elements')
                    else:
                        writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['UpperPly-Elements']]),'All-Elements')
            else:
                if isLowerBounded:
                    writeABQelgen(abqpath,length(matrixEl) + length(fiberEl) + 1,1,boundedBot,elTypeId,'LowerPly-Elements')
                    writeABQelementset(abqpath,1,EintBotNine,'LowerPlyUpperSurface-Elements')
                    writeABQelementset(abqpath,1,EintBotZero,'MatrixSurfaceAtLowerPlyInterface-Elements')
                    if interfaceDef == 6 and deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
                        offset=length(matrixEl) + length(fiberEl) + length(boundedBot)
                        writeABQelgen(abqpath,offset + 1,1,cat(gammaNo3noTips + dot(4,N1),gammaNo3noTips),'CONN2D2','ConnectorNoTips-Elements')
                        writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                        offset=offset + length(gammaNo3noTips)
                        writeABQelgen(abqpath,offset + 1,1,cat(lowerMatrixCrackTip + dot(4,N1),lowerMatrixCrackTip),'CONN2D2','ConnectorCrackTip1-Element')
                        writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                        offset=offset + 1
                        writeABQelgen(abqpath,offset + 1,1,cat(upperMatrixCrackTip + dot(4,N1),upperMatrixCrackTip),'CONN2D2','ConnectorCrackTip2-Element')
                        writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                        writeABQelementset(abqpath,2,cellarray([['ConnectorNoTips-Elements'],['ConnectorCrackTip1-Element'],['ConnectorCrackTip2-Element']]),'Connector-Elements')
                        writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['LowerPly-Elements'],['Connector-Elements']]),'All-Elements')
                    else:
                        if interfaceDef == 6 and deltatheta == 0:
                            offset=length(matrixEl) + length(fiberEl) + length(boundedUp) + length(boundedBot)
                            writeABQelgen(abqpath,offset + 1,1,cat(gammaNo3 + dot(4,N1),gammaNo3),'CONN2D2','Connector-Elements')
                            writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                            writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['UpperPly-Elements'],['LowerPly-Elements'],['Connector-Elements']]),'All-Elements')
                        else:
                            writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['LowerPly-Elements']]),'All-Elements')
                else:
                    if interfaceDef == 6 and deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
                        offset=length(matrixEl) + length(fiberEl)
                        writeABQelgen(abqpath,offset + 1,1,cat(gammaNo3noTips + dot(4,N1),gammaNo3noTips),'CONN2D2','ConnectorNoTips-Elements')
                        writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                        offset=offset + length(gammaNo3noTips)
                        writeABQelgen(abqpath,offset + 1,1,cat(lowerMatrixCrackTip + dot(4,N1),lowerMatrixCrackTip),'CONN2D2','ConnectorCrackTip1-Element')
                        writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                        offset=offset + 1
                        writeABQelgen(abqpath,offset + 1,1,cat(upperMatrixCrackTip + dot(4,N1),upperMatrixCrackTip),'CONN2D2','ConnectorCrackTip2-Element')
                        writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                        writeABQelementset(abqpath,2,cellarray([['ConnectorNoTips-Elements'],['ConnectorCrackTip1-Element'],['ConnectorCrackTip2-Element']]),'Connector-Elements')
                        writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['Connector-Elements']]),'All-Elements')
                    else:
                        if interfaceDef == 6 and deltatheta == 0:
                            offset=length(matrixEl) + length(fiberEl) + length(boundedUp) + length(boundedBot)
                            writeABQelgen(abqpath,offset + 1,1,cat(gammaNo3 + dot(4,N1),gammaNo3),'CONN2D2','Connector-Elements')
                            writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
                            writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements'],['UpperPly-Elements'],['LowerPly-Elements'],['Connector-Elements']]),'All-Elements')
                        else:
                            writeABQelementset(abqpath,2,cellarray([['Matrix-Elements'],['Fiber-Elements']]),'All-Elements')
        if deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi) and theta < pi:
            indexMin=0
            angleMin=0
            indexMax=0
            angleMax=0
            for i in arange(1,length(gammaEl1)).reshape(-1):
                xC=0
                yC=0
                for j in arange(1,length(gammaEl1[i,:])).reshape(-1):
                    xC=xC + nodes[gammaEl1[i,j],1]
                    yC=yC + nodes[gammaEl1[i,j],2]
                xC=xC / length(gammaEl1[i,:])
                yC=yC / length(gammaEl1[i,:])
                xRot=dot(cosRef,xC) + dot(sinRef,yC)
                yRot=dot(- sinRef,xC) + dot(cosRef,yC)
                if xRot >= 0 and yRot >= 0:
                    if atand(yRot / xRot) < angleMin:
                        indexMin=copy(i)
                        angleMin=atand(yRot / xRot)
                    else:
                        if atand(yRot / xRot) > angleMax:
                            indexMax=copy(i)
                            angleMax=atand(yRot / xRot)
                else:
                    if xRot < 0 and yRot >= 0:
                        if 180 - abs(atand(yRot / xRot)) < angleMin:
                            indexMin=copy(i)
                            angleMin=180 - abs(atand(yRot / xRot))
                        else:
                            if 180 - abs(atand(yRot / xRot)) > angleMax:
                                indexMax=copy(i)
                                angleMax=180 - abs(atand(yRot / xRot))
                    else:
                        if xRot < 0 and yRot < 0:
                            if - (180 - abs(atand(yRot / xRot))) < angleMin:
                                indexMin=copy(i)
                                angleMin=- (180 - abs(atand(yRot / xRot)))
                            else:
                                if - (180 - abs(atand(yRot / xRot))) > angleMax:
                                    indexMax=copy(i)
                                    angleMax=- (180 - abs(atand(yRot / xRot)))
                        else:
                            if atand(yRot / xRot) < angleMin:
                                indexMin=copy(i)
                                angleMin=atand(yRot / xRot)
                            else:
                                if atand(yRot / xRot) > angleMax:
                                    indexMax=copy(i)
                                    angleMax=atand(yRot / xRot)
            lowerFiberCrackTipEl=gammaEl1[indexMax]
            upperFiberCrackTipEl=gammaEl1[indexMin]
            gammaEl1noTip=copy(gammaEl1)
            gammaEl1noTip[cat([indexMax],[indexMin])]=[]
            indexMin=0
            angleMin=0
            indexMax=0
            angleMax=0
            for i in arange(1,length(gammaEl3)).reshape(-1):
                xC=0
                yC=0
                for j in arange(1,length(gammaEl3[i,:])).reshape(-1):
                    xC=xC + nodes[gammaEl3[i,j],1]
                    yC=yC + nodes[gammaEl3[i,j],2]
                xC=xC / length(gammaEl3[i,:])
                yC=yC / length(gammaEl3[i,:])
                xRot=dot(cosRef,xC) + dot(sinRef,yC)
                yRot=dot(- sinRef,xC) + dot(cosRef,yC)
                if xRot >= 0 and yRot >= 0:
                    if atand(yRot / xRot) < angleMin:
                        indexMin=copy(i)
                        angleMin=atand(yRot / xRot)
                    else:
                        if atand(yRot / xRot) > angleMax:
                            indexMax=copy(i)
                            angleMax=atand(yRot / xRot)
                else:
                    if xRot < 0 and yRot >= 0:
                        if 180 - abs(atand(yRot / xRot)) < angleMin:
                            indexMin=copy(i)
                            angleMin=180 - abs(atand(yRot / xRot))
                        else:
                            if 180 - abs(atand(yRot / xRot)) > angleMax:
                                indexMax=copy(i)
                                angleMax=180 - abs(atand(yRot / xRot))
                    else:
                        if xRot < 0 and yRot < 0:
                            if - (180 - abs(atand(yRot / xRot))) < angleMin:
                                indexMin=copy(i)
                                angleMin=- (180 - abs(atand(yRot / xRot)))
                            else:
                                if - (180 - abs(atand(yRot / xRot))) > angleMax:
                                    indexMax=copy(i)
                                    angleMax=- (180 - abs(atand(yRot / xRot)))
                        else:
                            if atand(yRot / xRot) < angleMin:
                                indexMin=copy(i)
                                angleMin=atand(yRot / xRot)
                            else:
                                if atand(yRot / xRot) > angleMax:
                                    indexMax=copy(i)
                                    angleMax=atand(yRot / xRot)
            lowerMatrixCrackTipEl=gammaEl3[indexMax]
            upperMatrixCrackTipEl=gammaEl3[indexMin]
            gammaEl3noTip=copy(gammaEl3)
            gammaEl3noTip[cat([indexMax],[indexMin])]=[]
            writeABQelementset(abqpath,1,gammaEl1noTip,'Gamma1-Elements-without-Crack-Tips')
            writeABQelementset(abqpath,1,gammaEl3noTip,'Gamma3-Elements-without-Crack-Tips')
            writeABQelementset(abqpath,1,lowerFiberCrackTipEl,'FiberCrackTip1-Element')
            writeABQelementset(abqpath,1,upperFiberCrackTipEl,'FiberCrackTip2-Element')
            writeABQelementset(abqpath,1,lowerMatrixCrackTipEl,'MatrixCrackTip1-Element')
            writeABQelementset(abqpath,1,upperMatrixCrackTipEl,'MatrixCrackTip2-Element')
            writeABQelementset(abqpath,1,gammaEl1,'Gamma1-Elements')
            writeABQelementset(abqpath,1,gammaEl3,'Gamma3-Elements')
            writeABQelementset(abqpath,1,gammaEl2,'Gamma2-Elements')
            writeABQelementset(abqpath,1,gammaEl4,'Gamma4-Elements')
        writeABQelementset(abqpath,1,cat([gammaEl1],[gammaEl2]),'FiberSurface-Elements')
        writeABQelementset(abqpath,1,cat([gammaEl3],[gammaEl4]),'MatrixSurfaceAtFiberInterface-Elements')
    
    ## MATERIAL SECTION
    
    #  unitConvFactor(1)  => length
#  unitConvFactor(2)  => mass
#  unitConvFactor(3)  => time
#  unitConvFactor(4)  => electric current
#  unitConvFactor(5)  => thermodynamic temperature
#  unitConvFactor(6)  => amount of substance
#  unitConvFactor(7)  => luminous intensity
#  unitConvFactor(8)  => density
#  unitConvFactor(9)  => pressure/stress
#  unitConvFactor(10) => thermal expansion
#  unitConvFactor(11) => thermal conductivity
#  unitConvFactor(12) => specific heat capacity
#  unitConvFactor(13) => fracture toughness
#  unitConvFactor(14) => interface stiffness
#  unitConvFactor(15) => force
    
    writeABQmatsec(abqpath)
    if 1 == fiberType:
        fiberProps=getValuesFromCSV(matDBfolder,strcat('CF','.csv'),2,0,9)
        fiberUnitConv=getValuesFromCSV(matDBfolder,strcat('CF','.csv'),1,0,9)
    else:
        if 2 == fiberType:
            fiberProps=getValuesFromCSV(matDBfolder,strcat('GF','.csv'),2,0,9)
            fiberUnitConv=getValuesFromCSV(matDBfolder,strcat('GF','.csv'),1,0,9)
        else:
            fiberProps=getValuesFromCSV(matDBfolder,strcat('CF','.csv'),2,0,9)
            fiberUnitConv=getValuesFromCSV(matDBfolder,strcat('CF','.csv'),1,0,9)
    
    if 1 == matrixType:
        matrixProps=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),2,0,9)
        matrixUnitConv=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),1,0,9)
    else:
        if 2 == matrixType:
            matrixProps=getValuesFromCSV(matDBfolder,strcat('HDPE','.csv'),2,0,9)
            matrixUnitConv=getValuesFromCSV(matDBfolder,strcat('HDPE','.csv'),1,0,9)
        else:
            matrixProps=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),2,0,9)
            matrixUnitConv=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),1,0,9)
    
    rhof=dot(fiberProps[1],fiberUnitConv[1])
    E1f=dot(fiberProps[2],fiberUnitConv[2])
    E2f=dot(fiberProps[3],fiberUnitConv[3])
    G12f=dot(fiberProps[4],fiberUnitConv[4])
    nu12f=dot(fiberProps[5],fiberUnitConv[5])
    nu23f=dot(fiberProps[6],fiberUnitConv[6])
    alpha1f=dot(fiberProps[7],fiberUnitConv[7])
    alpha2f=dot(fiberProps[8],fiberUnitConv[8])
    rhom=dot(matrixProps[1],matrixUnitConv[1])
    E1m=dot(matrixProps[2],matrixUnitConv[2])
    E2m=dot(matrixProps[3],matrixUnitConv[3])
    G12m=dot(matrixProps[4],matrixUnitConv[4])
    nu12m=dot(matrixProps[5],matrixUnitConv[5])
    nu23m=dot(matrixProps[6],matrixUnitConv[6])
    alpha1m=dot(matrixProps[7],matrixUnitConv[7])
    alpha2m=dot(matrixProps[8],matrixUnitConv[8])
    if 1 == matPropAlg:
        #Rule of Mixtures
        rhoc,E1,E2,nu12,nu21,G12,nu23,G23,alpha1,alpha2=RoM(Vff,rhof,E1f,E2f,nu12f,alpha1f,rhom,E1m,E2m,nu12m,alpha1m,nargout=10)
    else:
        if 2 == matPropAlg:
            #Halpsin-Tsai Method
            rhoc,E1,E2,nu12,nu21,G12,nu23,G23,alpha1,alpha2=HalpinTsai(Vff,rhof,E1f,E2f,nu12f,alpha1f,rhom,E1m,E2m,nu12m,alpha1m,nargout=10)
        else:
            if 3 == matPropAlg:
                #Hashin Method
                rhoc,E1,E2,nu12,nu21,G12,nu23,G23,alpha1,alpha2=Hashin(Vff,rhof,E1f,E2f,nu12f,nu23f,alpha1f,alpha2f,rhom,E1m,E2m,nu12m,alpha1m,nargout=10)
            else:
                #Rule of Mixtures
                rhoc,E1,E2,nu12,nu21,G12,nu23,G23,alpha1,alpha2=RoM(Vff,rhof,E1f,E2f,nu12f,alpha1f,rhom,E1m,E2m,nu12m,alpha1m,nargout=10)
    
    # fiber
    if 1 == fiberType:
        writeABQorientation(abqpath,'Fiber-Orientation','NODES','none','RECTANGULAR',cellarray([strcat(num2str(Ncorners[2]),', ',num2str(Ncorners[4]),', ',num2str(Ncorners[1]))]),'SE node (point a), NW node (point b), SW node (point c)')
        writeABQsolidsection(abqpath,'none','Fiber-Elements','Carbon-Fiber','none','Fiber-Orientation','Fiber-SectionControls','none','none','none','none',cellarray(['1.0']),'none')
        writeABQsectioncontrols(abqpath,'Fiber-SectionControls','none','none','none','none','none','ENHANCED','none','none','none','none','none','none','none','none','none','none',cellarray([]),'none')
        writeABQmaterial(abqpath,'Carbon-Fiber','none','none','none',cellarray([]),'none')
        writeABQelastic(abqpath,'none','none','none','ENGINEERING CONSTANTS',cellarray([[strcat(num2str(dot(E2f,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(E2f,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(E1f,unitConvFactor[9]),'%10.5e'),', ',num2str(nu23f,'%10.5e'),', ',num2str(dot((E2f / E1f),nu12f),'%10.5e'),', ',num2str(dot((E2f / E1f),nu12f),'%10.5e'),', ',num2str(dot((dot(0.5,E2f) / (1 + nu23f)),unitConvFactor[9]),'%10.5e'),', ',num2str(dot(G12f,unitConvFactor[9]),'%10.5e'))],[num2str(dot(G12f,unitConvFactor[9]),'%10.5e')]]),'E2f E2f E1f nu23f nu21f nu31f G23f G21f G31f')
        writeABQdensity(abqpath,'none','none',cellarray([num2str(dot(rhof,unitConvFactor[8]),'%10.5e')]),'rhof')
        writeABQexpansion(abqpath,'none','none','none','ORTHO','none','none',cellarray([strcat(num2str(dot(alpha2f,unitConvFactor[10]),'%10.5e'),', ',num2str(dot(alpha2f,unitConvFactor[10]),'%10.5e'),', ',num2str(dot(alpha1f,unitConvFactor[10]),'%10.5e'))]),'alpha22f, alpha22f, alpha11f')
        #                    {strcat(num2str(k22f*unitConvFactor(11), '#10.5e'),', ',num2str(k22f*unitConvFactor(11), '#10.5e'),', ',num2str(k11f*unitConvFactor(11), '#10.5e'))},'k22f, k22f, k11f');
        #writeABQspecificheat(abqpath,'none','none','none',{num2str(cvff*unitConvFactor(12), '#10.5e')},'cv');
    else:
        if 2 == fiberType:
            writeABQsolidsection(abqpath,'none','Fiber-Elements','Glass-Fiber','none','none','Fiber-SectionControls','none','none','none','none',cellarray(['1.0']),'none')
            writeABQsectioncontrols(abqpath,'Fiber-SectionControls','none','none','none','none','none','ENHANCED','none','none','none','none','none','none','none','none','none','none',cellarray([]),'none')
            writeABQmaterial(abqpath,'Glass-Fiber','none','none','none',cellarray([]),'none')
            writeABQelastic(abqpath,'none','none','none','ISOTROPIC',cellarray([strcat(num2str(dot(E1f,unitConvFactor[9]),'%10.5e'),', ',num2str(nu12f,'%10.5e'))]),'Ef nuf')
            writeABQdensity(abqpath,'none','none',cellarray([num2str(dot(rhof,unitConvFactor[8]),'%10.5e')]),'rhof')
            writeABQexpansion(abqpath,'none','none','none','ISO','none','none',cellarray([strcat(num2str(dot(alpha1f,unitConvFactor[10]),'%10.5e'))]),'alphaf')
        else:
            writeABQorientation(abqpath,'Fiber-Orientation','NODES','none','RECTANGULAR',cellarray([strcat(num2str(Ncorners[2]),', ',num2str(Ncorners[4]),', ',num2str(Ncorners[1]))]),'SE node (point a), NW node (point b), SW node (point c)')
            writeABQsolidsection(abqpath,'none','Fiber-Elements','Carbon-Fiber','none','Fiber-Orientation','Fiber-SectionControls','none','none','none','none',cellarray(['1.0']),'none')
            writeABQsectioncontrols(abqpath,'Fiber-SectionControls','none','none','none','none','none','ENHANCED','none','none','none','none','none','none','none','none','none','none',cellarray([]),'none')
            writeABQmaterial(abqpath,'Carbon-Fiber','none','none','none',cellarray([]),'none')
            writeABQelastic(abqpath,'none','none','none','ENGINEERING CONSTANTS',cellarray([[strcat(num2str(dot(E2f,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(E2f,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(E1f,unitConvFactor[9]),'%10.5e'),', ',num2str(nu23f,'%10.5e'),', ',num2str(dot((E2f / E1f),nu12f),'%10.5e'),', ',num2str(dot((E2f / E1f),nu12f),'%10.5e'),', ',num2str(dot((dot(0.5,E2f) / (1 + nu23f)),unitConvFactor[9]),'%10.5e'),', ',num2str(dot(G12f,unitConvFactor[9]),'%10.5e'))],[num2str(dot(G12f,unitConvFactor[9]),'%10.5e')]]),'E2f E2f E1f nu23f nu21f nu31f G23f G21f G31f')
            writeABQdensity(abqpath,'none','none',cellarray([num2str(dot(rhof,unitConvFactor[8]),'%10.5e')]),'rhof')
            writeABQexpansion(abqpath,'none','none','none','ORTHO','none','none',cellarray([strcat(num2str(dot(alpha2f,unitConvFactor[10]),'%10.5e'),', ',num2str(dot(alpha2f,unitConvFactor[10]),'%10.5e'),', ',num2str(dot(alpha1f,unitConvFactor[10]),'%10.5e'))]),'alpha22f, alpha22f, alpha11f')
    
    # matrix
    
    writeABQsolidsection(abqpath,'none','Matrix-Elements','Matrix','none','none','Matrix-SectionControls','none','none','none','none',cellarray(['1.0']),'none')
    writeABQsectioncontrols(abqpath,'Matrix-SectionControls','none','none','none','none','none','ENHANCED','none','none','none','none','none','none','none','none','none','none',cellarray([]),'none')
    writeABQmaterial(abqpath,'Matrix','none','none','none',cellarray([]),'none')
    writeABQelastic(abqpath,'none','none','none','ISOTROPIC',cellarray([strcat(num2str(dot(E1m,unitConvFactor[9]),'%10.5e'),', ',num2str(nu12m,'%10.5e'))]),'Em num')
    writeABQdensity(abqpath,'none','none',cellarray([num2str(dot(rhom,unitConvFactor[8]),'%10.5e')]),'rhom')
    writeABQexpansion(abqpath,'none','none','none','ISO','none','none',cellarray([strcat(num2str(dot(alpha1m,unitConvFactor[10]),'%10.5e'))]),'alpham')
    if solverChoice == 3 or solverChoice == 4:
        if 1 == matrixType:
            matrixDamageProps=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),5,0,6)
            matrixDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),4,0,6)
        else:
            if 2 == matrixType:
                matrixDamageProps=getValuesFromCSV(matDBfolder,strcat('HDPE','.csv'),5,0,6)
                matrixDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('HDPE','.csv'),4,0,6)
            else:
                matrixDamageProps=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),5,0,6)
                matrixDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),4,0,6)
        matrixMaxT1=dot(matrixDamageProps[1],matrixDamageUnitConv[1])
        matrixMaxT2=dot(matrixDamageProps[2],matrixDamageUnitConv[2])
        matrixMaxT3=dot(matrixDamageProps[3],matrixDamageUnitConv[3])
        matrixGIc=dot(matrixDamageProps[4],matrixDamageUnitConv[4])
        matrixGIIc=dot(matrixDamageProps[5],matrixDamageUnitConv[5])
        matrixGIIIc=dot(matrixDamageProps[6],matrixDamageUnitConv[6])
        matrixEta=dot(matrixDamageProps[7],matrixDamageUnitConv[7])
        writeABQdamageinitiation(abqpath,'QUADS','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none',cellarray([strcat(num2str(dot(matrixMaxT1,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(matrixMaxT2,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(matrixMaxT3,unitConvFactor[9]),'%10.5e'))]),'maxT-normal maxT-in-plane-shear maxT-out-of-plane-shear')
        writeABQdamageevolution(abqpath,'ENERGY','none','none','none','BK','ENERGY',num2str(matrixEta,'%10.5e'),'LINEAR',cellarray([strcat(num2str(dot(matrixGIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(matrixGIIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(matrixGIIIc,unitConvFactor[13]),'%10.5e'))]),'GIc GIIc GIIIc')
    
    # bounding plies
    
    if isUpperBounded or isLowerBounded:
        # compute properties
        Qloc=locallaminaQ(E1,E2,nu12,nu21,G12)
        Q=laminaQ(phi,E1,E2,nu12,G12,nu23,G23)
        lamD1111=Q[1,1]
        lamD1122=Q[1,2]
        lamD1133=Qloc[1,2]
        lamD1112=Q[1,3]
        lamD2222=Q[2,2]
        lamD2233=dot(E2,(nu23 + dot((E2 / E1),nu12 ** 2))) / (dot((1 + nu23),(1 - nu23 - dot(dot(2,(E2 / E1)),nu12 ** 2))))
        lamD2212=Q[2,3]
        lamD3333=Qloc[2,2]
        lamD1212=Q[3,3]
        lamD1313=copy(G23)
        lamD2323=copy(G23)
        D1111=copy(lamD1111)
        D1122=copy(lamD1133)
        D2222=copy(lamD3333)
        D1133=copy(lamD1122)
        D2233=copy(lamD2233)
        D3333=copy(lamD2222)
        D1112=0
        D2212=0
        D3312=0
        D1212=copy(lamD1313)
        D1113=copy(lamD1112)
        D2213=0
        D3313=copy(lamD2212)
        D1213=0
        D1313=copy(lamD1212)
        D1123=0
        D2223=0
        D3323=0
        D1223=0
        D1323=0
        D2323=copy(lamD2323)
        writeABQorientation(abqpath,'BoundingPly-Orientation','NODES','none','RECTANGULAR',cellarray([strcat(num2str(Ncorners[2]),', ',num2str(Ncorners[4]),', ',num2str(Ncorners[1]))]),'SE node (point a), NW node (point b), SW node (point c)')
        if isUpperBounded and isLowerBounded:
            writeABQsolidsection(abqpath,'none','BoundingPlies-Elements','BoundingPly','none','BoundingPly-Orientation','BoundingPly-SectionControls','none','none','none','none',cellarray(['1.0']),'none')
        else:
            if isUpperBounded:
                writeABQsolidsection(abqpath,'none','UpperPly-Elements','BoundingPly','none','BoundingPly-Orientation','BoundingPly-SectionControls','none','none','none','none',cellarray(['1.0']),'none')
            else:
                writeABQsolidsection(abqpath,'none','LowerPly-Elements','BoundingPly','none','BoundingPly-Orientation','BoundingPly-SectionControls','none','none','none','none',cellarray(['1.0']),'none')
        writeABQsectioncontrols(abqpath,'BoundingPly-SectionControls','none','none','none','none','none','ENHANCED','none','none','none','none','none','none','none','none','none','none',cellarray([]),'none')
        writeABQmaterial(abqpath,'BoundingPly','none','none','none',cellarray([]),'none')
        writeABQelastic(abqpath,'none','none','none','ANISOTROPIC',cellarray([[strcat(num2str(dot(D1111,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D1122,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D2222,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D1133,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D2233,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D3333,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D1112,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D2212,unitConvFactor[9]),'%10.5e'))],[strcat(num2str(dot(D3312,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D1212,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D1113,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D2213,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D3313,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D1213,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D1313,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D1123,unitConvFactor[9]),'%10.5e'))],[strcat(num2str(dot(D2223,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D3323,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D1223,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D1323,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(D2323,unitConvFactor[9]),'%10.5e'))]]),strcat('Abaqus: D1111 D1122 D2222 D1133 D2233 D3333 D1112 D2212\\n**        D3312 D1212 D1113 D2213 D3313 D1213 D1313 D1123\\n**        D2223 D3323 D1223 D1323 D2323\\n','** Lamina: D1111 D1133 D3333 D1122 D2233 D2222     0     0\\n**            0 D1313 D1112     0 D2212     0 D1212     0\\n**            0     0     0     0 D2323'))
        writeABQdensity(abqpath,'none','none',cellarray([num2str(dot(rhoc,unitConvFactor[8]),'%10.5e')]),'rhoLam')
        writeABQexpansion(abqpath,'none','none','none','ORTHO','none','none',cellarray([strcat(num2str(dot(alpha1,unitConvFactor[10]),'%10.5e'),', ',num2str(dot(alpha2,unitConvFactor[10]),'%10.5e'),', ',num2str(dot(alpha2,unitConvFactor[10]),'%10.5e'))]),'alpha1Lam, alpha2Lam, alpha2Lam')
    
    if matrixType == 1 and fiberType == 1:
        cohesiveDamageProps=getValuesFromCSV(matDBfolder,strcat('EP-CF-interface','.csv'),2,0,9)
        cohesiveDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('EP-CF-interface','.csv'),1,0,9)
    else:
        if matrixType == 1 and fiberType == 2:
            cohesiveDamageProps=getValuesFromCSV(matDBfolder,strcat('EP-GF-interface','.csv'),2,0,9)
            cohesiveDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('EP-GF-interface','.csv'),1,0,9)
        else:
            if matrixType == 2 and fiberType == 1:
                cohesiveDamageProps=getValuesFromCSV(matDBfolder,strcat('HDPE-CF-interface','.csv'),2,0,9)
                cohesiveDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('HDPE-CF-interface','.csv'),1,0,9)
            else:
                if matrixType == 2 and fiberType == 2:
                    cohesiveDamageProps=getValuesFromCSV(matDBfolder,strcat('HDPE-GF-interface','.csv'),2,0,9)
                    cohesiveDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('HDPE-GF-interface','.csv'),1,0,9)
                else:
                    cohesiveDamageProps=getValuesFromCSV(matDBfolder,strcat('EP-CF-interface','.csv'),2,0,9)
                    cohesiveDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('EP-CF-interface','.csv'),1,0,9)
    
    # Load Fiber/Matrix Interface Properties
    
    Eint1=dot(cohesiveDamageProps[1],cohesiveDamageUnitConv[1])
    Eint2=dot(cohesiveDamageProps[2],cohesiveDamageUnitConv[2])
    Eint3=dot(cohesiveDamageProps[3],cohesiveDamageUnitConv[3])
    maxT1=dot(cohesiveDamageProps[4],cohesiveDamageUnitConv[4])
    maxT2=dot(cohesiveDamageProps[5],cohesiveDamageUnitConv[5])
    maxT3=dot(cohesiveDamageProps[6],cohesiveDamageUnitConv[6])
    GIc=dot(cohesiveDamageProps[7],cohesiveDamageUnitConv[7])
    GIIc=dot(cohesiveDamageProps[8],cohesiveDamageUnitConv[8])
    GIIIc=dot(cohesiveDamageProps[9],cohesiveDamageUnitConv[9])
    eta=dot(cohesiveDamageProps[10],cohesiveDamageUnitConv[10])
    ## SURFACE AND FRACTURE SECTION
    
    writeABQsurfacesec(abqpath)
    if element == 1:
        if deltatheta == 0 or deltatheta > dot((1 - 0.25 / N1),pi):
            # fiber surface
            writeABQsurface(abqpath,'Fiber-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['FiberSurface-Elements, S1']),'fiber surface')
            writeABQsurface(abqpath,'Matrix-AtFiberInterface-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['MatrixSurfaceAtFiberInterface-Elements, S3']),'matrix surface at fiber interface')
        else:
            if 1 == interfaceDef:
                # fiber surface
                writeABQsurface(abqpath,'Fiber-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['FiberSurface-Elements, S1']),'fiber surface')
                writeABQsurface(abqpath,'Matrix-AtFiberInterface-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['MatrixSurfaceAtFiberInterface-Elements, S3']),'matrix surface at fiber interface')
            else:
                if 2 == interfaceDef:
                    # Gamma 1 surface
                    writeABQsurface(abqpath,'Fiber-Surface-Tied','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['Gamma1-Elements-without-Crack-Tips, S1']),'tied fiber surface')
                    writeABQsurface(abqpath,'Matrix-Surface-Tied','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['Gamma3-Elements-without-Crack-Tips, S3']),'tied matrix surface')
                    writeABQsurface(abqpath,'Fiber-Surface-Debond','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['Gamma2-Elements, S1'],['FiberCrackTip1-Element, S1'],['FiberCrackTip2-Element, S1']]),'debond fiber surface')
                    writeABQsurface(abqpath,'Matrix-Surface-Debond','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['Gamma4-Elements, S3'],['MatrixCrackTip1-Element, S3'],['MatrixCrackTip2-Element, S3']]),'debond matrix surface')
                else:
                    if 3 == interfaceDef:
                        # Gamma 2 and Crack Tips surface
                        writeABQsurface(abqpath,'Fiber-Surface-Debond','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['Gamma2-Elements, S1'],['FiberCrackTip1-Element, S1'],['FiberCrackTip2-Element, S1']]),'debond fiber surface')
                        writeABQsurface(abqpath,'Matrix-Surface-Debond','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['Gamma4-Elements, S3'],['MatrixCrackTip1-Element, S3'],['MatrixCrackTip2-Element, S3']]),'debond matrix surface')
                    else:
                        if 4 == interfaceDef:
                            # Gamma 1 surface
                            writeABQsurface(abqpath,'Fiber-Surface-Tied','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['Gamma1-Elements, S1']),'tied fiber surface')
                            writeABQsurface(abqpath,'Matrix-Surface-Tied','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['Gamma3-Elements, S3']),'tied matrix surface')
                            writeABQsurface(abqpath,'Fiber-Surface-Debond','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['Gamma2-Elements, S1']),'debond fiber surface')
                            writeABQsurface(abqpath,'Matrix-Surface-Debond','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['Gamma4-Elements, S3']),'debond matrix surface')
                        else:
                            if 5 == interfaceDef:
                                # Gamma 2 surface
                                writeABQsurface(abqpath,'Fiber-Surface-Debond','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['Gamma2-Elements, S1']),'debond fiber surface')
                                writeABQsurface(abqpath,'Matrix-Surface-Debond','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['Gamma4-Elements, S3']),'debond matrix surface')
                            else:
                                if 6 == interfaceDef:
                                    # Gamma 2 surface
                                    writeABQsurface(abqpath,'Fiber-Surface-Debond','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['Gamma2-Elements, S1']),'debond fiber surface')
                                    writeABQsurface(abqpath,'Matrix-Surface-Debond','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['Gamma4-Elements, S3']),'debond matrix surface')
    else:
        # fiber surface
        writeABQsurface(abqpath,'Fiber-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['FiberSurface-Elements']),'fiber surface')
        writeABQsurface(abqpath,'Matrix-AtFiberInterface-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['MatrixSurfaceAtFiberInterface-Elements']),'matrix surface at fiber interface')
    
    if isUpperBounded:
        # upper side matrix surface
        writeABQsurface(abqpath,'Matrix-AtUpperPlyInterface-Surface','none','none','none','none','none','none','none','YES','ELEMENT','none','none','none','none',cellarray(['MatrixSurfaceAtUpperPlyInterface-Elements']),'upper side matrix surface')
        writeABQsurface(abqpath,'UpperPly-AtMatrixInterface-Surface','none','none','none','none','none','none','none','YES','ELEMENT','none','none','none','none',cellarray(['UpperPlyLowerSurface-Elements']),'upper ply surface at matrix interface')
        writeABQtie(abqpath,'UpperTieConstraint','none','none','YES','none','none','none','none','SURFACE TO SURFACE',cellarray([['Matrix-AtUpperPlyInterface-Surface'],['UpperPly-AtMatrixInterface-Surface']]),'tie constraint between matrix (slave) and upper ply (master)')
    
    if isLowerBounded:
        # upper side matrix surface
        writeABQsurface(abqpath,'Matrix-AtLowerPlyInterface-Surface','none','none','none','none','none','none','none','YES','ELEMENT','none','none','none','none',cellarray(['MatrixSurfaceAtLowerPlyInterface-Elements']),'upper side matrix surface')
        writeABQsurface(abqpath,'LowerPly-AtMatrixInterface-Surface','none','none','none','none','none','none','none','YES','ELEMENT','none','none','none','none',cellarray(['LowerPlyUpperSurface-Elements']),'upper ply surface at matrix interface')
        writeABQtie(abqpath,'LowerTieConstraint','none','none','YES','none','none','none','none','SURFACE TO SURFACE',cellarray([['Matrix-AtLowerPlyInterface-Surface'],['LowerPly-AtMatrixInterface-Surface']]),'tie constraint between matrix (slave) and upper ply (master)')
    
    #Fiber/Matrix Interface Contact Interaction Definition
    if deltatheta == 0 or deltatheta > dot((1 - 0.25 / N1),pi):
        writeABQcontactpair(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none','none','none','none','none','none','none','none','NODE TO SURFACE',cellarray(['Matrix-AtFiberInterface-Surface, Fiber-Surface']),'slave, master')
        writeABQsurfaceinteraction(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
        if interfaceFriction > 0:
            writeABQfriction(abqpath,'none','none','none','0.005','none','none','none','none','none','none','none','none','none',cellarray([num2str(interfaceFriction,'%10.5e')]),'friction coefficient')
    else:
        if 1 == interfaceDef:
            writeABQcontactpair(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['Matrix-AtFiberInterface-Surface, Fiber-Surface']),'slave, master')
            writeABQsurfaceinteraction(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
            if interfaceFriction > 0:
                writeABQfriction(abqpath,'none','none','none','0.005','none','none','none','none','none','none','none','none','none',cellarray([num2str(interfaceFriction,'%10.5e')]),'friction coefficient')
        else:
            if 2 == interfaceDef:
                # tie constraint
                writeABQtie(abqpath,'FiberMatrixTieConstraint','none','none','YES','none','none','none','none','SURFACE TO SURFACE',cellarray(['Matrix-Surface-Tied, Fiber-Surface-Tied']),'tie constraint between matrix (slave) and fiber (master)')
                writeABQcontactpair(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['Matrix-Surface-Debond, Fiber-Surface-Debond']),'slave, master')
                writeABQsurfaceinteraction(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
                if interfaceFriction > 0:
                    writeABQfriction(abqpath,'none','none','none','0.005','none','none','none','none','none','none','none','none','none',cellarray([num2str(interfaceFriction,'%10.5e')]),'friction coefficient')
            else:
                if 3 == interfaceDef:
                    # debond
                    writeABQcontactpair(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['Matrix-Surface-Debond, Fiber-Surface-Debond']),'slave, master')
                    writeABQsurfaceinteraction(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
                    if interfaceFriction > 0:
                        writeABQfriction(abqpath,'none','none','none','0.005','none','none','none','none','none','none','none','none','none',cellarray([num2str(interfaceFriction,'%10.5e')]),'friction coefficient')
                else:
                    if 4 == interfaceDef:
                        # tie constraint
                        writeABQtie(abqpath,'FiberMatrixTieConstraint','none','none','YES','none','none','none','none','SURFACE TO SURFACE',cellarray(['Matrix-Surface-Tied, Fiber-Surface-Tied']),'tie constraint between matrix (slave) and fiber (master)')
                        writeABQcontactpair(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['Matrix-Surface-Debond, Fiber-Surface-Debond']),'slave, master')
                        writeABQsurfaceinteraction(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
                        if interfaceFriction > 0:
                            writeABQfriction(abqpath,'none','none','none','0.005','none','none','none','none','none','none','none','none','none',cellarray([num2str(interfaceFriction,'%10.5e')]),'friction coefficient')
                    else:
                        if 5 == interfaceDef:
                            # debond
                            writeABQcontactpair(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['Matrix-Surface-Debond, Fiber-Surface-Debond']),'slave, master')
                            writeABQsurfaceinteraction(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
                            if interfaceFriction > 0:
                                writeABQfriction(abqpath,'none','none','none','0.005','none','none','none','none','none','none','none','none','none',cellarray([num2str(interfaceFriction,'%10.5e')]),'friction coefficient')
                        else:
                            if 6 == interfaceDef:
                                # debond
                                writeABQcontactpair(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['Matrix-Surface-Debond, Fiber-Surface-Debond']),'slave, master')
                                writeABQsurfaceinteraction(abqpath,'FiberMatrixFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
                                if interfaceFriction > 0:
                                    writeABQfriction(abqpath,'none','none','none','0.005','none','none','none','none','none','none','none','none','none',cellarray([num2str(interfaceFriction,'%10.5e')]),'friction coefficient')
    
    if solverChoice == 2 or solverChoice == 3:
        writeABQcohesivesection(abqpath,'Cohesive-Elements','FiberMatrixInterface','TRACTION SEPARATION','CohesiveLayer-Controls','none','none','SPECIFIED',cellarray([['1.0'],['1.0']]),'Fiber/Matrix Interface Cohesive Properties')
        writeABQsectioncontrols(abqpath,'CohesiveLayer-Controls','none','none','none','none','YES','none','none','none','none','none','1.0','none','none','none','none','none',cellarray([]),'none')
        writeABQmaterial(abqpath,'FiberMatrixInterface','none','none','none',cellarray([]),'none')
        writeABQelastic(abqpath,'none','none','none','TRACTION',cellarray([strcat(num2str(dot(Eint1,unitConvFactor[14]),'%10.5e'),', ',num2str(dot(Eint2,unitConvFactor[14]),'%10.5e'),', ',num2str(dot(Eint3,unitConvFactor[14]),'%10.5e'))]),'Einterface Einterface Einterface')
        writeABQdamageinitiation(abqpath,'QUADS','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none',cellarray([strcat(num2str(dot(maxT1,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(maxT2,unitConvFactor[9]),'%10.5e'),', ',num2str(dot(maxT3,unitConvFactor[9]),'%10.5e'))]),'maxT-normal maxT-in-plane-shear maxT-out-of-plane-shear')
        writeABQdamageevolution(abqpath,'ENERGY','none','none','none','BK','ENERGY',num2str(eta,'%10.5e'),'LINEAR',cellarray([strcat(num2str(dot(GIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIIc,unitConvFactor[13]),'%10.5e'))]),'GIc GIIc GIIIc')
    
    if solverChoice == 3 or solverChoice == 4:
        writeABQenrichment(abqpath,'Matrix-Elements','MatrixFracture','none','MatrixCracks-Surfaces','PROPAGATION CRACK',cellarray([]),'none')
        writeABQsurfaceinteraction(abqpath,'MatrixCracks-Surfaces','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness')
        writeABQsurfacebehavior(abqpath,'none','none','none','none','none',cellarray([]),'')
        if solverChoice == 4:
            writeABQfracturecriterion(abqpath,'none','none','VCCT','none','BK','none','MTS','none','none','0.2','0.0',cellarray([strcat(num2str(dot(matrixGIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(matrixGIIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(matrixGIIIc,unitConvFactor[13]),'%10.5e'),', ',num2str(matrixEta,'%10.5e'))]),'GIc GIIc GIIIc eta')
        #writeABQsurface(abqpath,'MatrixCrackInterfaces','none','none','none','none','none','none','none','none','XFEM','none','none','none','none',{'MatrixFracture'},'enriched sets');
    
    ## BOUNDARY CONDITIONS SECTION
    
    writeABQbcsec(abqpath)
    if deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
        if interfaceDef == 3:
            for i in arange(1,length(gammaNo3noTips)).reshape(-1):
                writeABQmpc(abqpath,'none','none','none',cellarray([strcat('TIE, ',num2str(gammaNo3noTips[i] + dot(4,N1)),', ',num2str(gammaNo3noTips[i]))]),'MPC type, node numbers or node sets')
        else:
            if interfaceDef == 5:
                #         for i=1:length(gammaNo3)
#             writeABQmpc(abqpath,'none','none','none',...
#                         {strcat('TIE, ', num2str(gammaNo3(i)+4*N1), ', ', num2str(gammaNo3(i)))},...
#                         'MPC type, node numbers or node sets');
#         end
                writeABQequation(abqpath,'none',cellarray([['3'],['FiberCrackTip1-Node,1,1,MatrixCrackTip1-Node,1,-1,Dummy1-Node,1,-1']]),'none')
                writeABQequation(abqpath,'none',cellarray([['3'],['FiberCrackTip1-Node,2,1,MatrixCrackTip1-Node,2,-1,Dummy1-Node,2,-1']]),'none')
                writeABQequation(abqpath,'none',cellarray([['3'],['FiberCrackTip2-Node,1,1,MatrixCrackTip2-Node,1,-1,Dummy2-Node,1,-1']]),'none')
                writeABQequation(abqpath,'none',cellarray([['3'],['FiberCrackTip2-Node,2,1,MatrixCrackTip2-Node,2,-1,Dummy2-Node,2,-1']]),'none')
                for i in arange(1,length(gammaNo3noTips)).reshape(-1):
                    writeABQequation(abqpath,'none',cellarray([['2'],[strcat(num2str(gammaNo3noTips[i] + dot(4,N1)),',1,1,',num2str(gammaNo3noTips[i]),',1,-1')]]),'none')
                    writeABQequation(abqpath,'none',cellarray([['2'],[strcat(num2str(gammaNo3noTips[i] + dot(4,N1)),',2,1,',num2str(gammaNo3noTips[i]),',2,-1')]]),'none')
                writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['Dummy-Nodes,ENCASTRE']),'none')
    
    if modType == 3:
        writeABQequation(abqpath,'none',cellarray([['2'],['UpperSide-Nodes-without-Corners,1,1,LowerSide-Nodes-without-Corners,1,-1']]),'none')
        writeABQequation(abqpath,'none',cellarray([['2'],['LeftSide-Nodes-with-Corners,2,1,RightSide-Nodes-with-Corners,2,-1']]),'none')
        writeABQequation(abqpath,'none',cellarray([['2'],['UpperSide-Nodes-without-Corners,2,1,LowerSide-Nodes-without-Corners,2,-1']]),'none')
    else:
        if modType == 4:
            if isHomogeneousOnUpper:
                writeABQmpc(abqpath,'none','none','none',cellarray([strcat('SLIDER, UpperSide-Nodes-without-Corners, NW-CornerNode, NE-CornerNode')]),'MPC type, node numbers or node sets')
            else:
                if isSymmOnUpper:
                    writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['UpperSide-Nodes-without-Corners,YSYMM'],['NW-CornerNode,YSYMM'],['NE-CornerNode,YSYMM']]),'none')
            if isHomogeneousOnLower:
                writeABQmpc(abqpath,'none','none','none',cellarray([strcat('SLIDER, LowerSide-Nodes-without-Corners, SW-CornerNode, SE-CornerNode')]),'MPC type, node numbers or node sets')
            else:
                if isSymmOnLower:
                    writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['LowerSide-Nodes-without-Corners,YSYMM'],['SW-CornerNode,YSYMM'],['SE-CornerNode,YSYMM']]),'none')
        else:
            if modType == 5:
                if isSymmOnUpper:
                    writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['UpperSide-Nodes-without-Corners,YSYMM'],['NW-CornerNode,YSYMM'],['NE-CornerNode,YSYMM']]),'none')
                if isSymmOnLower:
                    writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['LowerSide-Nodes-without-Corners,YSYMM'],['SW-CornerNode,YSYMM'],['SE-CornerNode,YSYMM']]),'none')
            else:
                if modType == 6:
                    if isSymmOnUpper:
                        writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['UpperSide-Nodes-without-Corners,YSYMM'],['NW-CornerNode,YSYMM'],['NE-CornerNode,YSYMM']]),'none')
                    else:
                        writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['UpperSide-Nodes-without-Corners,2'],['NW-CornerNode,2'],['NE-CornerNode,2']]),'none')
                    if isSymmOnLower:
                        writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['LowerSide-Nodes-without-Corners,YSYMM'],['SW-CornerNode,YSYMM'],['SE-CornerNode,YSYMM']]),'none')
                    else:
                        writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['LowerSide-Nodes-without-Corners,2'],['SW-CornerNode,2'],['SE-CornerNode,2']]),'none')
                else:
                    if modType == 1:
                        if isHomogeneousOnUpper:
                            equationData=cellarray([])
                            for i in arange(1,length(Nup)).reshape(-1):
                                offset=length(equationData)
                                equationData[offset + 1,1]=cellarray(['2'])
                                equationData[offset + 2,1]=cellarray([strcat(num2str(Nup[i]),',1,1,',num2str(Ncorners[3]),',1,',num2str(- nodes[Nup[i],1] / nodes[Ncorners[3],1]))])
                            writeABQequation(abqpath,'none',equationData,'none')
                            clear('equationData')
                            equationData=cellarray([])
                            for i in arange(1,length(Nup)).reshape(-1):
                                offset=length(equationData)
                                equationData[offset + 1,1]=cellarray(['2'])
                                equationData[offset + 2,1]=cellarray([strcat(num2str(Nup[i]),',2,1,',num2str(Ncorners[3]),',2,-1')])
                            writeABQequation(abqpath,'none',equationData,'none')
                            clear('equationData')
                        else:
                            if isSymmOnUpper:
                                writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['UpperSide-Nodes-without-Corners,YSYMM'],['NW-CornerNode,YSYMM'],['NE-CornerNode,YSYMM']]),'none')
                        if isHomogeneousOnLower:
                            equationData=cellarray([])
                            for i in arange(1,length(Ndown)).reshape(-1):
                                offset=length(equationData)
                                equationData[offset + 1,1]=cellarray(['2'])
                                equationData[offset + 2,1]=cellarray([strcat(num2str(Ndown[i]),',1,1,',num2str(Ncorners[2]),',1,',num2str(- nodes[Ndown[i],1] / nodes[Ncorners[2],1]))])
                            writeABQequation(abqpath,'none',equationData,'none')
                            clear('equationData')
                            equationData=cellarray([])
                            for i in arange(1,length(Ndown)).reshape(-1):
                                offset=length(equationData)
                                equationData[offset + 1,1]=cellarray(['2'])
                                equationData[offset + 2,1]=cellarray([strcat(num2str(Ndown[i]),',2,1,',num2str(Ncorners[2]),',2,-1')])
                            writeABQequation(abqpath,'none',equationData,'none')
                            clear('equationData')
                        else:
                            if isSymmOnLower:
                                writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['LowerSide-Nodes-without-Corners,YSYMM'],['SW-CornerNode,YSYMM'],['SE-CornerNode,YSYMM']]),'none')
    
    ## INITIAL CONDITIONS SECTION
    
    if solverChoice == 1 or solverChoice == 4:
        writeABQicsec(abqpath)
        if deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
            if interfaceDef == 1:
                writeABQinitialconditions(abqpath,'CONTACT','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['Matrix-AtFiberInterface-Surface,Fiber-Surface,Gamma3-Nodes']),'none')
            else:
                if interfaceDef == 2 or interfaceDef == 3:
                    writeABQinitialconditions(abqpath,'CONTACT','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['Matrix-Surface-Debond,Fiber-Surface-Debond,MatrixCrackTips-Nodes']),'none')
    
    ## LOAD SECTION
    
    writeABQloadsec(abqpath)
    if strainType == 0:
        writeABQstep(abqpath,'STEP','YES','none','none','10000','LoadStep','none','none','none','none',cellarray([]),'none')
    else:
        writeABQstep(abqpath,'STEP','YES','none','none','10000','LoadStep','YES','none','none','none',cellarray([]),'none')
    
    writeABQstatic(abqpath,'none','none','none','none','none','none','none','none','none',cellarray(['1e-4,1.0,1e-8,1e-2']),'Initial time increment, Time period of the step, Minimum time increment allowed, Maximum time increment allowed')
    boundaryData=cellarray([[strcat('RightSide-Nodes-without-Corners,1,,',num2str(dot(epsxx,nodes[Ncorners[2],1])))],[strcat('SE-CornerNode,1,,',num2str(dot(epsxx,nodes[Ncorners[2],1])))],[strcat('NE-CornerNode,1,,',num2str(dot(epsxx,nodes[Ncorners[2],1])))],[strcat('LeftSide-Nodes-without-Corners,1,,',num2str(dot(- epsxx,nodes[Ncorners[2],1])))],[strcat('SW-CornerNode,1,,',num2str(dot(- epsxx,nodes[Ncorners[2],1])))],[strcat('NW-CornerNode,1,,',num2str(dot(- epsxx,nodes[Ncorners[2],1])))]])
    if isUpperBounded:
        offset=length(boundaryData)
        boundaryData[offset + 1,1]=strcat('RightSide-UpperPly-Nodes-without-Corners,1,,',num2str(dot(epsxx,nodes[Ncorners[2],1])))
        boundaryData[offset + 2,1]=strcat('SE-UpperPly-CornerNode,1,,',num2str(dot(epsxx,nodes[Ncorners[2],1])))
        boundaryData[offset + 3,1]=strcat('NE-Matrix-CornerNode,1,,',num2str(dot(epsxx,nodes[Ncorners[2],1])))
        boundaryData[offset + 4,1]=strcat('LeftSide-UpperPly-Nodes-without-Corners,1,,',num2str(dot(- epsxx,nodes[Ncorners[2],1])))
        boundaryData[offset + 5,1]=strcat('SW-UpperPly-CornerNode,1,,',num2str(dot(- epsxx,nodes[Ncorners[2],1])))
        boundaryData[offset + 6,1]=strcat('NW-Matrix-CornerNode,1,,',num2str(dot(- epsxx,nodes[Ncorners[2],1])))
    
    if isLowerBounded:
        offset=length(boundaryData)
        boundaryData[offset + 1,1]=strcat('RightSide-LowerPly-Nodes-without-Corners,1,,',num2str(dot(epsxx,nodes[Ncorners[2],1])))
        boundaryData[offset + 2,1]=strcat('NE-LowerPly-CornerNode,1,,',num2str(dot(epsxx,nodes[Ncorners[2],1])))
        boundaryData[offset + 3,1]=strcat('SE-Matrix-CornerNode,1,,',num2str(dot(epsxx,nodes[Ncorners[2],1])))
        boundaryData[offset + 4,1]=strcat('LeftSide-LowerPly-Nodes-without-Corners,1,,',num2str(dot(- epsxx,nodes[Ncorners[2],1])))
        boundaryData[offset + 5,1]=strcat('NW-LowerPly-CornerNode,1,,',num2str(dot(- epsxx,nodes[Ncorners[2],1])))
        boundaryData[offset + 6,1]=strcat('SW-Matrix-CornerNode,1,,',num2str(dot(- epsxx,nodes[Ncorners[2],1])))
    
    writeABQboundary(abqpath,'none','none','none','none','none','MOD','none','none','DISPLACEMENT','none','none','none',boundaryData,'')
    if dT != 0:
        writeABQtemperature(abqpath,'none','none','MOD','none','none','none','none','none','none','none','none','none','none','none','none',cellarray([strcat('All-Nodes,',num2str(dT))]),'')
    
    if solverChoice == 1:
        if interfaceDef == 1:
            if deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
                writeABQdebond(abqpath,'Fiber-Surface','Matrix-AtFiberInterface-Surface','none','none','BOTH','none',cellarray([]),'')
                #             writeABQfracturecriterion(abqpath,'none','none','VCCT','none','BK','none','none','none','none','none','none',...
#                                       {strcat(num2str(GIc*unitConvFactor(13), '#10.5e'),', ',num2str(GIIc*unitConvFactor(13), '#10.5e'),', ',num2str(GIIIc*unitConvFactor(13), '#10.5e'),',',num2str(eta, '#10.5e'))},...
#                                       'GIc GIIc GIIIc eta');
                writeABQfracturecriterion(abqpath,'none','none','VCCT','none','POWER','none','none','none','none','none','none',cellarray([strcat(num2str(dot(dot(10,GIc),unitConvFactor[13]),'%10.5e'),', ',num2str(dot(dot(10,GIIc),unitConvFactor[13]),'%10.5e'),', ',num2str(dot(dot(10,GIIIc),unitConvFactor[13]),'%10.5e'),',1.0,1.0,1.0')]),'GIc GIIc GIIIc am an ao')
        else:
            if interfaceDef == 2 or interfaceDef == 3:
                if deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
                    writeABQdebond(abqpath,'Fiber-Surface-Debond','Matrix-Surface-Debond','none','none','BOTH','none',cellarray([]),'')
                    writeABQfracturecriterion(abqpath,'none','none','VCCT','none','BK','none','none','none','none','none','none',cellarray([strcat(num2str(dot(GIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIIc,unitConvFactor[13]),'%10.5e'),',',num2str(eta,'%10.5e'))]),'GIc GIIc GIIIc eta')
    else:
        if solverChoice == 3:
            writeABQenrichmentactivation(abqpath,'MatrixFracture','ON','none',cellarray([]),'')
        else:
            if solverChoice == 4:
                if deltatheta < pi:
                    writeABQdebond(abqpath,'Fiber-Surface','Matrix-AtFiberInterface-Surface','none','none','BOTH','none',cellarray([]),'')
                    writeABQfracturecriterion(abqpath,'none','none','VCCT','none','BK','none','none','none','none','none','none',cellarray([strcat(num2str(dot(GIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIIc,unitConvFactor[13]),'%10.5e'),',',num2str(eta,'%10.5e'))]),'GIc GIIc GIIIc eta')
                writeABQenrichmentactivation(abqpath,'MatrixFracture','ON','none',cellarray([]),'')
    
    ## OUTPUT SECTION
    
    writeABQoutsec(abqpath)
    # contour integral
    
    if logical_not(isCohesive) and deltatheta > 0 and nContInt > - 1:
        x=nodes[lowerFiberCrackTip,1]
        y=nodes[lowerFiberCrackTip,2]
        if x > 0 and y > 0:
            alpha=atan(y / x)
            qx=- sin(alpha)
            qy=cos(alpha)
        else:
            if x < 0 and y > 0:
                alpha=pi + atan(y / x)
                qx=- sin(alpha)
                qy=cos(alpha)
            else:
                if x < 0 and y < 0:
                    alpha=pi + atan(y / x)
                    qx=sin(alpha)
                    qy=- cos(alpha)
                else:
                    if x > 0 and y < 0:
                        alpha=atan(y / x)
                        qx=sin(alpha)
                        qy=- cos(alpha)
                    else:
                        if x == 0 and y > 0:
                            qx=- 1
                            qy=0
                        else:
                            if x == 0 and y < 0:
                                qx=- 1
                                qy=0
                            else:
                                if x > 0 and y == 0:
                                    qx=0
                                    qy=1
                                else:
                                    if x < 0 and y == 0:
                                        qx=0
                                        qy=1
        writeABQcontourintegral(abqpath,num2str(nContInt),'none','none','none','1','none','BOTH','none','none','J','none',cellarray([strcat('ContourIntegralCrackTip1-Nodes,',num2str(qx),',',num2str(qy))]),'Node set name (The node set must contain all the nodes at one position on the crack front), qx-direction cosine of the virtual crack extension direction, qy-direction cosine of the virtual crack extension direction')
        x=nodes[upperFiberCrackTip,1]
        y=nodes[upperFiberCrackTip,2]
        if x > 0 and y > 0:
            alpha=atan(y / x)
            qx=- sin(alpha)
            qy=cos(alpha)
        else:
            if x < 0 and y > 0:
                alpha=pi + atan(y / x)
                qx=- sin(alpha)
                qy=cos(alpha)
            else:
                if x < 0 and y < 0:
                    alpha=pi + atan(y / x)
                    qx=sin(alpha)
                    qy=- cos(alpha)
                else:
                    if x > 0 and y < 0:
                        alpha=atan(y / x)
                        qx=sin(alpha)
                        qy=- cos(alpha)
                    else:
                        if x == 0 and y > 0:
                            qx=- 1
                            qy=0
                        else:
                            if x == 0 and y < 0:
                                qx=- 1
                                qy=0
                            else:
                                if x > 0 and y == 0:
                                    qx=0
                                    qy=1
                                else:
                                    if x < 0 and y == 0:
                                        qx=0
                                        qy=1
        writeABQcontourintegral(abqpath,num2str(nContInt),'none','none','none','1','none','BOTH','none','none','J','none',cellarray([strcat('ContourIntegralCrackTip2-Nodes,',num2str(qx),',',num2str(qy))]),'Node set name (The node set must contain all the nodes at one position on the crack front), qx-direction cosine of the virtual crack extension direction, qy-direction cosine of the virtual crack extension direction')
    
    # output to .fil
    
    if requestFIL:
        writeABQfileformat(abqpath,'ASCII','none',cellarray([]),'')
        if deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
            if 1 == interfaceDef:
                writeABQcontactfile(abqpath,'none','Fiber-Surface','none','Matrix-AtFiberInterface-Surface',cellarray([]),'none')
            else:
                if 2 == interfaceDef:
                    writeABQcontactfile(abqpath,'none','Fiber-Surface-Debond','none','Matrix-Surface-Debond',cellarray([]),'none')
                    writeABQcontactfile(abqpath,'none','Fiber-Surface-Tied','none','Matrix-Surface-Tied',cellarray([]),'none')
                else:
                    if 3 == interfaceDef:
                        writeABQcontactfile(abqpath,'none','Fiber-Surface-Debond','none','Matrix-Surface-Debond',cellarray([]),'none')
                    else:
                        if 4 == interfaceDef:
                            writeABQcontactfile(abqpath,'none','Fiber-Surface-Debond','none','Matrix-Surface-Debond',cellarray([]),'none')
                            writeABQcontactfile(abqpath,'none','Fiber-Surface-Tied','none','Matrix-Surface-Tied',cellarray([]),'none')
                        else:
                            if 5 == interfaceDef:
                                writeABQcontactfile(abqpath,'none','Fiber-Surface-Debond','none','Matrix-Surface-Debond',cellarray([]),'none')
        else:
            writeABQcontactfile(abqpath,'none','Fiber-Surface','none','Matrix-AtFiberInterface-Surface',cellarray([]),'none')
        if isLowerBounded:
            writeABQcontactfile(abqpath,'none','LowerPly-AtMatrixInterface-Surface','none','Matrix-AtLowerPlyInterface-Surface',cellarray([]),'none')
        if isUpperBounded:
            writeABQcontactfile(abqpath,'none','UpperPly-AtMatrixInterface-Surface','none','Matrix-AtUpperPlyInterface-Surface',cellarray([]),'none')
        writeABQelfile(abqpath,'YES','Matrix-Elements','none','none','none','none','none',cellarray([['COORD,S,SP,SINV,E,EP,NE,NEP'],['LE,LEP,EE,EEP,IE,IEP,THE,THEP'],['ENER,TEMP']]),'none')
        writeABQelfile(abqpath,'YES','Fiber-Elements','none','none','none','none','none',cellarray([['COORD,S,SP,SINV,E,EP,NE,NEP'],['LE,LEP,EE,EEP,IE,IEP,THE,THEP'],['ENER,TEMP']]),'none')
        if isLowerBounded:
            writeABQelfile(abqpath,'YES','LowerPly-Elements','none','none','none','none','none',cellarray([['COORD,S,SP,SINV,E,EP,NE,NEP'],['LE,LEP,EE,EEP,IE,IEP,THE,THEP'],['ENER,TEMP']]),'none')
        if isUpperBounded:
            writeABQelfile(abqpath,'YES','UpperPly-Elements','none','none','none','none','none',cellarray([['COORD,S,SP,SINV,E,EP,NE,NEP'],['LE,LEP,EE,EEP,IE,IEP,THE,THEP'],['ENER,TEMP']]),'none')
        if isCohesive:
            writeABQelfile(abqpath,'YES','Cohesive-Elements','none','none','none','none','none',cellarray(['DMICRT']),'none')
            writeABQelfile(abqpath,'YES','Cohesive-Elements','none','none','none','none','none',cellarray(['SDEG']),'none')
            writeABQelfile(abqpath,'YES','Cohesive-Elements','none','none','none','none','none',cellarray(['STATUS']),'none')
        if interfaceDef == 6:
            writeABQelfile(abqpath,'YES','Connector-Elements','none','none','none','none','none',cellarray(['CRF1']),'none')
            writeABQelfile(abqpath,'YES','Connector-Elements','none','none','none','none','none',cellarray(['CRF2']),'none')
            writeABQelfile(abqpath,'YES','Connector-Elements','none','none','none','none','none',cellarray(['CRF3']),'none')
        writeABQenergyfile(abqpath,'Matrix-Elements','none',cellarray([]),'none')
        writeABQenergyfile(abqpath,'Fiber-Elements','none',cellarray([]),'none')
        if isLowerBounded:
            writeABQenergyfile(abqpath,'LowerPly-Elements','none',cellarray([]),'none')
        if isLowerBounded:
            writeABQenergyfile(abqpath,'UpperPly-Elements','none',cellarray([]),'none')
        writeABQnodefile(abqpath,'none','YES','none','none','All-Nodes',cellarray(['COORD,U,RF,CF,TF,VF']),'none')
        if interfaceDef == 5:
            writeABQnodefile(abqpath,'none','YES','none','none','Dummy-Nodes',cellarray(['COORD,U,RF,CF,TF,VF']),'none')
        if dT != 0:
            writeABQnodefile(abqpath,'none','YES','none','none','All-Nodes',cellarray(['NT']),'none')
    
    # output to .dat
    
    if requestDAT:
        if deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
            if 1 == interfaceDef:
                writeABQcontactprint(abqpath,'none','Fiber-Surface','none','Matrix-AtFiberInterface-Surface','none','none',cellarray([]),'none')
            else:
                if 2 == interfaceDef:
                    writeABQcontactprint(abqpath,'none','Fiber-Surface-Debond','none','Matrix-Surface-Debond','none','none',cellarray([]),'none')
                    writeABQcontactprint(abqpath,'none','Fiber-Surface-Tied','none','Matrix-Surface-Tied','none','none',cellarray([]),'none')
                else:
                    if 3 == interfaceDef:
                        writeABQcontactprint(abqpath,'none','Fiber-Surface-Debond','none','Matrix-Surface-Debond','none','none',cellarray([]),'none')
                    else:
                        if 4 == interfaceDef:
                            writeABQcontactprint(abqpath,'none','Fiber-Surface-Debond','none','Matrix-Surface-Debond','none','none',cellarray([]),'none')
                            writeABQcontactprint(abqpath,'none','Fiber-Surface-Tied','none','Matrix-Surface-Tied','none','none',cellarray([]),'none')
                        else:
                            if 5 == interfaceDef:
                                writeABQcontactprint(abqpath,'none','Fiber-Surface-Debond','none','Matrix-Surface-Debond','none','none',cellarray([]),'none')
        else:
            writeABQcontactprint(abqpath,'none','Fiber-Surface','none','Matrix-AtFiberInterface-Surface','none','none',cellarray([]),'none')
        if isLowerBounded:
            writeABQcontactprint(abqpath,'none','LowerPly-AtMatrixInterface-Surface','none','Matrix-AtLowerPlyInterface-Surface','none','none',cellarray([]),'none')
        if isUpperBounded:
            writeABQcontactprint(abqpath,'none','UpperPly-AtMatrixInterface-Surface','none','Matrix-AtUpperPlyInterface-Surface','none','none',cellarray([]),'none')
        # Abaqus accepts max 9 output requests in a single table
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['COORD']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['S']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['SP']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['SINV']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['E']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['EP']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['NE']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['NEP']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['LE']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['LEP']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['EE']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['EEP']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['IE']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['IEP']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['THE']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['THEP']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['ENER']),'none')
        writeABQelprint(abqpath,'Matrix-Elements','none','none','none','none','none','none','none',cellarray(['TEMP']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['COORD']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['S']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['SP']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['SINV']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['E']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['EP']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['NE']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['NEP']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['LE']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['LEP']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['EE']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['EEP']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['IE']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['IEP']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['THE']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['THEP']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['ENER']),'none')
        writeABQelprint(abqpath,'Fiber-Elements','none','none','none','none','none','none','none',cellarray(['TEMP']),'none')
        if isLowerBounded:
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['COORD']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['S']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['SP']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['SINV']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['E']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['EP']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['NE']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['NEP']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['LE']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['LEP']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['EE']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['EEP']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['IE']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['IEP']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['THE']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['THEP']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['ENER']),'none')
            writeABQelprint(abqpath,'LowerPly-Elements','none','none','none','none','none','none','none',cellarray(['TEMP']),'none')
        if isUpperBounded:
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['COORD']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['S']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['SP']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['SINV']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['E']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['EP']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['NE']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['NEP']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['LE']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['LEP']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['EE']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['EEP']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['IE']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['IEP']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['THE']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['THEP']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['ENER']),'none')
            writeABQelprint(abqpath,'UpperPly-Elements','none','none','none','none','none','none','none',cellarray(['TEMP']),'none')
        if isCohesive:
            writeABQelprint(abqpath,'Cohesive-Elements','none','none','none','none','none','none','none',cellarray(['MAXSCRT']),'none')
            writeABQelprint(abqpath,'Cohesive-Elements','none','none','none','none','none','none','none',cellarray(['QUADSCRT']),'none')
            writeABQelprint(abqpath,'Cohesive-Elements','none','none','none','none','none','none','none',cellarray(['DMICRT']),'none')
            writeABQelprint(abqpath,'Cohesive-Elements','none','none','none','none','none','none','none',cellarray(['SDEG']),'none')
            writeABQelprint(abqpath,'Cohesive-Elements','none','none','none','none','none','none','none',cellarray(['STATUS']),'none')
        if interfaceDef == 6:
            writeABQelprint(abqpath,'Connector-Elements','none','none','none','none','none','none','none',cellarray(['CRF1']),'none')
            writeABQelprint(abqpath,'Connector-Elements','none','none','none','none','none','none','none',cellarray(['CRF2']),'none')
            writeABQelprint(abqpath,'Connector-Elements','none','none','none','none','none','none','none',cellarray(['CRF3']),'none')
        writeABQenergyprint(abqpath,'Matrix-Elements','none',cellarray([]),'none')
        writeABQenergyprint(abqpath,'Fiber-Elements','none',cellarray([]),'none')
        if isLowerBounded:
            writeABQenergyprint(abqpath,'LowerPly-Elements','none',cellarray([]),'none')
        if isLowerBounded:
            writeABQenergyprint(abqpath,'UpperPly-Elements','none',cellarray([]),'none')
        writeABQnodeprint(abqpath,'none','YES','none','none','All-Nodes','NO','NO',cellarray(['COORD']),'none')
        writeABQnodeprint(abqpath,'none','YES','none','none','All-Nodes','NO','NO',cellarray(['U,RF']),'none')
        writeABQnodeprint(abqpath,'none','YES','none','none','All-Nodes','NO','NO',cellarray(['CF,TF']),'none')
        if interfaceDef == 5:
            writeABQnodeprint(abqpath,'none','YES','none','none','Dummy-Nodes','NO','NO',cellarray(['COORD']),'none')
            writeABQnodeprint(abqpath,'none','YES','none','none','Dummy-Nodes','NO','NO',cellarray(['U,RF']),'none')
        if dT != 0:
            writeABQnodeprint(abqpath,'none','YES','none','none','All-Nodes','NO','NO',cellarray(['NT']),'none')
    
    # output to .odb
    
    if requestODB:
        writeABQoutput(abqpath,'YES','none','none','none','none','none','none','none','none','none','none','none','none',cellarray([]),'none')
        writeABQoutput(abqpath,'none','FIELD','none','none','none','FieldData','10','none','none','none','none','ALL','none',cellarray([]),'none')
        writeABQoutput(abqpath,'none','none','HISTORY','none','none','HistoryData','none','none','none','none','none','none','none',cellarray([]),'none')
        if isUpperBounded:
            writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','UpperPly-AtMatrixInterface-Surface','Matrix-AtUpperPlyInterface-Surface',cellarray([]),'none')
        if isLowerBounded:
            writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','LowerPly-AtMatrixInterface-Surface','Matrix-AtLowerPlyInterface-Surface',cellarray([]),'none')
        if isCohesive:
            writeABQelementoutput(abqpath,'Cohesive-Elements','none','YES','none','none','none','none',cellarray(['MAXSCRT,QUADSCRT,DMICRT,SDEG,STATUS']),'none')
        else:
            if deltatheta > 0 and deltatheta < dot((1 - 0.25 / N1),pi):
                if 1 == interfaceDef:
                    writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','Fiber-Surface','Matrix-AtFiberInterface-Surface',cellarray([]),'none')
                    writeABQcontactoutput(abqpath,'none','none','none','none','none','none','Fiber-Surface','Matrix-AtFiberInterface-Surface',cellarray(['DBT,DBS,DBSF,BDSTAT,CSDMG,OPENBC,CRSTS,ENRRT,EFENRRTR']),'none')
                else:
                    if 2 == interfaceDef:
                        writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','Fiber-Surface-Debond','Matrix-Surface-Debond',cellarray([]),'none')
                        writeABQcontactoutput(abqpath,'none','none','none','none','none','none','Fiber-Surface-Debond','Matrix-Surface-Debond',cellarray(['DBT,DBS,DBSF,BDSTAT,CSDMG,OPENBC,CRSTS,ENRRT,EFENRRTR']),'none')
                        writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','Fiber-Surface-Tied','Matrix-Surface-Tied',cellarray([]),'none')
                    else:
                        if 3 == interfaceDef:
                            writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','Fiber-Surface-Debond','Matrix-Surface-Debond',cellarray([]),'none')
                            writeABQcontactoutput(abqpath,'none','none','none','none','none','none','Fiber-Surface-Debond','Matrix-Surface-Debond',cellarray(['DBT,DBS,DBSF,BDSTAT,CSDMG,OPENBC,CRSTS,ENRRT,EFENRRTR']),'none')
                        else:
                            if 4 == interfaceDef:
                                writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','Fiber-Surface-Debond','Matrix-Surface-Debond',cellarray([]),'none')
                                writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','Fiber-Surface-Tied','Matrix-Surface-Tied',cellarray([]),'none')
                                writeABQnodeoutput(abqpath,'FiberSurface-Nodes','none','none','none','none',cellarray(['U']),'none')
                                writeABQnodeoutput(abqpath,'FiberSurface-Nodes','none','none','none','none',cellarray(['RF']),'none')
                                writeABQnodeoutput(abqpath,'FiberSurface-Nodes','none','none','none','none',cellarray(['TF']),'none')
                                writeABQnodeoutput(abqpath,'MatrixSurfaceAtFiberInterface-Nodes','none','none','none','none',cellarray(['U']),'none')
                                writeABQnodeoutput(abqpath,'MatrixSurfaceAtFiberInterface-Nodes','none','none','none','none',cellarray(['RF']),'none')
                                writeABQnodeoutput(abqpath,'MatrixSurfaceAtFiberInterface-Nodes','none','none','none','none',cellarray(['TF']),'none')
                            else:
                                if 5 == interfaceDef:
                                    writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','Fiber-Surface-Debond','Matrix-Surface-Debond',cellarray([]),'none')
                                    writeABQnodeoutput(abqpath,'FiberSurface-Nodes','none','none','none','none',cellarray(['U']),'none')
                                    writeABQnodeoutput(abqpath,'FiberSurface-Nodes','none','none','none','none',cellarray(['RF']),'none')
                                    writeABQnodeoutput(abqpath,'FiberSurface-Nodes','none','none','none','none',cellarray(['TF']),'none')
                                    writeABQnodeoutput(abqpath,'MatrixSurfaceAtFiberInterface-Nodes','none','none','none','none',cellarray(['U']),'none')
                                    writeABQnodeoutput(abqpath,'MatrixSurfaceAtFiberInterface-Nodes','none','none','none','none',cellarray(['RF']),'none')
                                    writeABQnodeoutput(abqpath,'MatrixSurfaceAtFiberInterface-Nodes','none','none','none','none',cellarray(['TF']),'none')
            else:
                writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','Fiber-Surface','Matrix-AtFiberInterface-Surface',cellarray([]),'none')
        if solverChoice == 3 or solverChoice == 4:
            writeABQnodeoutput(abqpath,'Matrix-Nodes','none','none','none','none',cellarray(['PHILSM,PSILSM']),'none')
            #writeABQcontactoutput(abqpath,'none','none','MatrixCrackInterfaces','none','none','none','none','none',{'CRKDISP,CSDMG,CRKSTRESS'},'none');
        #end
            writeABQelementoutput(abqpath,'Matrix-Elements','none','YES','none','none','none','none',cellarray(['STATUSXFEM']),'none')
        if solverChoice == 4:
            writeABQelementoutput(abqpath,'Matrix-Elements','none','YES','none','none','none','none',cellarray(['ENRRTXFEM']),'none')
        if interfaceDef == 6:
            writeABQelementoutput(abqpath,'Connector-Elements','none','YES','none','none','none','none',cellarray(['CRF1']),'none')
            writeABQelementoutput(abqpath,'Connector-Elements','none','YES','none','none','none','none',cellarray(['CRF2']),'none')
            writeABQelementoutput(abqpath,'Connector-Elements','none','YES','none','none','none','none',cellarray(['CRF3']),'none')
        writeABQnodeoutput(abqpath,'RightSide-Nodes-without-Corners','none','none','none','none',cellarray(['U,RF']),'none')
        writeABQnodeoutput(abqpath,'SE-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
        writeABQnodeoutput(abqpath,'NE-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
        writeABQnodeoutput(abqpath,'LeftSide-Nodes-without-Corners','none','none','none','none',cellarray(['U,RF']),'none')
        writeABQnodeoutput(abqpath,'SW-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
        writeABQnodeoutput(abqpath,'NW-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
        if isUpperBounded:
            writeABQnodeoutput(abqpath,'RightSide-UpperPly-Nodes-without-Corners','none','none','none','none',cellarray(['U,RF']),'none')
            writeABQnodeoutput(abqpath,'SE-UpperPly-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
            writeABQnodeoutput(abqpath,'NE-Matrix-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
            writeABQnodeoutput(abqpath,'LeftSide-UpperPly-Nodes-without-Corners','none','none','none','none',cellarray(['U,RF']),'none')
            writeABQnodeoutput(abqpath,'SW-UpperPly-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
            writeABQnodeoutput(abqpath,'NW-Matrix-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
        if isLowerBounded:
            writeABQnodeoutput(abqpath,'RightSide-LowerPly-Nodes-without-Corners','none','none','none','none',cellarray(['U,RF']),'none')
            writeABQnodeoutput(abqpath,'NE-LowerPly-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
            writeABQnodeoutput(abqpath,'SE-Matrix-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
            writeABQnodeoutput(abqpath,'LeftSide-LowerPly-Nodes-without-Corners','none','none','none','none',cellarray(['U,RF']),'none')
            writeABQnodeoutput(abqpath,'NW-LowerPly-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
            writeABQnodeoutput(abqpath,'SW-Matrix-CornerNode','none','none','none','none',cellarray(['U,RF']),'none')
        if interfaceDef == 5:
            writeABQnodeoutput(abqpath,'Dummy-Nodes','none','none','none','none',cellarray(['COORD']),'none')
            writeABQnodeoutput(abqpath,'Dummy-Nodes','none','none','none','none',cellarray(['U,RF']),'none')
    
    writeABQendstep(abqpath)
    ##
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                        Write .json files                              -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
##
    
    #jsonID = fopen(fullfile(folder,projectName,'json',strcat(projectName,'.json')),'w');
#fclose(jsonID);
    
    #-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                        Write .csv files                               -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
##
    
    csvFileName=fullfile(folder,projectName,'csv',strcat(projectName,'.csv'))
    csvID=fopen(csvFileName,'w')
    fclose(csvID)
    csvID=fopen(csvFileName,'a')
    fprintf(csvID,cat('Model Code, ',model,'\\n'))
    fprintf(csvID,cat('RVE Type, ',modeltype,'\\n'))
    fprintf(csvID,cat('Space Dimension, ','2D','\\n'))
    fprintf(csvID,cat('Stacking Sequence, ',stackingSequence,'\\n'))
    fprintf(csvID,cat('Modeled Ply Angle [deg], ','90 deg','\\n'))
    fprintf(csvID,cat('Bounding Ply Angle [deg], ',num2str(dot(phi,180) / pi),' deg','\\n'))
    fprintf(csvID,cat('Fiber radius Rf[10e-6 m], ',num2str(Rf),'\\n'))
    fprintf(csvID,cat('Side helf length L [10e-6 m], ',num2str(dot(dot(0.5,Rf),sqrt(pi / Vff))),'\\n'))
    fprintf(csvID,cat('L/Rf [10e-6 m], ',num2str(dot(0.5,sqrt(pi / Vff))),'\\n'))
    fprintf(csvID,cat('Fiber radius [10e-6 m], ',num2str(Rf),'\\n'))
    fprintf(csvID,cat('Fiber Volume Fraction [-], ',num2str(Vff),'\\n'))
    fprintf(csvID,cat('Plies Thickness Ratio [-], ',plyThickness,'\\n'))
    fprintf(csvID,cat('Crack Angular Position [deg], ',num2str(dot(theta,180) / pi),' deg','\\n'))
    fprintf(csvID,cat('Crack Angular Aperture [deg], ',num2str(dot(deltatheta,180) / pi),' deg','\\n'))
    fprintf(csvID,cat('Applied Axial Strain, ',num2str(epsxx),'\\n'))
    fprintf(csvID,cat('Applied Temperature Jump, ',num2str(dT),'\\n'))
    fprintf(csvID,cat('Fiber, ',fiber,'\\n'))
    fprintf(csvID,cat('Matrix, ',matrix,'\\n'))
    fprintf(csvID,cat('Lamina Properties Algorithm, ',lamPropAlg,'\\n'))
    fprintf(csvID,cat('Analysis Type, ',analysisType,'\\n'))
    fprintf(csvID,cat('Interface Formulation, ',interfaceFormulation,'\\n'))
    fprintf(csvID,cat('Solver(s), ',solvers,'\\n'))
    fprintf(csvID,cat('Elements\' Type, ',eltype,'\\n'))
    fprintf(csvID,cat('Elements\' Order, ',elorder,'\\n'))
    fprintf(csvID,cat('Elements\' ID, ',elId,'\\n'))
    fprintf(csvID,cat('Mesh optimization, ',meshOptimization,'\\n'))
    fprintf(csvID,cat('f1, ',num2str(f1),'\\n'))
    fprintf(csvID,cat('f2, ',num2str(f2),'\\n'))
    fprintf(csvID,cat('f3, ',num2str(f3),'\\n'))
    fprintf(csvID,cat('Nalpha, ',num2str(N1),'\\n'))
    fprintf(csvID,cat('Nbeta, ',num2str(N2),'\\n'))
    fprintf(csvID,cat('Ngamma, ',num2str(N3),'\\n'))
    fprintf(csvID,cat('Ndelta, ',num2str(N4),'\\n'))
    fprintf(csvID,cat('Neps, ',num2str(N5),'\\n'))
    fprintf(csvID,cat('Nzeta, ',num2str(N6),'\\n'))
    fprintf(csvID,cat('Total Number of Nodes, ',num2str(nodesTOT),'\\n'))
    fprintf(csvID,cat('Total Number of Elements, ',num2str(elTOT),'\\n'))
    fprintf(csvID,cat('Angular discretization at interface, ',num2str(360 / (dot(4,N1))),' deg','\\n'))
    fprintf(csvID,cat('Conversion factor of units of measurement with respect to SI ','\\n'))
    fprintf(csvID,cat('length, SI [m], ',num2str(unitConvFactor[1],'%10.5e'),'\\n'))
    fprintf(csvID,cat('mass, SI [kg], ',num2str(unitConvFactor[2],'%10.5e'),'\\n'))
    fprintf(csvID,cat('time, SI [s], ',num2str(unitConvFactor[3],'%10.5e'),'\\n'))
    fprintf(csvID,cat('force, SI [N], ',num2str(unitConvFactor[15],'%10.5e'),'\\n'))
    fprintf(csvID,cat('electric current, SI [A], ',num2str(unitConvFactor[4],'%10.5e'),'\\n'))
    fprintf(csvID,cat('thermodynamic temperature, SI [K], ',num2str(unitConvFactor[5],'%10.5e'),'\\n'))
    fprintf(csvID,cat('amount of substance, SI [mol], ',num2str(unitConvFactor[6],'%10.5e'),'\\n'))
    fprintf(csvID,cat('luminous intensity, SI [cd], ',num2str(unitConvFactor[7],'%10.5e'),'\\n'))
    fprintf(csvID,cat('density, SI [kg/m^3], ',num2str(unitConvFactor[8],'%10.5e'),'\\n'))
    fprintf(csvID,cat('pressure/stress, SI [Pa], ',num2str(unitConvFactor[9],'%10.5e'),'\\n'))
    fprintf(csvID,cat('thermal expansion, SI [m/(m*K)], ',num2str(unitConvFactor[10],'%10.5e'),'\\n'))
    fprintf(csvID,cat('thermal conductivity, SI [W/(m*K)], ',num2str(unitConvFactor[11],'%10.5e'),'\\n'))
    fprintf(csvID,cat('specific heat capacity, SI [J/(kg*K)], ',num2str(unitConvFactor[12],'%10.5e'),'\\n'))
    fprintf(csvID,cat('energy release rate, SI [J/m^2], ',num2str(unitConvFactor[13],'%10.5e'),'\\n'))
    fprintf(csvID,cat('interface stiffness, SI [N/m^3], ',num2str(unitConvFactor[14],'%10.5e'),'\\n'))
    fclose(csvID)
    ##
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                        Write .tex files                               -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
    
    #latexID = fopen(fullfile(folder,projectName,'latex',strcat(projectName,'.tex')),'w');
#fclose(latexID);
    
    #-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                        Write .pdf files                               -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
    
    return projectName
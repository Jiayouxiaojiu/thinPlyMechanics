# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def bmip_mesh_create_project(folder=None,matDBfolder=None,index=None,isCohesive=None,isSymm=None,x0=None,y0low=None,y0up=None,lx1=None,lx2=None,ly1=None,ly2=None,Nx1=None,Nx2=None,Ny1=None,Ny2=None,xA=None,deltaA=None,lowerMaterial=None,upperMaterial=None,interfaceDef=None,epsyy=None,dT=None,unitConvFactor=None,element=None,order=None,generalized=None,requestDAT=None,requestFIL=None,requestODB=None,*args,**kwargs):
    varargin = bmip_mesh_create_project.varargin
    nargin = bmip_mesh_create_project.nargin

    ##
#==============================================================================
# Copyright (c) 2016-2017 Universit de Lorraine & Lule tekniska universitet
# Author: Luca Di Stasio <luca.distasio@gmail.com>
#                        <luca.distasio@ingpec.eu>
    
    # Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
    
    
    # Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in
# the documentation and/or other materials provided with the distribution
# Neither the name of the Universit de Lorraine or Lule tekniska universitet
# nor the names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
    
    # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#==============================================================================
    
    #  DESCRIPTION
    
    #  A script to generate the project files for RVE Finite Elements
#  Simulations:
    
    #   .json
#   .csv
#   .tex
#   .inp
    
    #  unitConvFactor(1)  => length
#  unitConvFactor(2)  => mass
#  unitConvFactor(3)  => time
#  unitConvFactor(4)  => electric current
#  unitConvFactor(5)  => thermodynamic temperature
#  unitConvFactor(6)  => amount of substance
#  unitConvFactor(7)  => luminous intensity
#  unitConvFactor(8)  => density
#  unitConvFactor(9)  => pressure/stress
#  unitConvFactor(10) => thermal expansion
#  unitConvFactor(11) => thermal conductivity
#  unitConvFactor(12) => specific heat capacity
#  unitConvFactor(13) => fracture toughness
#  unitConvFactor(14) => interface stiffness
#  unitConvFactor(15) => force
    
    ##
    
    #-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                     Preliminary Calculations                          -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
##
    nodesTOT=0
    elTOT=0
    if isSymm:
        nodesTOT=dot(2,(dot((Nx1 + Nx2 + 1),(Ny1 + Ny2 + 1))))
        elTOT=dot(2,(dot((Nx1 + Nx2),(Ny1 + Ny2))))
    else:
        nodesTOT=dot(2,(dot((Nx1 + dot(2,Nx2) + 1),(Ny1 + Ny2 + 1))))
        elTOT=dot(2,(dot((Nx1 + dot(2,Nx2)),(Ny1 + Ny2))))
    
    modelcode=strcat('VL4FC-2DbmipCC-',num2str(isCohesive),'-',num2str(isSymm),'-',num2str(x0),'-',num2str(y0low),'-',num2str(y0up),'-',num2str(lx1),'-',num2str(lx2),'-',num2str(ly1),'-',num2str(ly2),'-',num2str(xA),'-',num2str(deltaA),'-',num2str(Nx1),'-',num2str(Nx2),'-',num2str(Ny1),'-',num2str(Ny2),'-',num2str(lowerMaterial),'-',num2str(upperMaterial),'-',num2str(interfaceDef),'-',num2str(epsyy),'-',num2str(dT),'-',num2str(element),'-',num2str(order),'-',num2str(generalized),'-',num2str(nodesTOT),'-',num2str(elTOT))
    #-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                          I/O settings                                 -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
##
    
    projectName=''
    if logical_not(checkIndex(folder,strcat(index,'.csv'),modelcode)):
        projectName=incrementName(folder,strcat(index,'.csv'))
        createWD(folder,projectName)
        fileId=fopen(fullfile(folder,strcat(index,'.csv')),'a')
        fprintf(fileId,'%s',strcat(projectName,',',modelcode))
        fprintf(fileId,'\\n')
        fclose(fileId)
    else:
        projectName=strcat('A model with this set of parameters already exists. See: ',getModelFolder(folder,strcat(index,'.csv'),modelcode))
        return projectName
    
    ##
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                        Mesh Generation                                -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
##
    
    if isSymm:
        Nx=matlabarray(cat([Nx1],[Nx2]))
        lx=matlabarray(cat([lx1],[lx2]))
        w=lx1 + lx2
    else:
        Nx=matlabarray(cat([Nx2],[Nx1],[Nx2]))
        lx=matlabarray(cat([lx2],[lx1],[lx2]))
        w=lx1 + dot(2,lx2)
    
    Ny=matlabarray(cat([Ny1],[Ny2]))
    ly=matlabarray(cat([ly1],[ly2]))
    h=ly1 + ly2
    allNodes,lowerHalfNodes,upperHalfNodes,lowerSWnode,lowerSEnode,lowerNEnode,lowerNWnode,lowerSOUTHsideNodes,lowerEASTsideNodes,lowerNORTHsideNodes,lowerWESTsideNodes,upperSWnode,upperSEnode,upperNEnode,upperNWnode,upperSOUTHsideNodes,upperEASTsideNodes,upperNORTHsideNodes,upperWESTsideNodes,lowerInterfaceNodes,lowerEASTboundedInterfaceNodes,lowerWESTboundedInterfaceNodes,lowerDEBONDInterfaceNodes,lowerEASTcrackTipNode,lowerWESTcrackTipNode,upperInterfaceNodes,upperEASTboundedInterfaceNodes,upperWESTboundedInterfaceNodes,upperDEBONDInterfaceNodes,upperEASTcrackTipNode,upperWESTcrackTipNode,allElements,lowerHalfElements,upperHalfElements,lowerInterfaceElements,upperInterfaceElements,lowerEASTboundedInterfaceElements,lowerWESTboundedInterfaceElements,lowerDEBONDInterfaceElements,lowerEASTcrackTipElement,lowerWESTcrackTipElement,upperEASTboundedInterfaceElements,upperWESTboundedInterfaceElements,upperDEBONDInterfaceElements,upperEASTcrackTipElement,upperWESTcrackTipElement,lowerSOUTHsideElements,upperNORTHsideElements=mesh_isotropic_bimaterial_plate(isCohesive,x0,y0low,y0up,lx,ly,Nx,Ny,xA,deltaA,nargout=48)
    ##
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
#-                        Write .inp file                                -#
#-------------------------------------------------------------------------#
#-------------------------------------------------------------------------#
##
# create the filepath
    abqpath=fullfile(folder,projectName,'abqinp',strcat(projectName,'.inp'))
    # create the file
    abqinpID=fopen(abqpath,'w')
    fclose(abqinpID)
    ## HEADER SECTION
    
    if 1 == lowerMaterial:
        lowMat='CarbonFiber'
    else:
        if 2 == lowerMaterial:
            lowMat='GlassFiber'
        else:
            lowMat='CarbonFiber'
    
    if 1 == upperMaterial:
        upMat='Epoxy'
    else:
        if 2 == upperMaterial:
            upMat='HDPE'
        else:
            upMat='Epoxy'
    
    if 1 == interfaceDef:
        interfaceFormulation='Contact with fracture interaction and debond growth'
    else:
        if 2 == interfaceDef:
            interfaceFormulation='Tied surfaces and Contact with debond fracture interaction at crack tips'
        else:
            if 3 == interfaceDef:
                interfaceFormulation='Equation-based continuity at surfaces and Contact with debond fracture interaction at crack tips'
            else:
                if 4 == interfaceDef:
                    interfaceFormulation='Tied surfaces'
                else:
                    if 5 == interfaceDef:
                        interfaceFormulation='Equation-based continuity at surfaces'
                    else:
                        if 6 == interfaceDef:
                            interfaceFormulation='Connector elements'
    
    if element == 1:
        eltype='Quadrilateral'
    else:
        if element == 2:
            eltype='Triangular'
        else:
            eltype='NA'
    
    if order == 1:
        elorder='1st'
    else:
        if order == 2:
            elorder='2nd'
        else:
            elorder='NA'
    
    if dT != 0:
        if generalized:
            if isCohesive:
                if element == 1 and order == 1:
                    elId='CPEG4T & COH2D4'
                else:
                    if element == 1 and order == 2:
                        elId='CPEG8T & COH2D4'
                    else:
                        if element == 2 and order == 1:
                            elId='CPEG3T & COH2D4'
                        else:
                            if element == 1 and order == 1:
                                elId='CPEG6MT & COH2D4'
                            else:
                                elId='NA'
            else:
                if element == 1 and order == 1:
                    elId='CPEG4T'
                else:
                    if element == 1 and order == 2:
                        elId='CPEG8T'
                    else:
                        if element == 2 and order == 1:
                            elId='CPEG3T'
                        else:
                            if element == 1 and order == 1:
                                elId='CPEG6MT'
                            else:
                                elId='NA'
        else:
            if isCohesive:
                if element == 1 and order == 1:
                    elId='CPE4T & COH2D4'
                else:
                    if element == 1 and order == 2:
                        elId='CPE8T & COH2D4'
                    else:
                        if element == 2 and order == 1:
                            elId='CPE3T & COH2D4'
                        else:
                            if element == 1 and order == 1:
                                elId='CPE6MT & COH2D4'
                            else:
                                elId='NA'
            else:
                if element == 1 and order == 1:
                    elId='CPE4T'
                else:
                    if element == 1 and order == 2:
                        elId='CPE8T'
                    else:
                        if element == 2 and order == 1:
                            elId='CPE3T'
                        else:
                            if element == 1 and order == 1:
                                elId='CPE6MT'
                            else:
                                elId='NA'
    else:
        if generalized:
            if isCohesive:
                if element == 1 and order == 1:
                    elId='CPEG4 & COH2D4'
                else:
                    if element == 1 and order == 2:
                        elId='CPEG8 & COH2D4'
                    else:
                        if element == 2 and order == 1:
                            elId='CPEG3 & COH2D4'
                        else:
                            if element == 2 and order == 2:
                                elId='CPEG6 & COH2D4'
                            else:
                                elId='NA'
            else:
                if element == 1 and order == 1:
                    elId='CPEG4'
                else:
                    if element == 1 and order == 2:
                        elId='CPEG8'
                    else:
                        if element == 2 and order == 1:
                            elId='CPEG3'
                        else:
                            if element == 2 and order == 2:
                                elId='CPEG6'
                            else:
                                elId='NA'
        else:
            if isCohesive:
                if element == 1 and order == 1:
                    elId='CPE4 & COH2D4'
                else:
                    if element == 1 and order == 2:
                        elId='CPE8 & COH2D4'
                    else:
                        if element == 2 and order == 1:
                            elId='CPE3 & COH2D4'
                        else:
                            if element == 2 and order == 2:
                                elId='CPE6 & COH2D4'
                            else:
                                elId='NA'
            else:
                if element == 1 and order == 1:
                    elId='CPE4'
                else:
                    if element == 1 and order == 2:
                        elId='CPE8'
                    else:
                        if element == 2 and order == 1:
                            elId='CPE3'
                        else:
                            if element == 2 and order == 2:
                                elId='CPE6'
                            else:
                                elId='NA'
    
    # write header
    header=cellarraycat('--                       Model Code: ',modelcode,'  --')],[cat('--                  Space Dimension: 2D','  --')],['--                                                                                                                             --'],[cat('--                            Width: ',num2str(w),'  --')],[cat('--                           Height: ',num2str(h),'  --')],[cat('--                  Crack\'s Length: ',num2str(deltaA),'  --')],[cat('--            Plate\'s Aspect Ratio: ',num2str(dot(0.5,w) / h),'  --')],[cat('-- Crack\'s Horizontal Aspect Ratio: ',num2str(deltaA / w),'  --')],[cat('--   Crack\'s Vertical Aspect Ratio: ',num2str(dot(0.5,deltaA) / h),'  --')],['--                                                                                                                             --'],[cat('--             Applied Axial Strain: ',num2str(epsyy),'  --')],['--                                                                                                                             --'],[cat('--         Applied Temperature Jump: ',num2str(dT),'  --')],['--                                                                                                                             --'],[cat('--                   Lower Material: ',lowMat,'  --')],[cat('--                   Upper Material: ',upMat,'  --')],['--                                                                                                                             --'],[cat('--            Interface Formulation: ',interfaceFormulation,'  --')],['--                                                                                                                             --'],[cat('--                  Elements\' Type: ',eltype,'  --')],[cat('--                 Elements\' Order: ',elorder,'  --')],[cat('--                    Elements\' ID: ',elId,'  --')],['--                                                                                                                             --'],[cat('--                              Nx fine: ',num2str(Nx1),'  --')],[cat('--                            Nx coarse: ',num2str(Nx2),'  --')],[cat('--                              Ny fine: ',num2str(Ny1),'  --')],[cat('--                            Ny coarse: ',num2str(Ny2),'  --')],[cat('--                Total Number of Nodes: ',num2str(nodesTOT),'  --')],[cat('--             Total Number of Elements: ',num2str(elTOT),'  --')],['--                                                                                                                             --'],['--       Conversion factor of units of measurement with respect to SI   --'],[cat('--                              length, SI [m]: ',num2str(unitConvFactor[1],'%10.5e'),'  --')],[cat('--                               mass, SI [kg]: ',num2str(unitConvFactor[2],'%10.5e'),'  --')],[cat('--                                time, SI [s]: ',num2str(unitConvFactor[3],'%10.5e'),'  --')],[cat('--                               force, SI [N]: ',num2str(unitConvFactor[15],'%10.5e'),'  --')],[cat('--                    electric current, SI [A]: ',num2str(unitConvFactor[4],'%10.5e'),'  --')],[cat('--           thermodynamic temperature, SI [K]: ',num2str(unitConvFactor[5],'%10.5e'),'  --')],[cat('--               amount of substance, SI [mol]: ',num2str(unitConvFactor[6],'%10.5e'),'  --')],[cat('--                 luminous intensity, SI [cd]: ',num2str(unitConvFactor[7],'%10.5e'),'  --')],[cat('--                        density, SI [kg/m^3]: ',num2str(unitConvFactor[8],'%10.5e'),'  --')],[cat('--                    pressure/stress, SI [Pa]: ',num2str(unitConvFactor[9],'%10.5e'),'  --')],[cat('--             thermal expansion, SI [m/(m*K)]: ',num2str(unitConvFactor[10],'%10.5e'),'  --')],[cat('--          thermal conductivity, SI [W/(m*K)]: ',num2str(unitConvFactor[11],'%10.5e'),'  --')],[cat('--       specific heat capacity, SI [J/(kg*K)]: ',num2str(unitConvFactor[12],'%10.5e'),'  --')],[cat('--             energy release rate, SI [J/m^2]: ',num2str(unitConvFactor[13],'%10.5e'),'  --')],[cat('--             interface stiffness, SI [N/m^3]: ',num2str(unitConvFactor[14],'%10.5e'),'  --')],['--                                                                                                                             --'],['--                                                                                                                             --']])
    writeABQheader(abqpath,header)
    #write license
    holder='Universit de Lorraine or Lule tekniska universitet'
    author='Luca Di Stasio'
    writeABQlicense(abqpath,holder,author)
    #write heading
    
    writeABQheading(abqpath,cellarray([cat('2D Bi-Mat Iso Plate CC, Plate\'s AR ',num2str(dot(0.5,w) / h),' Crack\'s HAR',num2str(deltaA / w),' Crack\'s VAR ',num2str(dot(0.5,deltaA) / h))]),'none')
    # write preprint
    contact='YES'
    echo='NO'
    history='YES'
    model='YES'
    parsubstitution='YES'
    parvalues='YES'
    massprop='NO'
    writeABQpreprint(abqpath,contact,echo,history,model,parsubstitution,parvalues,massprop,cellarray([]),'none')
    # start mesh section
    writeABQmeshsec(abqpath)
    ## NODES SECTION
    
    # start nodes section
    writeABQnodesec(abqpath)
    # generates all nodes
    
    writeABQnodegen(abqpath,1,1,allNodes,'All-Nodes')
    # assign nodes to node sets
    
    writeABQnodeset(abqpath,1,(arange(1,length(lowerHalfNodes))).T,'lowerHalf-Nodes')
    writeABQnodeset(abqpath,1,length(lowerHalfNodes) + (arange(1,length(upperHalfNodes))).T,'upperHalf-Nodes')
    writeABQnodeset(abqpath,1,lowerSWnode,'lowerSW-Node')
    writeABQnodeset(abqpath,1,lowerSEnode,'lowerSE-Node')
    writeABQnodeset(abqpath,1,lowerNEnode,'lowerNE-Node')
    writeABQnodeset(abqpath,1,lowerNWnode,'lowerNW-Node')
    writeABQnodeset(abqpath,1,lowerSOUTHsideNodes,'lowerSOUTHside-Nodes')
    writeABQnodeset(abqpath,1,lowerEASTsideNodes,'lowerEASTside-Nodes')
    writeABQnodeset(abqpath,1,lowerNORTHsideNodes,'lowerNORTHside-Nodes')
    writeABQnodeset(abqpath,1,lowerWESTsideNodes,'lowerWESTside-Nodes')
    writeABQnodeset(abqpath,1,upperSWnode,'upperSW-Node')
    writeABQnodeset(abqpath,1,upperSEnode,'upperSE-Node')
    writeABQnodeset(abqpath,1,upperNEnode,'upperNE-Node')
    writeABQnodeset(abqpath,1,upperNWnode,'upperNW-Node')
    writeABQnodeset(abqpath,1,upperSOUTHsideNodes,'upperSOUTHside-Nodes')
    writeABQnodeset(abqpath,1,upperEASTsideNodes,'upperEASTside-Nodes')
    writeABQnodeset(abqpath,1,upperNORTHsideNodes,'upperNORTHside-Nodes')
    writeABQnodeset(abqpath,1,upperWESTsideNodes,'upperWESTside-Nodes')
    writeABQnodeset(abqpath,1,lowerInterfaceNodes,'lowerInterface-Nodes')
    writeABQnodeset(abqpath,1,upperInterfaceNodes,'upperInterface-Nodes')
    writeABQnodeset(abqpath,1,lowerDEBONDInterfaceNodes,'lowerDEBONDInterface-Nodes')
    writeABQnodeset(abqpath,1,lowerEASTcrackTipNode,'lowerEASTcrackTip-Node')
    writeABQnodeset(abqpath,1,upperDEBONDInterfaceNodes,'upperDEBONDInterface-Nodes')
    writeABQnodeset(abqpath,1,upperEASTcrackTipNode,'upperEASTcrackTip-Node')
    writeABQnodeset(abqpath,1,lowerEASTboundedInterfaceNodes,'lowerEASTboundedInterface-Nodes')
    writeABQnodeset(abqpath,1,upperEASTboundedInterfaceNodes,'upperEASTboundedInterface-Nodes')
    writeABQnodeset(abqpath,1,lowerEASTboundedInterfaceNodes[1:end() - 1],'lowerEASTboundedInterfaceWithoutTip-Nodes')
    writeABQnodeset(abqpath,1,upperEASTboundedInterfaceNodes[1:end() - 1],'upperEASTboundedInterfaceWithoutTip-Nodes')
    writeABQnodeset(abqpath,1,lowerEASTboundedInterfaceNodes,'lowerEASTboundedInterface-Nodes')
    writeABQnodeset(abqpath,1,lowerEASTboundedInterfaceNodes[1:end() - 1],'lowerEASTboundedInterfaceWithoutTip-Nodes')
    writeABQnodeset(abqpath,1,upperEASTboundedInterfaceNodes[1:end() - 1],'upperEASTboundedInterfaceWithoutTip-Nodes')
    writeABQnodeset(abqpath,1,upperEASTboundedInterfaceNodes,'upperEASTboundedInterface-Nodes')
    writeABQnodeset(abqpath,1,upperEASTboundedInterfaceNodes[2:end()],'upperEASTboundedInterfaceWithoutTip-Nodes')
    if logical_not(isSymm):
        writeABQnodeset(abqpath,1,lowerWESTcrackTipNode,'lowerWESTcrackTip-Node')
        writeABQnodeset(abqpath,1,upperWESTcrackTipNode,'upperWESTcrackTip-Node')
        writeABQnodeset(abqpath,2,cellarray([['lowerWESTcrackTip-Node'],['lowerEASTcrackTip-Node']]),'lowerCrackTips-Nodes')
        writeABQnodeset(abqpath,2,cellarray([['upperWESTcrackTip-Node'],['upperEASTcrackTip-Node']]),'upperCrackTips-Nodes')
        writeABQnodeset(abqpath,1,lowerWESTboundedInterfaceNodes,'lowerWESTboundedInterface-Nodes')
        writeABQnodeset(abqpath,1,upperWESTboundedInterfaceNodes,'upperWESTboundedInterface-Nodes')
        writeABQnodeset(abqpath,1,upperWESTboundedInterfaceNodes[2:end()],'upperWESTboundedInterfaceWithoutTip-Nodes')
        writeABQnodeset(abqpath,2,cellarray([['lowerEASTboundedInterface-Nodes'],['lowerWESTboundedInterface-Nodes']]),'lowerBoundedInterface-Nodes')
        writeABQnodeset(abqpath,2,cellarray([['upperEASTboundedInterface-Nodes'],['upperWESTboundedInterface-Nodes']]),'upperBoundedInterface-Nodes')
    
    if interfaceDef == 5:
        if isSymm:
            writeABQnodegen(abqpath,dot(2,length(allNodes)) + 1,1,cat(0,dot(2,h)),'Dummy1-Node')
        else:
            writeABQnodegen(abqpath,dot(2,length(allNodes)) + 1,1,cat([0,dot(- 2,h)],[0,dot(2,h)]),'Dummy-Nodes')
            writeABQnodeset(abqpath,1,cat(dot(2,length(allNodes)) + 1),'Dummy1-Node')
            writeABQnodeset(abqpath,1,cat(dot(2,length(allNodes)) + 2),'Dummy2-Node')
    
    ## ELEMENTS SECTION
    
    # start elements part
    writeABQelsec(abqpath)
    if dT != 0:
        if generalized:
            if element == 1 and order == 1:
                elTypeId='CPEG4T'
            else:
                if element == 1 and order == 2:
                    elTypeId='CPEG8T'
                else:
                    if element == 2 and order == 1:
                        elTypeId='CPEG3T'
                    else:
                        if element == 2 and order == 2:
                            elTypeId='CPEG6MT'
                        else:
                            elTypeId='CPEG4T'
        else:
            if element == 1 and order == 1:
                elTypeId='CPE4T'
            else:
                if element == 1 and order == 2:
                    elTypeId='CPE8T'
                else:
                    if element == 2 and order == 1:
                        elTypeId='CPE3T'
                    else:
                        if element == 2 and order == 2:
                            elTypeId='CPE6MT'
                        else:
                            elTypeId='CPE4T'
    else:
        if generalized:
            if element == 1 and order == 1:
                elTypeId='CPEG4'
            else:
                if element == 1 and order == 2:
                    elTypeId='CPEG8'
                else:
                    if element == 2 and order == 1:
                        elTypeId='CPEG3'
                    else:
                        if element == 2 and order == 2:
                            elTypeId='CPEG6'
                        else:
                            elTypeId='CPEG4'
        else:
            if element == 1 and order == 1:
                elTypeId='CPE4'
            else:
                if element == 1 and order == 2:
                    elTypeId='CPE8'
                else:
                    if element == 2 and order == 1:
                        elTypeId='CPE3'
                    else:
                        if element == 2 and order == 2:
                            elTypeId='CPE6'
                        else:
                            elTypeId='CPE4'
    
    writeABQelgen(abqpath,1,1,lowerHalfElements,elTypeId,'lowerHalf-Elements')
    writeABQelgen(abqpath,length(lowerHalfElements) + 1,1,upperHalfElements,elTypeId,'upperHalf-Elements')
    # if isCohesive
#     
# end
    
    # assign elements to element sets
    
    writeABQelementset(abqpath,1,lowerInterfaceElements,'lowerInterface-Elements')
    writeABQelementset(abqpath,1,upperInterfaceElements,'upperInterface-Elements')
    writeABQelementset(abqpath,1,lowerDEBONDInterfaceElements,'lowerDEBONDInterface-Elements')
    writeABQelementset(abqpath,1,upperDEBONDInterfaceElements,'upperDEBONDInterface-Elements')
    #writeABQelementset(abqpath,1,lowerEASTcrackTipElement,'lowerDEBONDInterface-Element');
#writeABQelementset(abqpath,1,lowerWESTcrackTipElement,'lowerDEBONDInterface-Element');
#writeABQelementset(abqpath,1,upperEASTcrackTipElement,'upperDEBONDInterface-Element');
#writeABQelementset(abqpath,1,upperWESTcrackTipElement,'upperDEBONDInterface-Element');
    
    writeABQelementset(abqpath,1,lowerSOUTHsideElements,'lowerSOUTHside-Elements')
    writeABQelementset(abqpath,1,upperNORTHsideElements,'upperNORTHside-Elements')
    writeABQelementset(abqpath,1,lowerEASTboundedInterfaceElements,'lowerEASTboundedInterface-Elements')
    writeABQelementset(abqpath,1,upperEASTboundedInterfaceElements,'upperEASTboundedInterface-Elements')
    writeABQelementset(abqpath,1,lowerEASTcrackTipElement,'lowerEASTcrackTip-Element')
    writeABQelementset(abqpath,1,upperEASTcrackTipElement,'upperEASTcrackTip-Element')
    writeABQelementset(abqpath,1,lowerEASTboundedInterfaceElements[find(lowerEASTboundedInterfaceElements != lowerEASTcrackTipElement)],'lowerEASTboundedInterfaceWithoutTip-Elements')
    writeABQelementset(abqpath,1,upperEASTboundedInterfaceElements[find(upperEASTboundedInterfaceElements != upperEASTcrackTipElement)],'upperEASTboundedInterfaceWithoutTip-Elements')
    if logical_not(isSymm):
        writeABQelementset(abqpath,1,lowerWESTboundedInterfaceElements,'lowerWESTboundedInterface-Elements')
        writeABQelementset(abqpath,1,upperWESTboundedInterfaceElements,'upperWESTboundedInterface-Elements')
        writeABQelementset(abqpath,1,lowerWESTcrackTipElement,'lowerWESTcrackTip-Element')
        writeABQelementset(abqpath,1,upperWESTcrackTipElement,'upperWESTcrackTip-Element')
        writeABQelementset(abqpath,1,lowerWESTboundedInterfaceElements[find(lowerWESTboundedInterfaceElements != lowerWESTcrackTipElement)],'lowerWESTboundedInterfaceWithoutTip-Elements')
        writeABQelementset(abqpath,1,upperWESTboundedInterfaceElements[find(upperWESTboundedInterfaceElements != upperWESTcrackTipElement)],'upperWESTboundedInterfaceWithoutTip-Elements')
    
    if interfaceDef == 6:
        offset=length(lowerHalfElements) + length(upperHalfElements)
        if isSymm:
            writeABQelgen(abqpath,offset + 1,1,cat(lowerEASTboundedInterfaceNodes + sum(Nx) + 1,lowerEASTboundedInterfaceNodes),'CONN2D2','ConnectorEASTNoTips-Elements')
            writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
            offset=offset + length(lowerEASTboundedInterfaceNodes)
            writeABQelgen(abqpath,offset + 1,1,cat(lowerEASTcrackTipNode + sum(Nx) + 1,lowerEASTcrackTipNode),'CONN2D2','ConnectorEASTCrackTip-Element')
            writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
            writeABQelementset(abqpath,2,cellarray([['ConnectorEASTNoTips-Elements'],['ConnectorEASTCrackTip-Element']]),'Connector-Elements')
        else:
            writeABQelgen(abqpath,offset + 1,1,cat(lowerEASTboundedInterfaceNodes + sum(Nx) + 1,lowerEASTboundedInterfaceNodes),'CONN2D2','ConnectorEASTNoTips-Elements')
            writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
            offset=offset + length(lowerEASTboundedInterfaceNodes)
            writeABQelgen(abqpath,offset + 1,1,cat(lowerEASTcrackTipNode + sum(Nx) + 1,lowerEASTcrackTipNode),'CONN2D2','ConnectorEASTCrackTip-Element')
            writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
            offset=offset + 1
            writeABQelgen(abqpath,offset + 1,1,cat(lowerWESTboundedInterfaceNodes + sum(Nx) + 1,lowerWESTboundedInterfaceNodes),'CONN2D2','ConnectorWESTNoTips-Elements')
            writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
            offset=offset + length(lowerWESTboundedInterfaceNodes)
            writeABQelgen(abqpath,offset + 1,1,cat(lowerWESTcrackTipNode + sum(Nx) + 1,lowerWESTcrackTipNode),'CONN2D2','ConnectorWESTCrackTip-Element')
            writeABQconnectorsection(abqpath,'Connector-Elements','none','none','none',cellarray(['JOIN']),'none')
            writeABQelementset(abqpath,2,cellarray([['ConnectorEASTNoTips-Elements'],['ConnectorEASTCrackTip-Element']]),'ConnectorEAST-Elements')
            writeABQelementset(abqpath,2,cellarray([['ConnectorWESTNoTips-Elements'],['ConnectorWESTCrackTip-Element']]),'ConnectorWEST-Elements')
            writeABQelementset(abqpath,2,cellarray([['ConnectorEAST-Elements'],['ConnectorWEST-Elements']]),'Connector-Elements')
    
    ## MATERIAL SECTION
    
    #  unitConvFactor(1)  => length
#  unitConvFactor(2)  => mass
#  unitConvFactor(3)  => time
#  unitConvFactor(4)  => electric current
#  unitConvFactor(5)  => thermodynamic temperature
#  unitConvFactor(6)  => amount of substance
#  unitConvFactor(7)  => luminous intensity
#  unitConvFactor(8)  => density
#  unitConvFactor(9)  => pressure/stress
#  unitConvFactor(10) => thermal expansion
#  unitConvFactor(11) => thermal conductivity
#  unitConvFactor(12) => specific heat capacity
#  unitConvFactor(13) => fracture toughness
#  unitConvFactor(14) => interface stiffness
#  unitConvFactor(15) => force
    
    writeABQmatsec(abqpath)
    if 1 == lowerMaterial:
        lowerProps=getValuesFromCSV(matDBfolder,strcat('CF','.csv'),2,0,9)
        lowerUnitConv=getValuesFromCSV(matDBfolder,strcat('CF','.csv'),1,0,9)
    else:
        if 2 == lowerMaterial:
            lowerProps=getValuesFromCSV(matDBfolder,strcat('GF','.csv'),2,0,9)
            lowerUnitConv=getValuesFromCSV(matDBfolder,strcat('GF','.csv'),1,0,9)
        else:
            lowerProps=getValuesFromCSV(matDBfolder,strcat('CF','.csv'),2,0,9)
            lowerUnitConv=getValuesFromCSV(matDBfolder,strcat('CF','.csv'),1,0,9)
    
    if 1 == upperMaterial:
        upperProps=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),2,0,9)
        upperUnitConv=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),1,0,9)
    else:
        if 2 == upperMaterial:
            upperProps=getValuesFromCSV(matDBfolder,strcat('HDPE','.csv'),2,0,9)
            upperUnitConv=getValuesFromCSV(matDBfolder,strcat('HDPE','.csv'),1,0,9)
        else:
            upperProps=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),2,0,9)
            upperUnitConv=getValuesFromCSV(matDBfolder,strcat('EP','.csv'),1,0,9)
    
    rhoLow=dot(lowerProps[1],lowerUnitConv[1])
    E1Low=dot(lowerProps[2],lowerUnitConv[2])
    E2Low=dot(lowerProps[3],lowerUnitConv[3])
    G12Low=dot(lowerProps[4],lowerUnitConv[4])
    nu12Low=dot(lowerProps[5],lowerUnitConv[5])
    nu23Low=dot(lowerProps[6],lowerUnitConv[6])
    alpha1Low=dot(lowerProps[7],lowerUnitConv[7])
    alpha2Low=dot(lowerProps[8],lowerUnitConv[8])
    rhoUp=dot(upperProps[1],upperUnitConv[1])
    E1Up=dot(upperProps[2],upperUnitConv[2])
    E2Up=dot(upperProps[3],upperUnitConv[3])
    G12Up=dot(upperProps[4],upperUnitConv[4])
    nu12Up=dot(upperProps[5],upperUnitConv[5])
    nu23Up=dot(upperProps[6],upperUnitConv[6])
    alpha1Up=dot(upperProps[7],upperUnitConv[7])
    alpha2Up=dot(upperProps[8],upperUnitConv[8])
    # lower
    
    writeABQsolidsection(abqpath,'none','LowerHalf-Elements',lowMat,'none','none','LowerHalf-SectionControls','none','none','none','none',cellarray(['1.0']),'none')
    writeABQsectioncontrols(abqpath,'LowerHalf-SectionControls','none','none','none','none','none','ENHANCED','none','none','none','none','none','none','none','none','none','none',cellarray([]),'none')
    writeABQmaterial(abqpath,lowMat,'none','none','none',cellarray([]),'none')
    writeABQelastic(abqpath,'none','none','none','ISOTROPIC',cellarray([strcat(num2str(dot(E1Low,unitConvFactor[9]),'%10.5e'),', ',num2str(nu12Low,'%10.5e'))]),'E nu')
    writeABQdensity(abqpath,'none','none',cellarray([num2str(dot(rhoLow,unitConvFactor[8]),'%10.5e')]),'rho')
    writeABQexpansion(abqpath,'none','none','none','ISO','none','none',cellarray([strcat(num2str(dot(alpha1Low,unitConvFactor[10]),'%10.5e'))]),'alpha')
    # upper
    
    writeABQsolidsection(abqpath,'none','UpperHalf-Elements',upMat,'none','none','UpperHalf-SectionControls','none','none','none','none',cellarray(['1.0']),'none')
    writeABQsectioncontrols(abqpath,'UpperHalf-SectionControls','none','none','none','none','none','ENHANCED','none','none','none','none','none','none','none','none','none','none',cellarray([]),'none')
    writeABQmaterial(abqpath,upMat,'none','none','none',cellarray([]),'none')
    writeABQelastic(abqpath,'none','none','none','ISOTROPIC',cellarray([strcat(num2str(dot(E1Up,unitConvFactor[9]),'%10.5e'),', ',num2str(nu12Up,'%10.5e'))]),'E nu')
    writeABQdensity(abqpath,'none','none',cellarray([num2str(dot(rhoUp,unitConvFactor[8]),'%10.5e')]),'rho')
    writeABQexpansion(abqpath,'none','none','none','ISO','none','none',cellarray([strcat(num2str(dot(alpha1Up,unitConvFactor[10]),'%10.5e'))]),'alpha')
    if upperMaterial == 1 and lowerMaterial == 1:
        cohesiveDamageProps=getValuesFromCSV(matDBfolder,strcat('EP-CF-interface','.csv'),2,0,9)
        cohesiveDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('EP-CF-interface','.csv'),1,0,9)
    else:
        if upperMaterial == 1 and lowerMaterial == 2:
            cohesiveDamageProps=getValuesFromCSV(matDBfolder,strcat('EP-GF-interface','.csv'),2,0,9)
            cohesiveDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('EP-GF-interface','.csv'),1,0,9)
        else:
            if upperMaterial == 2 and lowerMaterial == 1:
                cohesiveDamageProps=getValuesFromCSV(matDBfolder,strcat('HDPE-CF-interface','.csv'),2,0,9)
                cohesiveDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('HDPE-CF-interface','.csv'),1,0,9)
            else:
                if upperMaterial == 2 and lowerMaterial == 2:
                    cohesiveDamageProps=getValuesFromCSV(matDBfolder,strcat('HDPE-GF-interface','.csv'),2,0,9)
                    cohesiveDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('HDPE-GF-interface','.csv'),1,0,9)
                else:
                    cohesiveDamageProps=getValuesFromCSV(matDBfolder,strcat('EP-CF-interface','.csv'),2,0,9)
                    cohesiveDamageUnitConv=getValuesFromCSV(matDBfolder,strcat('EP-CF-interface','.csv'),1,0,9)
    
    # Load Fiber/Matrix Interface Properties
    
    Eint1=dot(cohesiveDamageProps[1],cohesiveDamageUnitConv[1])
    Eint2=dot(cohesiveDamageProps[2],cohesiveDamageUnitConv[2])
    Eint3=dot(cohesiveDamageProps[3],cohesiveDamageUnitConv[3])
    maxT1=dot(cohesiveDamageProps[4],cohesiveDamageUnitConv[4])
    maxT2=dot(cohesiveDamageProps[5],cohesiveDamageUnitConv[5])
    maxT3=dot(cohesiveDamageProps[6],cohesiveDamageUnitConv[6])
    GIc=dot(cohesiveDamageProps[7],cohesiveDamageUnitConv[7])
    GIIc=dot(cohesiveDamageProps[8],cohesiveDamageUnitConv[8])
    GIIIc=dot(cohesiveDamageProps[9],cohesiveDamageUnitConv[9])
    eta=dot(cohesiveDamageProps[10],cohesiveDamageUnitConv[10])
    ## SURFACE AND FRACTURE SECTION
    
    writeABQsurfacesec(abqpath)
    if 1 == interfaceDef:
        # lower surface
        writeABQsurface(abqpath,'Lower-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerInterface-Elements, S3']),'lower surface')
        writeABQsurface(abqpath,'Upper-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperInterface-Elements, S1']),'upper surface')
        writeABQcontactpair(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['Upper-Surface, Lower-Surface']),'slave, master')
        writeABQsurfaceinteraction(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
    else:
        if 2 == interfaceDef:
            if isSymm:
                # lower surfaces
                writeABQsurface(abqpath,'LowerDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['lowerDEBONDInterface-Elements, S3'],['lowerEASTcrackTip-Element, S3']]),'lower debond surface')
                writeABQsurface(abqpath,'LowerEast-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerEASTboundedInterfaceWithoutTip-Elements, S3']),'lower east surface')
                writeABQsurface(abqpath,'UpperDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['upperDEBONDInterface-Elements, S1'],['upperEASTcrackTip-Element, S1']]),'lower debond surface')
                writeABQsurface(abqpath,'UpperEast-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperEASTboundedInterfaceWithoutTip-Elements, S1']),'upper east surface')
            else:
                # lower surfaces
                writeABQsurface(abqpath,'LowerDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['lowerDEBONDInterface-Elements, S3'],['lowerEASTcrackTip-Element, S3'],['lowerWESTcrackTip-Element, S3']]),'lower debond surface')
                writeABQsurface(abqpath,'LowerEast-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerEASTboundedInterfaceWithoutTip-Elements, S3']),'lower east surface')
                writeABQsurface(abqpath,'LowerWest-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerWESTboundedInterfaceWithoutTip-Elements, S3']),'lower west surface')
                writeABQsurface(abqpath,'UpperDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['upperDEBONDInterface-Elements, S1'],['upperEASTcrackTip-Element, S1'],['upperWESTcrackTip-Element, S1']]),'lower debond surface')
                writeABQsurface(abqpath,'UpperEast-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperEASTboundedInterfaceWithoutTip-Elements, S1']),'upper east surface')
                writeABQsurface(abqpath,'UpperWest-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperWESTboundedInterfaceWithoutTip-Elements, S1']),'upper west surface')
            # surface interaction
            writeABQcontactpair(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['UpperDebond-Surface, LowerDebond-Surface']),'slave, master')
            writeABQsurfaceinteraction(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
            writeABQtie(abqpath,'LowerUpperEastTieConstraint','none','none','YES','none','none','none','none','SURFACE TO SURFACE',cellarray(['LowerEast-Surface, UpperEast-Surface']),'tie constraint between slave and master')
            if logical_not(isSymm):
                writeABQtie(abqpath,'LowerUpperWestTieConstraint','none','none','YES','none','none','none','none','SURFACE TO SURFACE',cellarray(['LowerWest-Surface, UpperWest-Surface']),'tie constraint between slave and master')
        else:
            if 3 == interfaceDef:
                if isSymm:
                    # lower surfaces
                    writeABQsurface(abqpath,'LowerDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['lowerDEBONDInterface-Elements, S3'],['lowerEASTcrackTip-Element, S3']]),'lower debond surface')
                    writeABQsurface(abqpath,'UpperDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['upperDEBONDInterface-Elements, S1'],['upperEASTcrackTip-Element, S1']]),'lower debond surface')
                else:
                    # lower surfaces
                    writeABQsurface(abqpath,'LowerDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['lowerDEBONDInterface-Elements, S3'],['lowerEASTcrackTip-Element, S3'],['lowerWESTcrackTip-Element, S3']]),'lower debond surface')
                    writeABQsurface(abqpath,'UpperDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray([['upperDEBONDInterface-Elements, S1'],['upperEASTcrackTip-Element, S1'],['upperWESTcrackTip-Element, S1']]),'lower debond surface')
                # surface interaction
                writeABQcontactpair(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['UpperDebond-Surface, LowerDebond-Surface']),'slave, master')
                writeABQsurfaceinteraction(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
                for i in arange(1,length(lowerEASTboundedInterfaceNodes[1:end() - 1])).reshape(-1):
                    writeABQmpc(abqpath,'none','none','none',cellarray([strcat('TIE, ',num2str(lowerEASTboundedInterfaceNodes[i]),', ',num2str(lowerEASTboundedInterfaceNodes[i] + sum(Nx) + 1))]),'MPC type, node numbers or node sets')
                if logical_not(isSymm):
                    for i in arange(1,length(lowerWESTboundedInterfaceNodes[2:end()])).reshape(-1):
                        writeABQmpc(abqpath,'none','none','none',cellarray([strcat('TIE, ',num2str(lowerWESTboundedInterfaceNodes[i]),', ',num2str(lowerWESTboundedInterfaceNodes[i] + sum(Nx) + 1))]),'MPC type, node numbers or node sets')
            else:
                if 4 == interfaceDef:
                    if isSymm:
                        # lower surfaces
                        writeABQsurface(abqpath,'LowerDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerDEBONDInterface-Elements, S3']),'lower debond surface')
                        writeABQsurface(abqpath,'LowerEast-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerEASTboundedInterface-Elements, S3']),'lower east surface')
                        writeABQsurface(abqpath,'UpperDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperDEBONDInterface-Elements, S1']),'upper debond surface')
                        writeABQsurface(abqpath,'UpperEast-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperEASTboundedInterface-Elements, S1']),'upper east surface')
                    else:
                        # lower surfaces
                        writeABQsurface(abqpath,'LowerDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerDEBONDInterface-Elements, S3']),'lower debond surface')
                        writeABQsurface(abqpath,'LowerEast-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerEASTboundedInterface-Elements, S3']),'lower east surface')
                        writeABQsurface(abqpath,'LowerWest-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerWESTboundedInterface-Elements, S3']),'lower west surface')
                        writeABQsurface(abqpath,'UpperDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperDEBONDInterface-Elements, S1']),'upper debond surface')
                        writeABQsurface(abqpath,'UpperEast-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperEASTboundedInterface-Elements, S1']),'upper east surface')
                        writeABQsurface(abqpath,'UpperWest-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperWESTboundedInterface-Elements, S1']),'upper west surface')
                    # surface interaction
                    writeABQcontactpair(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['UpperDebond-Surface, LowerDebond-Surface']),'slave, master')
                    writeABQsurfaceinteraction(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
                    writeABQtie(abqpath,'LowerUpperEastTieConstraint','none','none','YES','none','none','none','none','SURFACE TO SURFACE',cellarray(['LowerEast-Surface, UpperEast-Surface']),'tie constraint between slave and master')
                    if logical_not(isSymm):
                        writeABQtie(abqpath,'LowerUpperWestTieConstraint','none','none','YES','none','none','none','none','SURFACE TO SURFACE',cellarray(['LowerWest-Surface, UpperWest-Surface']),'tie constraint between slave and master')
                else:
                    if 5 == interfaceDef:
                        # lower debond
                        writeABQsurface(abqpath,'LowerDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerDEBONDInterface-Elements, S3']),'lower debond surface')
                        writeABQsurface(abqpath,'UpperDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperDEBONDInterface-Elements, S1']),'upper debond surface')
                        writeABQcontactpair(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['UpperDebond-Surface, LowerDebond-Surface']),'slave, master')
                        writeABQsurfaceinteraction(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
                        #         for i=1:length(lowerEASTboundedInterfaceNodes)
#             writeABQmpc(abqpath,'none','none','none',...
#                         {strcat('TIE, ', num2str(lowerEASTboundedInterfaceNodes(i)), ', ', num2str(lowerEASTboundedInterfaceNodes(i)+sum(Nx)+1))},...
#                         'MPC type, node numbers or node sets');
#         end
#         if ~isSymm
#             for i=1:length(lowerWESTboundedInterfaceNodes)
#                 writeABQmpc(abqpath,'none','none','none',...
#                             {strcat('TIE, ', num2str(lowerWESTboundedInterfaceNodes(i)), ', ', num2str(lowerWESTboundedInterfaceNodes(i)+sum(Nx)+1))},...
#                             'MPC type, node numbers or node sets');
#             end
#         end
                        writeABQequation(abqpath,'none',cellarray([['3'],['lowerEASTcrackTip-Node,1,1,upperEASTcrackTip-Node,1,-1,Dummy1-Node,1,-1']]),'none')
                        writeABQequation(abqpath,'none',cellarray([['3'],['lowerEASTcrackTip-Node,2,1,upperEASTcrackTip-Node,2,-1,Dummy1-Node,2,-1']]),'none')
                        for i in arange(1,length(lowerEASTboundedInterfaceNodes)).reshape(-1):
                            if lowerEASTboundedInterfaceNodes[i] != lowerEASTcrackTipNode:
                                writeABQequation(abqpath,'none',cellarray([['2'],[strcat(num2str(lowerEASTboundedInterfaceNodes[i] + sum(Nx) + 1),',1,1,',num2str(lowerEASTboundedInterfaceNodes[i]),',1,-1')]]),'none')
                                writeABQequation(abqpath,'none',cellarray([['2'],[strcat(num2str(lowerEASTboundedInterfaceNodes[i] + sum(Nx) + 1),',2,1,',num2str(lowerEASTboundedInterfaceNodes[i]),',2,-1')]]),'none')
                        if isSymm:
                            writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['Dummy1-Node,ENCASTRE']),'none')
                        else:
                            writeABQequation(abqpath,'none',cellarray([['3'],['lowerWESTcrackTip-Node,1,1,upperWESTcrackTip-Node,1,-1,Dummy2-Node,1,-1']]),'none')
                            writeABQequation(abqpath,'none',cellarray([['3'],['lowerWESTcrackTip-Node,2,1,upperWESTcrackTip-Node,2,-1,Dummy2-Node,2,-1']]),'none')
                            for i in arange(1,length(lowerWESTboundedInterfaceNodes)).reshape(-1):
                                if lowerWESTboundedInterfaceNodes[i] != lowerWESTcrackTipNode:
                                    writeABQequation(abqpath,'none',cellarray([['2'],[strcat(num2str(lowerWESTboundedInterfaceNodes[i] + sum(Nx) + 1),',1,1,',num2str(lowerWESTboundedInterfaceNodes[i]),',1,-1')]]),'none')
                                    writeABQequation(abqpath,'none',cellarray([['2'],[strcat(num2str(lowerWESTboundedInterfaceNodes[i] + sum(Nx) + 1),',2,1,',num2str(lowerWESTboundedInterfaceNodes[i]),',2,-1')]]),'none')
                            writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['Dummy-Nodes,ENCASTRE']),'none')
                    else:
                        if 6 == interfaceDef:
                            # lower debond
                            writeABQsurface(abqpath,'LowerDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['lowerDEBONDInterface-Elements, S3']),'lower debond surface')
                            writeABQsurface(abqpath,'UpperDebond-Surface','none','none','none','none','none','none','none','none','ELEMENT','none','none','none','none',cellarray(['upperDEBONDInterface-Elements, S1']),'upper debond surface')
                            writeABQcontactpair(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none','none','SMALL SLIDING','none','none','none','none','none','SURFACE TO SURFACE',cellarray(['UpperDebond-Surface, LowerDebond-Surface']),'slave, master')
                            writeABQsurfaceinteraction(abqpath,'LowerUpperFractInterface','none','none','none','none','none','none',cellarray(['1.0']),'Out-of-plane thickness of the surface')
    
    ## BOUNDARY CONDITIONS SECTION
    
    writeABQbcsec(abqpath)
    if isSymm:
        writeABQboundary(abqpath,'none','none','none','none','none','none','none','none','none','none','none','none',cellarray([['lowerSW-Node,XSYMM'],['lowerWESTside-Nodes,XSYMM'],['lowerNW-Node,XSYMM'],['upperSW-Node,XSYMM'],['upperWESTside-Nodes,XSYMM'],['upperNW-Node,XSYMM']]),'none')
    
    ## INITIAL CONDITIONS SECTION
    
    writeABQicsec(abqpath)
    if 1 == interfaceDef:
        if isSymm:
            writeABQinitialconditions(abqpath,'CONTACT','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['Upper-Surface,Lower-Surface,upperEASTboundedInterface-Nodes']),'none')
        else:
            writeABQinitialconditions(abqpath,'CONTACT','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['Upper-Surface,Lower-Surface,upperBoundedInterface-Nodes']),'none')
    else:
        if 2 == interfaceDef:
            if isSymm:
                writeABQinitialconditions(abqpath,'CONTACT','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['UpperDebond-Surface,LowerDebond-Surface,upperEASTcrackTip-Node']),'none')
            else:
                writeABQinitialconditions(abqpath,'CONTACT','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['UpperDebond-Surface,LowerDebond-Surface,upperCrackTips-Nodes']),'none')
        else:
            if 3 == interfaceDef:
                if isSymm:
                    writeABQinitialconditions(abqpath,'CONTACT','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['UpperDebond-Surface,LowerDebond-Surface,upperEASTcrackTip-Node']),'none')
                else:
                    writeABQinitialconditions(abqpath,'CONTACT','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none','none',cellarray(['UpperDebond-Surface,LowerDebond-Surface,upperCrackTips-Nodes']),'none')
    
    ## LOAD SECTION
    
    writeABQloadsec(abqpath)
    writeABQstep(abqpath,'STEP','YES','none','none','10000','LoadStep','YES','none','none','none',cellarray([]),'none')
    writeABQstatic(abqpath,'none','none','none','none','none','none','none','none','none',cellarray(['1e-4,1.0,1e-8,1e-2']),'Initial time increment, Time period of the step, Minimum time increment allowed, Maximum time increment allowed')
    #writeABQdload(abqpath,'none','none','none','none','none','none','none','none','none','none',...
#              {strcat('lowerSOUTHside-Elements,TRVEC1,',num2str(-sigmayy),'0.0,-1.0');strcat('upperNORTHside-Elements,TRVEC3,',num2str(sigmayy),'0.0,1.0')},'none')
    
    boundaryData=cellarray([[strcat('lowerSOUTHside-Nodes,2,,',num2str(dot(- epsyy,abs(allNodes[lowerSWnode,2]))))],[strcat('upperNORTHside-Nodes,2,,',num2str(dot(epsyy,abs(allNodes[upperNWnode,2]))))]])
    writeABQboundary(abqpath,'none','none','none','none','none','MOD','none','none','DISPLACEMENT','none','none','none',boundaryData,'')
    if 1 == interfaceDef:
        writeABQdebond(abqpath,'Lower-Surface','Upper-Surface','none','none','BOTH','none',cellarray([]),'')
        writeABQfracturecriterion(abqpath,'none','none','VCCT','none','BK','none','none','none','none','0.5','none',cellarray([strcat(num2str(dot(GIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIIc,unitConvFactor[13]),'%10.5e'),',',num2str(eta,'%10.5e'))]),'GIc GIIc GIIIc eta')
    else:
        if 2 == interfaceDef:
            writeABQdebond(abqpath,'LowerDebond-Surface','UpperDebond-Surface','none','none','BOTH','none',cellarray([]),'')
            writeABQfracturecriterion(abqpath,'none','none','VCCT','none','BK','none','none','none','none','0.5','none',cellarray([strcat(num2str(dot(GIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIIc,unitConvFactor[13]),'%10.5e'),',',num2str(eta,'%10.5e'))]),'GIc GIIc GIIIc eta')
        else:
            if 3 == interfaceDef:
                writeABQdebond(abqpath,'LowerDebond-Surface','UpperDebond-Surface','none','none','BOTH','none',cellarray([]),'')
                writeABQfracturecriterion(abqpath,'none','none','VCCT','none','BK','none','none','none','none','0.5','none',cellarray([strcat(num2str(dot(GIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIc,unitConvFactor[13]),'%10.5e'),', ',num2str(dot(GIIIc,unitConvFactor[13]),'%10.5e'),',',num2str(eta,'%10.5e'))]),'GIc GIIc GIIIc eta')
    
    ## OUTPUT SECTION
    
    writeABQoutsec(abqpath)
    # output to .fil
    
    if requestFIL:
        writeABQfileformat(abqpath,'ASCII','none',cellarray([]),'')
        writeABQelfile(abqpath,'YES','All-Elements','none','none','none','none','none',cellarray([['COORD,S,SP,SINV,E,EP,NE,NEP'],['LE,LEP,EE,EEP,IE,IEP,THE,THEP'],['ENER,TEMP']]),'none')
        writeABQenergyfile(abqpath,'All-Elements','none',cellarray([]),'none')
        writeABQnodefile(abqpath,'none','YES','none','none','All-Nodes',cellarray(['COORD,U,RF,CF,TF,VF']),'none')
        if interfaceDef == 6:
            writeABQelfile(abqpath,'YES','Connector-Elements','none','none','none','none','none',cellarray(['CRF1']),'none')
            writeABQelfile(abqpath,'YES','Connector-Elements','none','none','none','none','none',cellarray(['CRF2']),'none')
            writeABQelfile(abqpath,'YES','Connector-Elements','none','none','none','none','none',cellarray(['CRF3']),'none')
        if interfaceDef == 5:
            if isSymm:
                writeABQnodefile(abqpath,'none','YES','none','none','Dummy1-Node',cellarray(['COORD,U,RF,CF,TF,VF']),'none')
            else:
                writeABQnodefile(abqpath,'none','YES','none','none','Dummy-Nodes',cellarray(['COORD,U,RF,CF,TF,VF']),'none')
    
    # output to .dat
    
    if requestDAT:
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['COORD']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['S']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['SP']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['SINV']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['E']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['EP']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['NE']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['NEP']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['LE']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['LEP']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['EE']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['EEP']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['IE']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['IEP']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['THE']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['THEP']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['ENER']),'none')
        writeABQelprint(abqpath,'All-Elements','none','none','none','none','none','none','none',cellarray(['TEMP']),'none')
        writeABQenergyprint(abqpath,'All-Elements','none',cellarray([]),'none')
        writeABQnodeprint(abqpath,'none','YES','none','none','All-Nodes','NO','NO',cellarray(['COORD']),'none')
        writeABQnodeprint(abqpath,'none','YES','none','none','All-Nodes','NO','NO',cellarray(['U,RF']),'none')
        writeABQnodeprint(abqpath,'none','YES','none','none','All-Nodes','NO','NO',cellarray(['CF,TF']),'none')
        if interfaceDef == 6:
            writeABQelprint(abqpath,'Connector-Elements','none','none','none','none','none','none','none',cellarray(['CRF1']),'none')
            writeABQelprint(abqpath,'Connector-Elements','none','none','none','none','none','none','none',cellarray(['CRF2']),'none')
            writeABQelprint(abqpath,'Connector-Elements','none','none','none','none','none','none','none',cellarray(['CRF3']),'none')
        if interfaceDef == 5:
            if isSymm:
                writeABQnodeprint(abqpath,'none','YES','none','none','Dummy1-Node','NO','NO',cellarray(['COORD']),'none')
                writeABQnodeprint(abqpath,'none','YES','none','none','Dummy1-Node','NO','NO',cellarray(['U,RF']),'none')
            else:
                writeABQnodeprint(abqpath,'none','YES','none','none','Dummy-Nodes','NO','NO',cellarray(['COORD']),'none')
                writeABQnodeprint(abqpath,'none','YES','none','none','Dummy-Nodes','NO','NO',cellarray(['U,RF']),'none')
    
    # output to .odb
    
    if requestODB:
        writeABQoutput(abqpath,'YES','none','none','none','none','none','none','none','none','none','none','none','none',cellarray([]),'none')
        writeABQoutput(abqpath,'none','FIELD','none','none','none','FieldData','10','none','none','none','none','ALL','none',cellarray([]),'none')
        writeABQoutput(abqpath,'none','none','HISTORY','none','none','HistoryData','none','none','none','none','none','none','none',cellarray([]),'none')
        writeABQnodeoutput(abqpath,'upperNORTHside-Nodes','none','none','none','none',cellarray(['U']),'none')
        writeABQnodeoutput(abqpath,'lowerSOUTHside-Nodes','none','none','none','none',cellarray(['U']),'none')
        #writeABQnodeoutput(abqpath,'All-Nodes','none','none','none','none',{'TF'},'none');
        if 1 == interfaceDef:
            writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','Lower-Surface','Upper-Surface',cellarray([]),'none')
            writeABQcontactoutput(abqpath,'none','none','none','none','none','none','Lower-Surface','Upper-Surface',cellarray(['DBT,DBS,DBSF,BDSTAT,CSDMG,OPENBC,CRSTS,ENRRT,EFENRRTR']),'none')
        else:
            if 2 == interfaceDef:
                writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','LowerDebond-Surface','UpperDebond-Surface',cellarray([]),'none')
                writeABQcontactoutput(abqpath,'none','none','none','none','none','none','LowerDebond-Surface','UpperDebond-Surface',cellarray(['DBT,DBS,DBSF,BDSTAT,CSDMG,OPENBC,CRSTS,ENRRT,EFENRRTR']),'none')
                writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','LowerEast-Surface','UpperEast-Surface',cellarray([]),'none')
                if logical_not(isSymm):
                    writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','LowerWest-Surface','UpperWest-Surface',cellarray([]),'none')
            else:
                if 3 == interfaceDef:
                    writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','LowerDebond-Surface','UpperDebond-Surface',cellarray([]),'none')
                    writeABQcontactoutput(abqpath,'none','none','none','none','none','none','LowerDebond-Surface','UpperDebond-Surface',cellarray(['DBT,DBS,DBSF,BDSTAT,CSDMG,OPENBC,CRSTS,ENRRT,EFENRRTR']),'none')
                else:
                    if 4 == interfaceDef:
                        writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','LowerDebond-Surface','UpperDebond-Surface',cellarray([]),'none')
                        writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','LowerEast-Surface','UpperEast-Surface',cellarray([]),'none')
                        if logical_not(isSymm):
                            writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','LowerWest-Surface','UpperWest-Surface',cellarray([]),'none')
                    else:
                        if 5 == interfaceDef:
                            writeABQcontactoutput(abqpath,'none','none','none','none','none','ALL','LowerDebond-Surface','UpperDebond-Surface',cellarray([]),'none')
        if interfaceDef == 6:
            writeABQelementoutput(abqpath,'Connector-Elements','none','YES','none','none','none','none',cellarray(['CRF1']),'none')
            writeABQelementoutput(abqpath,'Connector-Elements','none','YES','none','none','none','none',cellarray(['CRF2']),'none')
            writeABQelementoutput(abqpath,'Connector-Elements','none','YES','none','none','none','none',cellarray(['CRF3']),'none')
        if interfaceDef == 5:
            if isSymm:
                writeABQnodeoutput(abqpath,'Dummy1-Node','none','none','none','none',cellarray(['COORD']),'none')
                writeABQnodeoutput(abqpath,'Dummy1-Node','none','none','none','none',cellarray(['U,RF']),'none')
            else:
                writeABQnodeoutput(abqpath,'Dummy-Nodes','none','none','none','none',cellarray(['COORD']),'none')
                writeABQnodeoutput(abqpath,'Dummy-Nodes','none','none','none','none',cellarray(['U,RF']),'none')
    
    writeABQendstep(abqpath)
    return projectName
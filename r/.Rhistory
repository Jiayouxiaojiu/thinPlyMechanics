wDir <- file.path("C:","Users","lucad","OneDrive","01_Luca","09_Freelancer","2020","Tutor","PolicyAndImpactEvaluation","Exercises")
# set path of input directory
inpDir <- file.path("C:","Users","lucad","OneDrive","01_Luca","09_Freelancer","2020","Tutor","PolicyAndImpactEvaluation","Exercises")
# set path of output directory
outDir <- file.path("C:","Users","lucad","OneDrive","01_Luca","09_Freelancer","2020","Tutor","PolicyAndImpactEvaluation","Exercises")
# Check the current working directory is the desired one
getwd()
data("wexpect")
data("wexpect")
summary(wexpect)
summary(wexpect)
hist(wexpect1)
hist(wexpect$wexpect1)
hist(wexpect$wexpect2)
hist(matwellbeing)
hist(wexpect$matwellbeing)
hist(wexpect$swiss)
sum(wexpect$swiss)
length(wexpect$swiss)
#707/804
707/804
hist(wexpect$fatherhighedu)
hist(wexpect$motherhighedu)
sum(wexpect$fatherhighedu)#=707
length(wexpect$fatherhighedu)#=804
sum(wexpect$motherhighedu)#=707
length(wexpect$motherhighedu)#=804
311/804
170/804
sum(wexpect$motherhighedu[wexpect$motherhighedu==1])
sum(wexpect$motherhighedu[wexpect$fatherhighedu==1])
125/804
hist(wexpect$treatmentinformation)
sum(wexpect$treatmentinformation)#=707
259/804
hist(wexpect$wexpect1)
hist(wexpect$wexpect1[wexpect$treatmentinformation==0])
hist(wexpect$wexpect1[wexpect$treatmentinformation==1])
hist(wexpect$wexpect2)
hist(wexpect$wexpect2[wexpect$treatmentinformation==0])
hist(wexpect$wexpect2[wexpect$treatmentinformation==1])
help("hist")
help(c)
hist(wexpect$wexpect1,breaks = 16)
hist(wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16)
hist(wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16)
hist(wexpect$wexpect2,breaks = 16)
hist(wexpect$wexpect2[wexpect$treatmentinformation==0],breaks = 16)
hist(wexpect$wexpect2[wexpect$treatmentinformation==1],breaks = 16)
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations after finishing studies", xlab="Wage, gross per month")
hist(wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations after finishing studies", xlab="Wage, gross per month")
hist(wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Whole population", "Control", "Treated"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations after finishing studies", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Whole population", "Control", "Treated"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(wexpect$wexpect2,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations 3 years after finishing studies", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect2[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Whole population", "Control", "Treated"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
help(legend)
hist(wexpect$wexpect2,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations 3 years after finishing studies", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect2[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("right", c("Whole population", "Control", "Treated"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
legend("topleft", c("Whole population", "Control", "Treated"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(wexpect$wexpect2,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations 3 years after finishing studies", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect2[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topleft", c("Whole population", "Control", "Treated"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2,breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("topright", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
# The 3 histograms of wage expectations for whole, control and treated population show similar trend,
# it supports the assumption of random assignment
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2,breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("top", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
# The 3 histograms of wage expectations for whole, control and treated population show similar trend,
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2,breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("topright", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
# The 3 histograms of wage expectations for whole, control and treated population show similar trend,
# it supports the
hist(wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the control population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("topright", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
# There
hist(wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the treated population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("topright", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
# There
library(foreign)
library(causalweight)
library(AER)
library(lmtest)
library(sandwich)
library(Matching)
library(MatchIt)
library(mfx)
library(boot)
library(mgcv)
library(np)
library(arm)
install.packages(arm)
install.packages("arm")
library(foreign)
library(causalweight)
library(AER)
library(lmtest)
library(sandwich)
library(Matching)
library(MatchIt)
library(mfx)
library(boot)
library(mgcv)
library(np)
library(arm)
pscore = glm(treatmentinformation~male+business+econ+communi+businform+age+swiss+motherhighedu+fatherhighedu+homeowner+matwellbeing, wexpect, family=binomial(probit))$fitted
hist(pscore[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5), main="Propensity score (probit)", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Control", "Treated"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
model1 = treatmentinformation~male+business+econ+communi+businform+age+swiss+motherhighedu+fatherhighedu+homeowner+matwellbeing
pscore = glm(model1, wexpect, family=binomial(probit))$fitted
hist(pscore[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5), main="Propensity score (probit)", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Control", "Treated"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
# Propensity score distribution between control and treated population are similar
hist(pscore[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5), main="Propensity score (probit)", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Control", "Treated"), col=c(rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
# Propensity scor
hist(matching1)
matching1 = matchit(model1,wexpect,method="nearest",distance="probit",ratio=1,replace=TRUE)
library(MatchIt)
packages.install("MatchIt")
install.packages("MatchIt")
library(MatchIt)
matching1 = matchit(model1,wexpect,method="nearest",distance="probit",ratio=1,replace=TRUE)
hist(matching1)
plot(matching1,type="hist")
plot(matching1.out,type="hist")
plot(matching1,type="hist",breaks=10)
plot(matching1,type="hist",breaks=15)
plot(matching1,type="hist",breaks=20)
plot(matching1,type="hist",breaks=20)
plot(matching1,type="hist",breaks=15)
plot(matching1,type="hist",breaks=15)
standDiffTest1 = summary(matching1,standardize=TRUE)
standDiffTest1
hist(pscore[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5), main="Propensity score (probit)", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5), main="Propensity score (probit) for control population", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,1,0,0.5), main="Propensity score (probit) for treated population", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5), main="Propensity score (probit)", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Control", "Treated"), col=c(rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(pscore[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5), main="Propensity score (probit) for control population", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,1,0,0.5), main="Propensity score (probit) for treated population", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5), main="Propensity score (probit)", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Control", "Treated"), col=c(rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(pscore[wexpect$treatmentinformation==0],breaks = 15, col=rgb(0,1,0,0.5), main="Propensity score (probit) for control population", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==1],breaks = 15, col=rgb(0,1,0,0.5), main="Propensity score (probit) for treated population", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==0],breaks = 15, col=rgb(0,1,0,0.5), main="Propensity score (probit)", xlab="Propensity score",ylab="Frequency")
hist(pscore[wexpect$treatmentinformation==1],breaks = 15, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Control", "Treated"), col=c(rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
# Propensity score dist
summary(pscore[wexpect$treatmentinformation==0])
summary(pscore[wexpect$treatmentinformation==1])
# Vector of covariates
x = cbind(male,business,econ,communi,businform,age,swiss,motherhighedu,fatherhighedu,homeowner,matwellbeing)
# Vector of covariates
x = cbind(wexpect$male,wexpect$business,wexpect$econ,wexpect$communi,wexpect$businform,wexpect$age,wexpect$swiss,wexpect$motherhighedu,wexpect$fatherhighedu,wexpect$homeowner,wexpect$matwellbeing)
l2 = wexpect$wexpect1~wexpect$treatmentinformation
model3 = wexpect$wex
olsModel2 = lm(model2)
model2 = wexpect$wexpect1~wexpect$treatmentinformation
model3 = wexpect$wexpect2~wexpect$treatmentinformation
olsModel2 = lm(model2)
coeftest(olsModel2,vcov = vcovHC )
olsModel3 = lm(model3)
coeftest(olsModel3,vcov = vcovHC )
# OLS with covariates
model4 = wexpect$wexpect1~wexpect$treatmentinformation+x
model5 = wexpect$wexpect2~wexpect$treatmentinformation+x
olsModel4 = lm(model4)
coeftest(olsModel4,vcov = vcovHC )
olsModel5 = lm(model5)
coeftest(olsModel5,vcov = vcovHC )
wexpectBusiness=wexpect[business==1]
wexpectBusiness=wexpect[wexpect$business==1]
wexpectBusiness=wexpect[,wexpect$business==1]
wexpectBusiness=wexpect[wexpect$business==1,]
wexpectBusiness$business
wexpectNonBusiness=wexpect[wexpect$business==0,]
# Vector of covariates
xBusiness = cbind(wexpectBusiness$male,wexpectBusiness$business,wexpectBusiness$econ,wexpectBusiness$communi,wexpectBusiness$businform,wexpectBusiness$age,wexpectBusiness$swiss,wexpectBusiness$motherhighedu,wexpectBusiness$fatherhighedu,wexpectBusiness$homeowner,wexpectBusiness$matwellbeing)
xNonBusiness = cbind(wexpectNonBusiness$male,wexpectNonBusiness$business,wexpectNonBusiness$econ,wexpectNonBusiness$communi,wexpectNonBusiness$businform,wexpectNonBusiness$age,wexpect$swiss,wexpectNonBusiness$motherhighedu,wexpectNonBusiness$fatherhighedu,wexpectNonBusiness$homeowner,wexpectNonBusiness$matwellbeing)
xNonBusiness = cbind(wexpectNonBusiness$male,wexpectNonBusiness$business,wexpectNonBusiness$econ,wexpectNonBusiness$communi,wexpectNonBusiness$businform,wexpectNonBusiness$age,wexpectNonBusiness$swiss,wexpectNonBusiness$motherhighedu,wexpectNonBusiness$fatherhighedu,wexpectNonBusiness$homeowner,wexpectNonBusiness$matwellbeing)
# OLS with covariates
modelBusiness = wexpectBusiness$wexpect2~wexpectBusiness$treatmentinformation+xBusiness
modelNonBusiness = wexpectNonBusiness$wexpect2~wexpectBusiness$treatmentinformation+xNonBusiness
#OLS with covariates
olsModelBusiness = lm(modelBusiness)
coeftest(olsModelBusiness,vcov = vcovHC)
olsModelNonBusiness = lm(modelNonBusiness)
modelNonBusiness = wexpectNonBusiness$wexpect2~wexpectNonBusiness$treatmentinformation+xNonBusiness
olsModelNonBusiness = lm(modelNonBusiness)
coeftest(olsModelNonBusiness,vcov = vcovHC)
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the whole population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2,breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("topright", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the whole population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2,breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the control population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("topright", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the treated population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("topright", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the whole population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2,breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the control population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the treated population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect2-wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations difference in time (T2-T1) for the whole population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==0]-wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(1,0,0,0.5),add=T)
hist(wexpect$wexpect2[wexpect$treatmentinformation==0]-wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect2[wexpect$treatmentinformation==1]-wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect2[wexpect$treatmentinformation==1]-wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Whole", "Control", "Treated"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
medweight(y,d,m,x,trim = 0.0,boot = 49)
# outcome
Y = wexpect$wexpect2
# treatment
D = wexpect$treatmentinformation
# mediator
M = wexpect$wexpect1
# Vector of covariates
X = cbind(wexpect$male,wexpect$business,wexpect$econ,wexpect$communi,wexpect$businform,wexpect$age,wexpect$swiss,wexpect$motherhighedu,wexpect$fatherhighedu,wexpect$homeowner,wexpect$matwellbeing)
mediation1 = medweight(Y,D,M,X,trim = 0.0,boot = 49)
mediation1$effect#=
mediation1$se#=
mediation1
mediation2 = medweight(Y,D,M,X,trim = 0.05,boot = 49)
mediation1 = medweight(Y,D,M,X)
mediation1
ageMax20 = wexpect$age<21
length(ageMax20)
ageMax20
hist(wexpect$treatmentinformation[ageMax20==FALSE])
hist(wexpect$treatmentinformation[ageMax20==TRUE])
hist(wexpect$treatmentinformation[wexpect$age<21])
hist(wexpect$treatmentinformation[wexpect$age>=21])
summary(wexpect$treatmentinformation[wexpect$age<21])
summary(wexpect$treatmentinformation[wexpect$age>=21])
ageMax20 = as.integer(wexpect$age<21)
summary(ageMax20)
rdd1 = lm(wexpect$expect1 ~ wexpect$treatmentinformation + ageMax20)
rdd1 = lm(wexpect$wexpect1 ~ wexpect$treatmentinformation + ageMax20)
coeftest(rdd1, vcov = vcovHC)
rdd2 = lm(wexpect$wexpect2 ~ wexpect$treatmentinformation + ageMax20)
coeftest(rdd2, vcov = vcovHC)
rdd3 = lm(wexpect$wexpect1 ~ wexpect$treatmentinformation + ageMax20+wexpect$treatmentinformation*ageMax20)
coeftest(rdd3, vcov = vcovHC)
rdd4 = lm(wexpect$wexpect2 ~ wexpect$treatmentinformation + ageMax20+wexpect$treatmentinformation*ageMax20)
coeftest(rdd4, vcov = vcovHC)
rm(list=ls())
library(foreign)
library(causalweight)
library(AER)
library(lmtest)
library(sandwich)
library(Matching)
library(MatchIt)
library(boot)
library(mgcv)
library(np)
library(arm)
library(rdd)
library(devtools)
install_github(repo="MCKnaus/dmlmt")
install.packages("mnormt")
# clear the workspace
rm(list=ls())
# set path of working directory
wDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# set path of input directory
inpDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# set path of output directory
outDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# Set the working directory to the specified one
setwd(wDir)
# Check the current working directory is the desired one
getwd()
# Load data file and attach data to workspace
data <- read.table( "S5A0-free-theta000.txt",  sep = " ")
# Load data file and attach data to workspace
data <- read.table( "S5A0-free-theta000.txt",  sep = " ")
data$angle
help("read.table")
# clear the workspace
rm(list=ls())
# set path of working directory
wDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# set path of input directory
inpDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# set path of output directory
outDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# Set the working directory to the specified one
setwd(wDir)
# Check the current working directory is the desired one
getwd()
# Load data file and attach data to workspace
data <- read.table( "S5A0-free-theta000.txt",header=True,sep ="")
# Load data file and attach data to workspace
data <- read.table( "S5A0-free-theta000.txt",header=TRUE,sep ="")
data$Sxx
# load libraries
library("ggplot2")
ggplot(data = data, mapping = aes(x = angle, y = Srr))
ggplot(data = data, mapping = aes(x = angle, y = Srr)) + geom_point()
eps = 0.01 # -
E1 = 43442.0 #MPa
E2 = 13714.0 #MPa
nu12 = 0.273 #-
nu21 = E2*nu12/E1 #-
Ehomo = E2/(1-nu21*nu12) #MPa
sigmaInf = Ehomo*eps #MPa
normSrr = data$Srr/sigmaInf
data$normSrr = data$Srr/sigmaInf
ggplot(data = data, mapping = aes(x = angle, y = normSrr)) + geom_point()
library("stats")
help(fft)
data$SrrFFT = fft(data$normSrr)
data$SrrFFT
sigmaInf
help("exp")
SrrHarmonics <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
for (i in seq_along(SrrHarmonics[,0])) {
for (j in seq_along(SrrHarmonics[i,])) {
SrrHarmonics[i,j] <- data$SrrFFT[j]*exp(-(2*pi*i*(i-1)*(j-1)/length(data$Srr)))
}
}
View(SrrHarmonics)
View(SrrHarmonics)
seq_along(SrrHarmonics[,0])
SrrHarmonics <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
for (i in 1:length(data$Srr)) {
for (j in 1:length(data$SrrFFT)) {
SrrHarmonics[i,j] <- data$SrrFFT[j]*exp(-(2*pi*i*(i-1)*(j-1)/length(data$Srr)))
}
}
View(SrrHarmonics)
sqrt(9)
2^3
a=2+7*i
Re(a)
Im(a)
a=2+7i
a
Re(a)
Im(a)
SrrHarmonics <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
SrrAmplitude <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
SrrFrequencyRad <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
SrrFrequencyDeg <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
for (h in 1:length(data$Srr)) {
for (k in 1:length(data$SrrFFT)) {
SrrHarmonics[h,k] <- data$SrrFFT[k]*exp(-(2*pi*(h-1)*(k-1)/length(data$Srr))*i)
SrrAmplitude[h,k] <- sqrt(Re(SrrHarmonics[h,k])^2+Im(SrrHarmonics[h,k])^2)
SrrFrequencyRad[h,k] <- atan2(Im(SrrHarmonics[h,k]),Re(SrrHarmonics[h,k]))
SrrFrequencyDeg[h,k] <- SrrFrequencyRad[h,k]*180.0/pi
}
}
View(SrrAmplitude)
View(SrrAmplitude)
View(SrrFrequencyDeg)
View(SrrHarmonics)
SrrHarmonics <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
SrrRe <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
SrrIm <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
SrrAmplitude <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
SrrFrequencyRad <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
SrrFrequencyDeg <- matrix(0,nrow=length(data$Srr),ncol=length(data$SrrFFT))
for (h in 1:length(data$Srr)) {
for (k in 1:length(data$SrrFFT)) {
SrrHarmonics[h,k] <- data$SrrFFT[k]*exp(-(2*pi*(h-1)*(k-1)/length(data$Srr))*i)
SrrRe[h,k] <- Re(SrrHarmonics[h,k])
SrrIm[h,k] <- Im(SrrHarmonics[h,k])
#SrrAmplitude[h,k] <- sqrt(Re(SrrHarmonics[h,k])^2+Im(SrrHarmonics[h,k])^2)
#SrrFrequencyRad[h,k] <- atan2(Im(SrrHarmonics[h,k]),Re(SrrHarmonics[h,k]))
#SrrFrequencyDeg[h,k] <- SrrFrequencyRad[h,k]*180.0/pi
}
}
View(SrrRe)
View(SrrIm)
# clear the workspace
rm(list=ls())
# load libraries
library("ggplot2")
library("stats")
# set path of working directory
wDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# set path of input directory
inpDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# set path of output directory
outDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# Set the working directory to the specified one
setwd(wDir)
# Check the current working directory is the desired one
getwd()
# Load data file and attach data to workspace
data <- read.table( "S5A0-free-theta000.txt",header=TRUE,sep ="")
#---------------------------------------------------------------------------------------
# --> Material and load parameters
eps = 0.01 # -
E1 = 43442.0 #MPa
E2 = 13714.0 #MPa
nu12 = 0.273 #-
nu21 = E2*nu12/E1 #-
Ehomo = E2/(1-nu21*nu12) #MPa
sigmaInf = Ehomo*eps #MPa
sigmaAvg = 156.362190 #MPa
data$normSrr = data$Srr/sigmaInf
data$SrrFFT = fft(data$normSrr)
SrrRe <- Re(data$SrrFFT)
SrrIm <- Im(data$SrrFFT)
SrrPhaseRad <- atan2(SrrIm,SrrRe)
SrrPhaseDeg <- SrrPhaseRad*180.0/pi
SrrPhaseDeg
SrrAmplitude <- sqrt(SrrRe*SrrRe+SrrIm*SrrIm)
SrrAmplitude
Nsamples = length(data$Srr)
rangeDeg = max(data$angle)-max(data$angle)
rangeRad = rangeDeg*pi/180.0
deltaSamplingDeg = range/Nsamples
deltaSamplingDeg = rangeDeg/Nsamples
deltaSamplingRad = deltaSamplingDeg*pi/180.0
angularFrequencyDeg = 180.0/deltaSamplingDeg
angularFrequencyRad = pi/deltaSamplingRad
Nsamples
rangeDeg
rangeDeg = max(data$angle)-min(data$angle)
rangeDeg
rangeRad = rangeDeg*pi/180.0
deltaSamplingDeg = rangeDeg/Nsamples
deltaSamplingRad = deltaSamplingDeg*pi/180.0
deltaSamplingDeg
deltaSamplingRad
angularFrequencyDeg = 180.0/deltaSamplingDeg
angularFrequencyRad = pi/deltaSamplingRad
angularFrequencyRad
k = 1:length(data$Srr)
data$k = 1:length(data$Srr)
data$SrrRe <- Re(data$SrrFFT)
data$SrrIm <- Im(data$SrrFFT)
data$SrrAmplitude <- sqrt(SrrRe*SrrRe+SrrIm*SrrIm)
data$SrrPhaseRad <- atan2(SrrIm,SrrRe)
data$SrrPhaseDeg <- SrrPhaseRad*180.0/pi
ggplot(data = data, mapping = aes(x = k, y = SrrAmplitude)) + geom_point()
ggplot(data = data, mapping = aes(x = k, y = SrrPhaseDeg)) + geom_point()
library("SynchWave")
install.packages("SynchWave")
library("SynchWave")
ggplot(data = data, mapping = aes(x = k, y = fftshift(SrrAmplitude))) + geom_point()
ggplot(data = data, mapping = aes(x = fftshift(k), y = fftshift(SrrAmplitude))) + geom_point()
data$kshift = -0.5*length(data$Srr):0.5*length(data$Srr)
ggplot(data = data, mapping = aes(x = kshift, y = fftshift(data$SrrAmplitude))) + geom_point()
data$kshift
0.5*length(data$Srr)
View(data)
ggplot(data = data, mapping = aes(x = kshift, y = fftshift(SrrAmplitude))) + geom_point()
ggplot(data = data, mapping = aes(x = k, y = fftshift(SrrAmplitude))) + geom_point()
ggplot(data = data, mapping = aes(x = k-51, y = fftshift(SrrAmplitude))) + geom_point()
data$kshift = data$k-floor(0.5*length(data$Srr))
ggplot(data = data, mapping = aes(x = kshift, y = fftshift(SrrAmplitude))) + geom_point()
data$kshift = data$k-ceil(0.5*length(data$Srr))
data$kshift = data$k-ceiling(0.5*length(data$Srr))
ggplot(data = data, mapping = aes(x = kshift, y = fftshift(SrrAmplitude))) + geom_point()
ceiling(50)
ggplot(data = data, mapping = aes(x = kshift, y = fftshift(SrrPhaseDeg)) + geom_point()
ggplot(data = data, mapping = aes(x = kshift, y = fftshift(SrrPhaseDeg))) + geom_point()
ggplot(data = data, mapping = aes(x = data$kshift, y = fftshift(data$SrrPhaseDeg))) + geom_point()
ggplot(data = data, mapping = aes(x = data$kshift, y = fftshift(data$SrrAmplitude))) + geom_point()
ggplot(data = data, mapping = aes(x = data$kshift, y = fftshift(data$SrrPhaseDeg))) + geom_point()
help("vector")
reconstructedSrr <- vector(length=length(data$Srr))
reconstructedSrr <- vector(0,length=length(data$Srr))
reconstructedSrr <- vector(length=length(data$Srr),mode="double")
a=1
a+=1
a=a+1
help(for)
help("for")
order
orderMax = 0
orderMax
for (j in 1:order+1){
reconstructedSrr = reconstructedSrr + data$SrrAmplitude[j]*cos((j-1)*data$angle*pi/180+data$SrrPhaseRad)
}
1:order+1
for (j in 1:orderMax+1){
reconstructedSrr = reconstructedSrr + data$SrrAmplitude[j]*cos((j-1)*data$angle*pi/180+data$SrrPhaseRad)
for (j in 1:orderMax+1){
reconstructedSrr = reconstructedSrr + data$SrrAmplitude[j]*cos((j-1)*data$angle*pi/180+data$SrrPhaseRad)
}

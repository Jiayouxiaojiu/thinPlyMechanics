xNonBusiness = cbind(wexpectNonBusiness$male,wexpectNonBusiness$business,wexpectNonBusiness$econ,wexpectNonBusiness$communi,wexpectNonBusiness$businform,wexpectNonBusiness$age,wexpectNonBusiness$swiss,wexpectNonBusiness$motherhighedu,wexpectNonBusiness$fatherhighedu,wexpectNonBusiness$homeowner,wexpectNonBusiness$matwellbeing)
# OLS with covariates
modelBusiness = wexpectBusiness$wexpect2~wexpectBusiness$treatmentinformation+xBusiness
modelNonBusiness = wexpectNonBusiness$wexpect2~wexpectBusiness$treatmentinformation+xNonBusiness
#OLS with covariates
olsModelBusiness = lm(modelBusiness)
coeftest(olsModelBusiness,vcov = vcovHC)
olsModelNonBusiness = lm(modelNonBusiness)
modelNonBusiness = wexpectNonBusiness$wexpect2~wexpectNonBusiness$treatmentinformation+xNonBusiness
olsModelNonBusiness = lm(modelNonBusiness)
coeftest(olsModelNonBusiness,vcov = vcovHC)
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the whole population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2,breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("topright", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the whole population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2,breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the control population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("topright", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the treated population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,1,0,0.5),add=T)
legend("topright", c("after finishing studies", "3 years after finishing studies"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
hist(wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the whole population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2,breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the control population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations for the treated population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect2-wexpect$wexpect1,breaks = 16, col=rgb(1,0,0,0.5), main="Wage expectations difference in time (T2-T1) for the whole population", xlab="Wage levels: 0 -> <3500 CHF, 16 -> >11000 CHF, steps of 500 CHF, monthly gross",ylab="Frequency")
hist(wexpect$wexpect2[wexpect$treatmentinformation==0]-wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(1,0,0,0.5),add=T)
hist(wexpect$wexpect2[wexpect$treatmentinformation==0]-wexpect$wexpect1[wexpect$treatmentinformation==0],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect2[wexpect$treatmentinformation==1]-wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,1,0,0.5),add=T)
hist(wexpect$wexpect2[wexpect$treatmentinformation==1]-wexpect$wexpect1[wexpect$treatmentinformation==1],breaks = 16, col=rgb(0,0,1,0.5),add=T)
legend("topright", c("Whole", "Control", "Treated"), col=c(rgb(1,0,0,0.5), rgb(0,1,0,0.5),rgb(0,0,1,0.5)), lwd=10)
medweight(y,d,m,x,trim = 0.0,boot = 49)
# outcome
Y = wexpect$wexpect2
# treatment
D = wexpect$treatmentinformation
# mediator
M = wexpect$wexpect1
# Vector of covariates
X = cbind(wexpect$male,wexpect$business,wexpect$econ,wexpect$communi,wexpect$businform,wexpect$age,wexpect$swiss,wexpect$motherhighedu,wexpect$fatherhighedu,wexpect$homeowner,wexpect$matwellbeing)
mediation1 = medweight(Y,D,M,X,trim = 0.0,boot = 49)
mediation1$effect#=
mediation1$se#=
mediation1
mediation2 = medweight(Y,D,M,X,trim = 0.05,boot = 49)
mediation1 = medweight(Y,D,M,X)
mediation1
ageMax20 = wexpect$age<21
length(ageMax20)
ageMax20
hist(wexpect$treatmentinformation[ageMax20==FALSE])
hist(wexpect$treatmentinformation[ageMax20==TRUE])
hist(wexpect$treatmentinformation[wexpect$age<21])
hist(wexpect$treatmentinformation[wexpect$age>=21])
summary(wexpect$treatmentinformation[wexpect$age<21])
summary(wexpect$treatmentinformation[wexpect$age>=21])
ageMax20 = as.integer(wexpect$age<21)
summary(ageMax20)
rdd1 = lm(wexpect$expect1 ~ wexpect$treatmentinformation + ageMax20)
rdd1 = lm(wexpect$wexpect1 ~ wexpect$treatmentinformation + ageMax20)
coeftest(rdd1, vcov = vcovHC)
rdd2 = lm(wexpect$wexpect2 ~ wexpect$treatmentinformation + ageMax20)
coeftest(rdd2, vcov = vcovHC)
rdd3 = lm(wexpect$wexpect1 ~ wexpect$treatmentinformation + ageMax20+wexpect$treatmentinformation*ageMax20)
coeftest(rdd3, vcov = vcovHC)
rdd4 = lm(wexpect$wexpect2 ~ wexpect$treatmentinformation + ageMax20+wexpect$treatmentinformation*ageMax20)
coeftest(rdd4, vcov = vcovHC)
rm(list=ls())
library(foreign)
library(causalweight)
library(AER)
library(lmtest)
library(sandwich)
library(Matching)
library(MatchIt)
library(boot)
library(mgcv)
library(np)
library(arm)
library(rdd)
library(devtools)
install_github(repo="MCKnaus/dmlmt")
install.packages("mnormt")
rm(list=ls())
# load libraries
library("ggplot2")
library("stats")
library("SynchWave")
# set path of working directory
wDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# set path of input directory
inpDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# set path of output directory
outDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# Set the working directory to the specified one
setwd(wDir)
# Check the current working directory is the desired one
getwd()
# Load data file and attach data to workspace
S100A5FreeGI <- read.table( "S100A5-free-GI.txt",header=TRUE,sep ="")
# Load data file and attach data to workspace
S100A5FreeGI <- read.table( "ERR-S100A5-free-GI.txt",header=TRUE,sep ="")
S100A5FreeGII <- read.table( "ERR-S100A5-free-GII.txt",header=TRUE,sep ="")
eps = 0.01 # -
E1 = 43442.0 #MPa
E2 = 13714.0 #MPa
nu12 = 0.273 #-
nu21 = E2*nu12/E1 #-
Ehomo = E2/(1-nu21*nu12) #MPa
sigmaInf = Ehomo*eps #MPa
ggplot(data = S100A5FreeGI, mapping = aes(x = angle, y = GI)) + geom_point()
rm(list=ls())
# load libraries
library("ggplot2")
library("stats")
library("SynchWave")
# set path of working directory
wDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# set path of input directory
inpDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# set path of output directory
outDir <- file.path("C:","02_Local-folder","01_Luca","01_WD","thinPlyMechanics","r")
# Set the working directory to the specified one
setwd(wDir)
# Check the current working directory is the desired one
getwd()
# Load data file and attach data to workspace
S100A5FreeGI <- read.table( "ERR-S100A5-free-GI.txt",header=TRUE,sep ="")
S100A5FreeGII <- read.table( "ERR-S100A5-free-GII.txt",header=TRUE,sep ="")
eps = 0.01 # -
E1 = 43442.0 #MPa
E2 = 13714.0 #MPa
nu12 = 0.273 #-
nu21 = E2*nu12/E1 #-
Ehomo = E2/(1-nu21*nu12) #MPa
sigmaInf = Ehomo*eps #MPa
ggplot(data = S100A5FreeGI, mapping = aes(x = angle, y = GI)) + geom_point() + geom_line()
ggplot(data = S100A5FreeGII, mapping = aes(x = angle, y = GII)) + geom_point()
ggplot(data = S100A5FreeGI, mapping = aes(x = angle, y = normGI)) + geom_point()
S100A5FreeGI$normGI = S100A5FreeGI$normGI/G0
S100A5FreeGII$normGII = S100A5FreeGII$normGII/G0
ggplot(data = S100A5FreeGI, mapping = aes(x = angle, y = normGI)) + geom_point()
ggplot(data = S100A5FreeGII, mapping = aes(x = angle, y = normGII)) + geom_point()
G0 = Ehomo*10^6*Rf*eps^2 #J/m^2
S100A5FreeGI$normGI = S100A5FreeGI$normGI/G0
Rf = 10^-6 # m
G0 = Ehomo*10^6*Rf*eps^2 #J/m^2
S100A5FreeGI$normGI = S100A5FreeGI$normGI/G0
S100A5FreeGI$normGI = S100A5FreeGI$GI/G0
S100A5FreeGII$normGII = S100A5FreeGII$GII/G0
ggplot(data = S100A5FreeGI, mapping = aes(x = angle, y = normGI)) + geom_point()
ggplot(data = S100A5FreeGII, mapping = aes(x = angle, y = normGII)) + geom_point()
S100A5FreeGI$GIFFT = fft(S100A5FreeGI$normGI)
S100A5FreeGII$GIIFFT = fft(S100A5FreeGII$normGII)
S100A5FreeGI$k = 1:length(S100A5FreeGI$normSrr)
S100A5FreeGI$kshift = S100A5FreeGI$k-ceiling(0.5*length(S100A5FreeGI$normSrr))
S100A5FreeGII$k = 1:length(S100A5FreeGII$normSrr)
S100A5FreeGII$kshift = S100A5FreeGII$k-ceiling(0.5*length(S100A5FreeGII$normSrr))
S100A5FreeGI$SrrRe <- Re(S100A5FreeGI$SrrFFT)
S100A5FreeGI$GIRe <- Re(S100A5FreeGI$GIFFT)
S100A5FreeGI$GIIm <- Im(S100A5FreeGI$GIFFT)
S100A5FreeGI$GIAmplitude <- sqrt(S100A5FreeGI$GIRe*S100A5FreeGI$GIRe+S100A5FreeGI$GIIm*S100A5FreeGI$GIIm)
S100A5FreeGI$GIPhaseRad <- atan2(S100A5FreeGI$GIIm,S100A5FreeGI$GIRe)
S100A5FreeGI$GIPhaseDeg <- S100A5FreeGI$GIPhaseRad*180.0/pi
S100A5FreeGII$GIIRe <- Re(S100A5FreeGII$GIIFFT)
S100A5FreeGII$GIIIm <- Im(S100A5FreeGII$GIIFFT)
S100A5FreeGII$GIIAmplitude <- sqrt(S100A5FreeGII$GIIRe*S100A5FreeGII$GIIRe+S100A5FreeGII$GIIIm*S100A5FreeGII$GIIIm)
S100A5FreeGII$GIIPhaseRad <- atan2(S100A5FreeGII$GIIIm,S100A5FreeGII$GIIRe)
S100A5FreeGII$GIIPhaseDeg <- S100A5FreeGII$GIIPhaseRad*180.0/pi
ggplot(data = S100A5FreeGI, mapping = aes(x = kshift, y = fftshift(GIAmplitude))) + geom_point()
ggplot(data = S100A5FreeGI, mapping = aes(x = k, y = GIAmplitude)) + geom_point()
ggplot(data = S100A5FreeGI, mapping = aes(x = kshift, y = fftshift(GIAmplitude))) + geom_point()
S100A5FreeGI$k = 1:length(S100A5FreeGI$normGI)
S100A5FreeGI$kshift = S100A5FreeGI$k-ceiling(0.5*length(S100A5FreeGI$normGI))
S100A5FreeGII$k = 1:length(S100A5FreeGII$normGII)
S100A5FreeGII$kshift = S100A5FreeGII$k-ceiling(0.5*length(S100A5FreeGII$normGII))
ggplot(data = S100A5FreeGI, mapping = aes(x = kshift, y = fftshift(GIAmplitude))) + geom_point()
ggplot(data = S100A5FreeGI, mapping = aes(x = k, y = GIAmplitude)) + geom_point()
View(S100A5FreeGI)
S100A5FreeGI$kshift = S100A5FreeGI$k-floor(0.5*length(S100A5FreeGI$normGI))
ggplot(data = S100A5FreeGI, mapping = aes(x = k, y = GIAmplitude)) + geom_point()
ggplot(data = S100A5FreeGI, mapping = aes(x = kshift, y = fftshift(GIAmplitude))) + geom_point()
S100A5FreeGI$kshift = S100A5FreeGI$k-ceiling(0.5*length(S100A5FreeGI$normGI))
ggplot(data = S100A5FreeGI, mapping = aes(x = kshift, y = fftshift(GIAmplitude))) + geom_point()
S100A5FreeGI$kshift = S100A5FreeGI$k-ceiling(0.5*length(S100A5FreeGI$normGI))+1
ggplot(data = S100A5FreeGI, mapping = aes(x = kshift, y = fftshift(GIAmplitude))) + geom_point()
S100A5FreeGI$kshift = S100A5FreeGI$k-ceiling(0.5*length(S100A5FreeGI$normGI))-1
ggplot(data = S100A5FreeGI, mapping = aes(x = kshift, y = fftshift(GIAmplitude))) + geom_point()
S100A5FreeGI$kshift = S100A5FreeGI$k-ceiling(0.5*length(S100A5FreeGI$normGI))
ggplot(data = S100A5FreeGI, mapping = aes(x = kshift, y = fftshift(GIAmplitude))) + geom_point()
y1 = S100A5FreeGI$normGI
x1 = cos(2*1*S100A5FreeGI$angle*pi/180)
x2 = cos(2*2*S100A5FreeGI$angle*pi/180)
x3 = cos(2*3*S100A5FreeGI$angle*pi/180)
x4 = cos(2*4*S100A5FreeGI$angle*pi/180)
x5 = cos(2*5*S100A5FreeGI$angle*pi/180)
x6 = cos(2*6*S100A5FreeGI$angle*pi/180)
x7 = cos(2*7*S100A5FreeGI$angle*pi/180)
x8 = cos(2*8*S100A5FreeGI$angle*pi/180)
x9 = cos(2*9*S100A5FreeGI$angle*pi/180)
x10 = cos(2*10*S100A5FreeGI$angle*pi/180)
modelGI = y1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
olsGI = lm(formula = modelGI)
summary(olsGI)
x1 = sin(2*1*S100A5FreeGI$angle*pi/180)
x2 = sin(2*2*S100A5FreeGI$angle*pi/180)
x3 = sin(2*3*S100A5FreeGI$angle*pi/180)
x4 = sin(2*4*S100A5FreeGI$angle*pi/180)
x5 = sin(2*5*S100A5FreeGI$angle*pi/180)
x6 = sin(2*6*S100A5FreeGI$angle*pi/180)
x7 = sin(2*7*S100A5FreeGI$angle*pi/180)
x8 = sin(2*8*S100A5FreeGI$angle*pi/180)
x9 = sin(2*9*S100A5FreeGI$angle*pi/180)
x10 = sin(2*10*S100A5FreeGI$angle*pi/180)
modelGI = y1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
olsGI = lm(formula = modelGI)
summary(olsGI)
reconstructedGIOLS <- vector(length=length(S100A5FreeGI$angle),mode="double")
orderMin = 1
orderMax = 1
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*S100A5FreeGI$angle*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = S100A5FreeGI$angle, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
reconstructedGIOLS <- vector(length=length(S100A5FreeGI$angle),mode="double")
orderMin = 0
orderMax = 1
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*S100A5FreeGI$angle*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = S100A5FreeGI$angle, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
reconstructedGIOLS <- vector(length=length(S100A5FreeGI$angle),mode="double")
orderMin = 1
orderMax = 4
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*S100A5FreeGI$angle*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = S100A5FreeGI$angle, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
reconstructedGIOLS <- vector(length=length(S100A5FreeGI$angle),mode="double")
orderMin = 1
orderMax = 10
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*S100A5FreeGI$angle*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = S100A5FreeGI$angle, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
econstructedGIOLS <- vector(length=length(S100A5FreeGI$angle),mode="double")
orderMin = 1
orderMax = 8
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*S100A5FreeGI$angle*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = S100A5FreeGI$angle, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
reconstructedGIOLS <- vector(length=length(S100A5FreeGI$angle),mode="double")
orderMin = 0
orderMax = 4
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*S100A5FreeGI$angle*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = S100A5FreeGI$angle, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = 0:0.1:150.0
angleReconstruction = seq(from=0.0,to=150.0,by=0.1)
angleReconstruction = seq(from=0.0,to=150.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 0
orderMax = 4
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleOLS = S100A5FreeGI$angle[S100A5FreeGI$angle>70.0]
y1 = S100A5FreeGI$normGI[S100A5FreeGI$angle>70.0]
x1 = sin(2*1*angleOLS*pi/180)
x2 = sin(2*2*angleOLS*pi/180)
x3 = sin(2*3*angleOLS*pi/180)
x4 = sin(2*4*angleOLS*pi/180)
x5 = sin(2*5*angleOLS*pi/180)
x6 = sin(2*6*angleOLS*pi/180)
x7 = sin(2*7*angleOLS*pi/180)
x8 = sin(2*8*angleOLS*pi/180)
x9 = sin(2*9*angleOLS*pi/180)
x10 = sin(2*10*angleOLS*pi/180)
y1 = S100A5FreeGI$normGI[S100A5FreeGI$angle>70.0]
angleOLS = S100A5FreeGI$angle[S100A5FreeGI$angle>70.0]
y1 = S100A5FreeGI$normGI[S100A5FreeGI$angle>70.0]
angleOLS = S100A5FreeGI$angle[S100A5FreeGI$angle>70.0]
x1 = sin(2*1*angleOLS*pi/180)
x2 = sin(2*2*angleOLS*pi/180)
x3 = sin(2*3*angleOLS*pi/180)
x4 = sin(2*4*angleOLS*pi/180)
x5 = sin(2*5*angleOLS*pi/180)
x6 = sin(2*6*angleOLS*pi/180)
x7 = sin(2*7*angleOLS*pi/180)
x8 = sin(2*8*angleOLS*pi/180)
x9 = sin(2*9*angleOLS*pi/180)
x10 = sin(2*10*angleOLS*pi/180)
modelGI = y1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
olsGI = lm(formula = modelGI)
summary(olsGI)
y1 = S100A5FreeGI$normGI[S100A5FreeGI$angle<80.0]
angleOLS = S100A5FreeGI$angle[S100A5FreeGI$angle>70.0]
x1 = sin(2*1*angleOLS*pi/180)
x2 = sin(2*2*angleOLS*pi/180)
x3 = sin(2*3*angleOLS*pi/180)
x4 = sin(2*4*angleOLS*pi/180)
x5 = sin(2*5*angleOLS*pi/180)
x6 = sin(2*6*angleOLS*pi/180)
x7 = sin(2*7*angleOLS*pi/180)
x8 = sin(2*8*angleOLS*pi/180)
x9 = sin(2*9*angleOLS*pi/180)
x10 = sin(2*10*angleOLS*pi/180)
modelGI = y1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
olsGI = lm(formula = modelGI)
summary(olsGI)
angleReconstruction = seq(from=0.0,to=150.0,by=0.1)
orderMin = 1
orderMax = 1
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 1
orderMax = 1
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 1
orderMax = 2
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 1
orderMax = 3
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 1
orderMax = 4
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 1
orderMax = 5
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 1
orderMax = 6
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 1
orderMax = 7
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 0
orderMax = 6
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 0
orderMax = 1
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 0
orderMax = 3
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
x1 = sin(1*angleOLS*pi/180)
x2 = sin(2*angleOLS*pi/180)
x3 = sin(3*angleOLS*pi/180)
x4 = sin(4*angleOLS*pi/180)
x5 = sin(5*angleOLS*pi/180)
x6 = sin(6*angleOLS*pi/180)
x7 = sin(7*angleOLS*pi/180)
x8 = sin(8*angleOLS*pi/180)
x9 = sin(9*angleOLS*pi/180)
x10 = sin(10*angleOLS*pi/180)
modelGI = y1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
olsGI = lm(formula = modelGI)
summary(olsGI)
y1 = S100A5FreeGI$normGI[S100A5FreeGI$angle<80.0]
angleOLS = S100A5FreeGI$angle[S100A5FreeGI$angle<80.0]
x1 = sin(2*1*angleOLS*pi/180)
x2 = sin(2*2*angleOLS*pi/180)
x3 = sin(2*3*angleOLS*pi/180)
x4 = sin(2*4*angleOLS*pi/180)
x5 = sin(2*5*angleOLS*pi/180)
x6 = sin(2*6*angleOLS*pi/180)
x7 = sin(2*7*angleOLS*pi/180)
x8 = sin(2*8*angleOLS*pi/180)
x9 = sin(2*9*angleOLS*pi/180)
x10 = sin(2*10*angleOLS*pi/180)
modelGI = y1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
olsGI = lm(formula = modelGI)
summary(olsGI)
x1 = sin(1*angleOLS*pi/180)
x2 = sin(2*angleOLS*pi/180)
x3 = sin(3*angleOLS*pi/180)
x4 = sin(4*angleOLS*pi/180)
x5 = sin(5*angleOLS*pi/180)
x6 = sin(6*angleOLS*pi/180)
x7 = sin(7*angleOLS*pi/180)
x8 = sin(8*angleOLS*pi/180)
x9 = sin(9*angleOLS*pi/180)
x10 = sin(10*angleOLS*pi/180)
modelGI = y1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
olsGI = lm(formula = modelGI)
summary(olsGI)
modelGI = y1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7
olsGI = lm(formula = modelGI)
summary(olsGI)
modelGI = y1 ~ x1 + x2 + x3 + x4 + x5 + x6
olsGI = lm(formula = modelGI)
summary(olsGI)
modelGI = y1 ~ x1 + x2 + x3 + x4 + x5
olsGI = lm(formula = modelGI)
summary(olsGI)
modelGI = y1 ~ x1 + x2 + x3 + x4
olsGI = lm(formula = modelGI)
summary(olsGI)
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 0
orderMax = 3
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
angleReconstruction = seq(from=0.0,to=70.0,by=0.1)
reconstructedGIOLS <- vector(length=length(angleReconstruction),mode="double")
orderMin = 0
orderMax = 1
for (j in 0:orderMax){
reconstructedGIOLS = reconstructedGIOLS + olsGI$coefficients[j+1]*sin(2*j*angleReconstruction*pi/180)
}
ggplot()+
geom_line(mapping = aes(x = angleReconstruction, y = reconstructedGIOLS),color="green")+
geom_point(data=S100A5FreeGI,mapping = aes(x = angle, y = GI),color="blue")
